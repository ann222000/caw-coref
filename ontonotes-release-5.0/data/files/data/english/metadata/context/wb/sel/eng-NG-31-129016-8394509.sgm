<DOC>
<DOCID> eng-NG-31-129016-8394509 </DOCID>
<DOCTYPE SOURCE="usenet"> USENET TEXT </DOCTYPE>
<DATETIME> 2007-07-31T22:15:00 </DATETIME>
<BODY>
<HEADLINE>
Wood Tick's Guide to Hacking openQM
</HEADLINE>
<TEXT>
<POST>
<POSTER> Amphiprion &lt;t...@blackflute.com&gt; </POSTER>
<POSTDATE> 2007-07-31T22:15:00 </POSTDATE>
1. Download and install the openQM GPL package generously provided by
Ladybridge.
http://www.openqm.com/cgi-bin/lbscgi?T0=GPL

--EITHER--

2.a. Use the above package enough to acquire a sense of which areas
might need help and that you would be inclined to work with.

--OR--

2.b. Contact Ladybridge and begin a conversation in which you might
find common ground where your interests/abilities will mesh with areas
in which the engineering staff could use some assistance.

3. Use your years of MV design and programming experience to effect
elegant solutions to important problems.

Or perhaps you could simply say to yourself something like: &quot;Ah, that
sounds like giving away work. I've found one of the last healthy bison
- maybe I will just nestle in and see if I can get some free blood.
</POST>
<POST>
<POSTER> Symeon &lt;syme...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-08-01T16:25:00 </POSTDATE>
On Aug 1, 3:15 am, Amphiprion &lt;t ... @blackflute.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; 3. Use your years of MV design and programming experience to effect
&gt; elegant solutions to important problems.
">

Can I ask a question on this. - If all the addon fucntionality is
written in databasic (as opposed to C which i think is the view
(admitadly mistaken) of many pick people about openQm) Then do they
perform well - I ask as the most used addons i use in unidata (socket
and xml handleing) are obviously written in c, so I just wonder how
efficient a Databasic version would be - I am not saying it wont - i
dont know - it is a point of interest for me thats all...

Thanks
Symeon.
</POST>
<POST>
<POSTER> &quot;Martin Phillips&quot; &lt;martinphill...@ladybridge.com&gt; </POSTER>
<POSTDATE> 2007-08-01T16:55:00 </POSTDATE>
Hi all,

Let's clarify things a bit....

The QM kernel is written in C. This includes the obvious opcodes such as
arithmetic and string functions, file handling, etc as well as things such
as the socket interface referenced in Symeon's posting.

The command language, query processor, and even the QMBasic compiler are
written in QMBasic (interesting &quot;chicken and egg&quot; problem). User feedback
suggests that there is no performance problem with any of this. Our own
tests show that we are slightly faster in a typical application mix than
some of the mainstream multivalue players and a bit slower than others but
not significantly. It is always possible to pick specific architectural
differences where one environment will out perform another so let's not try
to quantify performance in detail.

For those who have not delved into the internals of QM (and we don't really
recommend it!), we have a delightful concept called recursive Basic. As a
simple example, consider the process of opening a file. The OPEN opcode must
decode exactly what it is being asked to do, process the corresponding VOC
record to resolve pathnames, Q-pointers, etc, and then do the actual open.
Although this could all be done in C, the VOC record processing is far
easier in Basic. So, what we have is a way in which a C opcode can
effectively call a chunk of Basic in the middle of its operation.

If that example isn't complex enough for you, the INPUT opcode (a single
byte in the object code), recurses into a 400 line QMBasic program
(including comments/blank lines - I cannot be bothered to count the &quot;real&quot;
lines for this discussion). This program uses the KEYCODE() function to read
and decode a keystroke based on terminal type and the terminfo system.
KEYCODE is also a recursive operation (130 lines). So INPUT actually
recurses inside a recursive - Wow!

The kernel consists of nearly 120,000 lines of C but this includes vast
chunks of comments, blank lines, and lots of conditional stuff that doesn't
appear in the open source version. The QMBasic component is actually
slightly smaller but, of course, a single line of Basic does much more than
a single line of C.

Our design aim was to write as much of the system in Basic as possible. We
would also recommend that any open source development should be done in
Basic where possible because (a) it is a more widely understood language
within the multivalue community, (b) it tends to be much faster to write,
(c) maintenance and modification is easier, and (d) it is usually much
easier to debug.

Taking Symeon's point about performance, one reason why things work so well
in Basic is that we provided a few additional internal functions to help
specific areas that might not be so good written in the &quot;public&quot; parts of
QMBasic. These tend not to be available for user programs as they may change
from one release to the next.

For those not interested in open source, what language is used to write the
system should be irrelevant so long as it works effectively.

Martin Phillips, Ladybridge Systems Ltd
</POST>
</TEXT>
</BODY>
</DOC>
