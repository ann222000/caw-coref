<DOC>
<DOCID> eng-NG-31-135517-9742423 </DOCID>
<DOCTYPE SOURCE="usenet"> USENET TEXT </DOCTYPE>
<DATETIME> 2007-12-25T05:24:00 </DATETIME>
<BODY>
<HEADLINE>
where to begin
</HEADLINE>
<TEXT>
<POST>
<POSTER> Joseph Anthony Pasquale Holsten &lt;jos...@josephholsten.com&gt; </POSTER>
<POSTDATE> 2007-12-25T05:24:00 </POSTDATE>
Hello everyone,
I'm an undergrad. I have learning to do, and would like to get on
with it.

I want to get into the more esoteric side of scheme, and hopefully
strengthen my knowledge of current programming language research.
I've got the Lambda the Ultimate blog in my feed reader, but most of
the stuff is over my head. Coq and provability have been know to
cause my eyes to glaze over for 20+ minutes.

I thought I might port some of my current ruby code into scheme to
fiddle with any new techniques I find. It's a Genetic Programming
framework, but that's irrelevant, I just want a decent sized project
to see the effects of. I'm open to alternate projects so long as I
can wrap my head around them.

I'm looking forward to trying contracts and laziness, but am not sure
what else to play with. Anything else I should investigate?

Joseph Holsten
_________________________________________________
For list-related administrative tasks:
http://list.cs.brown.edu/mailman/listinfo/plt-scheme
</POST>
<POST>
<POSTER> Chongkai Zhu &lt;c...@cs.utah.edu&gt; </POSTER>
<POSTDATE> 2007-12-26T01:45:00 </POSTDATE>
PLAI ( http://www.cs.brown.edu/~sk/Publications/Books/ProgLangs/2007-04-26/ )

Chongkai

Joseph Anthony Pasquale Holsten wrote:

<QUOTE PREVIOUSPOST="
&gt; Hello everyone,
&gt; I'm an undergrad. I have learning to do, and would like to get on with
&gt; it.

&gt; I want to get into the more esoteric side of scheme, and hopefully
&gt; strengthen my knowledge of current programming language research. I've
&gt; got the Lambda the Ultimate blog in my feed reader, but most of the
&gt; stuff is over my head. Coq and provability have been know to cause my
&gt; eyes to glaze over for 20+ minutes.

&gt; I thought I might port some of my current ruby code into scheme to
&gt; fiddle with any new techniques I find. It's a Genetic Programming
&gt; framework, but that's irrelevant, I just want a decent sized project
&gt; to see the effects of. I'm open to alternate projects so long as I can
&gt; wrap my head around them.

&gt; I'm looking forward to trying contracts and laziness, but am not sure
&gt; what else to play with. Anything else I should investigate?

&gt; Joseph Holsten
&gt; _________________________________________________
&gt;  For list-related administrative tasks:
&gt; http://list.cs.brown.edu/mailman/listinfo/plt-scheme
">

_________________________________________________
For list-related administrative tasks:
http://list.cs.brown.edu/mailman/listinfo/plt-scheme
</POST>
<POST>
<POSTER> &quot;Benjamin L. Russell&quot; &lt;dekudekup...@yahoo.com&gt; </POSTER>
<POSTDATE> 2007-12-26T02:33:00 </POSTDATE>
Two sites that have interesting programming exercises
are the following:

Project Euler: http://projecteuler.net/
Problems:
http://projecteuler.net/index.php?section=view

Rosetta Code:
http://www.rosettacode.org/wiki/Main_Page
Solutions by programming task:
http://www.rosettacode.org/rosettacode/w/index.php?title=Category:Sol...

Of the above two, I would first recommend Project
Euler because of the following reasons:

* Each problem is stated succinctly.

* It offers a list of problems listed in progressive
order of difficulty.

* Each problem has been designed according to the
&quot;one-minute rule,&quot; &quot;which means that although it may
take several hours to design a successful algorithm
with more difficult problems, an efficient
implementation will allow a solution to be obtained on
a modestly powered computer in less than one minute&quot;
(courtesy of
http://projecteuler.net/index.php?section=about ).

* For registered users, the site keeps track of the
number of users who have solved each problem.

Useful programming references for these exercises
would probably be the following (in addition to the
PLAI book
( http://www.cs.brown.edu/~sk/Publications/Books/ProgLangs/2007-04-26/ )
already mentioned in another post):

How to Design Programs (a.k.a. &quot;HtDP&quot;):
http://www.htdp.org/

Concrete Abstractions:
http://gustavus.edu/+max/concrete-abstractions.html

You may also wish to consult the following reference
for language-specific questions on the Scheme
programming language (as opposed to questions on
programming in general):
Teach Yourself Scheme in Fixnum Days:
http://www.ccs.neu.edu/home/dorai/t-y-scheme/t-y-scheme.html

Eventually, once you are up to the challenge, you may
wish to try the following classic as well:

Structure and Interpretation of Computer Programs:
http://mitpress.mit.edu/sicp/

There is another interesting programming challenge I
discovered recently as well, but because I myself am
currently working on this project, please let me solve
it first before I post it here.

Benjamin L. Russell

--- Joseph Anthony Pasquale Holsten

<QUOTE PREVIOUSPOST="
&lt;jos ... @josephholsten.com&gt; wrote:
&gt; Hello everyone,
&gt; I'm an undergrad. I have learning to do, and would
&gt; like to get on
&gt; with it.

&gt; I want to get into the more esoteric side of scheme,
&gt; and hopefully
&gt; strengthen my knowledge of current programming
&gt; language research.
&gt; I've got the Lambda the Ultimate blog in my feed
&gt; reader, but most of
&gt; the stuff is over my head. Coq and provability have
&gt; been know to
&gt; cause my eyes to glaze over for 20+ minutes.

&gt; I thought I might port some of my current ruby code
&gt; into scheme to
&gt; fiddle with any new techniques I find. It's a
&gt; Genetic Programming
&gt; framework, but that's irrelevant, I just want a
&gt; decent sized project
&gt; to see the effects of. I'm open to alternate
&gt; projects so long as I
&gt; can wrap my head around them.

&gt; I'm looking forward to trying contracts and
&gt; laziness, but am not sure
&gt; what else to play with. Anything else I should
&gt; investigate?

&gt; Joseph Holsten
&gt; _________________________________________________
&gt;   For list-related administrative tasks:

&gt; http://list.cs.brown.edu/mailman/listinfo/plt-scheme
">

_________________________________________________
For list-related administrative tasks:
http://list.cs.brown.edu/mailman/listinfo/plt-scheme
</POST>
<POST>
<POSTER> &quot;Benjamin L. Russell&quot; &lt;dekudekup...@yahoo.com&gt; </POSTER>
<POSTDATE> 2007-12-26T05:14:00 </POSTDATE>
Here are a three other online references on Scheme
that I had forgotten to mention in my earlier post:

How to Use Scheme:  Writing Scripts and Programs with
PLT Scheme:
http://www.htus.org/

The Scheme Programming Language, Second Edition:
http://www.scheme.com/tspl2d/

The Scheme Programming Language, Third Edition:
http://www.scheme.com/tspl3/

An interesting project that you may wish to
investigate is how somebody recently wrote a spelling
corrector in PLT Scheme (see Jens Axel Søgaard's blog
entry, &quot;Everything Scheme | Writing a Spelling
Corrector in PLT Scheme,&quot; at
http://scheme.dk/blog/2007/04/writing-spelling-corrector-in-plt.html ).

This spelling corrector was actually based on a
similar spelling corrector in Gauche Scheme (see
&quot;Gauche:SpellingCorrection,&quot; at
http://practical-scheme.net/wiliki/wiliki.cgi?Gauche%3aSpellingCorrec... ),
written by Shiro.

In turn, that spelling corrector was based on another
spelling corrector in Python (see &quot;How to Write a
Spelling Corrector,&quot; at
http://www.norvig.com/spell-correct.html ), written by
Peter Norvig.

That original spelling corrector inspired one blogger,
Scott Kirkwood, to write the entry &quot;Scott's Blog:
Another reason I like working at Google&quot; in which he
mentioned that example.

That blog entry was what led me to find all those
programs.

On that same page, you will also find a reference to
Norvig's Sudoku Solver (see &quot;Solving Every Sudoku
Puzzle,&quot; at http://norvig.com/sudoku.html ).  Doing a
Google search on &quot;Sudoku +Scheme&quot; brought up a site
entitled &quot;Schemely Blog: Scheme Sudoku Solver&quot; (see
http://schemely.blogspot.com/2006/02/scheme-sudoku-solver.html ),
with the Scheme source code posted at &quot;Schemely:
Sudoku Solver1&quot; (see
http://www.bobmc.net/cgi-bin/Schemely.pl/Sudoku_Solver1 ).

One strategy for coming up with interesting projects
in Scheme is to find interesting projects in other
programming languages, figure out how they work,
translate them into PLT Scheme, and then post them
somewhere (preferably where you can outshine other
people have posted similar examples in other
programming languages).

While you're at it, try to write legible,
well-commented, optimized code so that other
programmers will quote you, but will have difficulty
one-upping you.  Ideally, you should aim to practice
literate programming (see &quot;Knuth: Literate
Programming,&quot; at
http://www-cs-faculty.stanford.edu/~knuth/lp.html ) so
that your code is written first for human beings, and
only second for the compiler/interpreter.

Benjamin L. Russell

--- &quot;Benjamin L. Russell&quot; &lt;dekudekup ... @yahoo.com&gt;
wrote:

<QUOTE PREVIOUSPOST="
&gt; Two sites that have interesting programming
&gt; exercises
&gt; are the following:

&gt; Project Euler: http://projecteuler.net/
&gt; Problems:
&gt; http://projecteuler.net/index.php?section=view

&gt; Rosetta Code:
&gt; http://www.rosettacode.org/wiki/Main_Page
&gt; Solutions by programming task:
">

http://www.rosettacode.org/rosettacode/w/index.php?title=Category:Sol...

<QUOTE PREVIOUSPOST="
&gt; Of the above two, I would first recommend Project
&gt; Euler because of the following reasons:

&gt; * Each problem is stated succinctly.

&gt; * It offers a list of problems listed in progressive
&gt; order of difficulty.

&gt; * Each problem has been designed according to the
&gt; &quot;one-minute rule,&quot; &quot;which means that although it may
&gt; take several hours to design a successful algorithm
&gt; with more difficult problems, an efficient
&gt; implementation will allow a solution to be obtained
&gt; on
&gt; a modestly powered computer in less than one minute&quot;
&gt; (courtesy of
&gt; http://projecteuler.net/index.php?section=about ).

&gt; * For registered users, the site keeps track of the
&gt; number of users who have solved each problem.

&gt; Useful programming references for these exercises
&gt; would probably be the following (in addition to the
&gt; PLAI book
">

( http://www.cs.brown.edu/~sk/Publications/Books/ProgLangs/2007-04-26/ )

<QUOTE PREVIOUSPOST="
&gt; already mentioned in another post):

&gt; How to Design Programs (a.k.a. &quot;HtDP&quot;):
&gt; http://www.htdp.org/

&gt; Concrete Abstractions:
&gt; http://gustavus.edu/+max/concrete-abstractions.html

&gt; You may also wish to consult the following reference
&gt; for language-specific questions on the Scheme
&gt; programming language (as opposed to questions on
&gt; programming in general):
&gt; Teach Yourself Scheme in Fixnum Days:
">

http://www.ccs.neu.edu/home/dorai/t-y-scheme/t-y-scheme.html

<QUOTE PREVIOUSPOST="
- Hide quoted text - - Show quoted text -
">

<QUOTE PREVIOUSPOST="
&gt; Eventually, once you are up to the challenge, you
&gt; may
&gt; wish to try the following classic as well:

&gt; Structure and Interpretation of Computer Programs:
&gt; http://mitpress.mit.edu/sicp/

&gt; There is another interesting programming challenge I
&gt; discovered recently as well, but because I myself am
&gt; currently working on this project, please let me
&gt; solve
&gt; it first before I post it here.

&gt; Benjamin L. Russell

&gt; --- Joseph Anthony Pasquale Holsten
&gt; &lt;jos ... @josephholsten.com&gt; wrote:

&gt; &gt; Hello everyone,
&gt; &gt; I'm an undergrad. I have learning to do, and would
&gt; &gt; like to get on
&gt; &gt; with it.

&gt; &gt; I want to get into the more esoteric side of
&gt; scheme,
&gt; &gt; and hopefully
&gt; &gt; strengthen my knowledge of current programming
&gt; &gt; language research.
&gt; &gt; I've got the Lambda the Ultimate blog in my feed
&gt; &gt; reader, but most of
&gt; &gt; the stuff is over my head. Coq and provability
&gt; have
&gt; &gt; been know to
&gt; &gt; cause my eyes to glaze over for 20+ minutes.

&gt; &gt; I thought I might port some of my current ruby
&gt; code
&gt; &gt; into scheme to
&gt; &gt; fiddle with any new techniques I find. It's a
&gt; &gt; Genetic Programming
&gt; &gt; framework, but that's irrelevant, I just want a
&gt; &gt; decent sized project
&gt; &gt; to see the effects of. I'm open to alternate
&gt; &gt; projects so long as I
&gt; &gt; can wrap my head around them.

&gt; &gt; I'm looking forward to trying contracts and
&gt; &gt; laziness, but am not sure
&gt; &gt; what else to play with. Anything else I should
&gt; &gt; investigate?

&gt; &gt; Joseph Holsten
&gt; &gt; _________________________________________________
&gt; &gt;   For list-related administrative tasks:

&gt; http://list.cs.brown.edu/mailman/listinfo/plt-scheme

&gt; _________________________________________________
&gt;   For list-related administrative tasks:

&gt; http://list.cs.brown.edu/mailman/listinfo/plt-scheme
">

_________________________________________________
For list-related administrative tasks:
http://list.cs.brown.edu/mailman/listinfo/plt-scheme
</POST>
<POST>
<POSTER> Jens Axel Soegaard &lt;jensa...@soegaard.net&gt; </POSTER>
<POSTDATE> 2007-12-27T06:19:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Benjamin L. Russell wrote:
&gt; An interesting project that you may wish to
&gt; investigate is how somebody recently wrote a spelling
&gt; corrector in PLT Scheme (see Jens Axel Søgaard's blog
&gt; entry, &quot;Everything Scheme | Writing a Spelling
&gt; Corrector in PLT Scheme,&quot; at
&gt; http://scheme.dk/blog/2007/04/writing-spelling-corrector-in-plt.html ).

&gt; This spelling corrector was actually based on a
&gt; similar spelling corrector in Gauche Scheme (see
&gt; &quot;Gauche:SpellingCorrection,&quot; at
&gt; http://practical-scheme.net/wiliki/wiliki.cgi?Gauche%3aSpellingCorrec... ),
&gt; written by Shiro.
">

Actually it is based on the description Norvig gave.

Writing a new Scheme spelling corrector starting from
scratch given Norvig's description would be a reasonable
sized project for a beginner.

--
Jens Axel Søgaard

_________________________________________________
For list-related administrative tasks:
http://list.cs.brown.edu/mailman/listinfo/plt-scheme
</POST>
</TEXT>
</BODY>
</DOC>
