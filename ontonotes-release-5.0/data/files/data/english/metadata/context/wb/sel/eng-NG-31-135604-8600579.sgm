<DOC>
<DOCID> eng-NG-31-135604-8600579 </DOCID>
<DOCTYPE SOURCE="usenet"> USENET TEXT </DOCTYPE>
<DATETIME> 2007-08-23T14:27:00 </DATETIME>
<BODY>
<HEADLINE>
Principle Componets Analysis
</HEADLINE>
<TEXT>
<POST>
<POSTER> David Fanning &lt;da...@dfanning.com&gt; </POSTER>
<POSTDATE> 2007-08-23T14:27:00 </POSTDATE>
Folks,

Is it just me, or is this turning into an ENVI forum...

I have three bands of a Landsat image. They come in
three separate files (GEOTIFF). I have opened all three
in ENVI. I wish to perform a principle components analysis
of these three images, and capture the first principle
component for further analysis.

ENVI seems to want to have these three images in the
same file or something. In any case, I can't work out
how to get these three images into the PC apparatus.
Perhaps if I could make a new ENVI image of these three
bands? What if I wanted to do the analysis with four image
bands?

Any help appreciated.

Thanks,

David
--
David Fanning, Ph.D.
Fanning Software Consulting, Inc.
Coyote's Guide to IDL Programming: http://www.dfanning.com/
</POST>
<POST>
<POSTER> &quot;Jeff N.&quot; &lt;jnett...@utk.edu&gt; </POSTER>
<POSTDATE> 2007-08-23T15:32:00 </POSTDATE>
On Aug 23, 2:27 pm, David Fanning &lt;da ... @dfanning.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Folks,

&gt; Is it just me, or is this turning into an ENVI forum...

&gt; I have three bands of a Landsat image. They come in
&gt; three separate files (GEOTIFF). I have opened all three
&gt; in ENVI. I wish to perform a principle components analysis
&gt; of these three images, and capture the first principle
&gt; component for further analysis.

&gt; ENVI seems to want to have these three images in the
&gt; same file or something. In any case, I can't work out
&gt; how to get these three images into the PC apparatus.
&gt; Perhaps if I could make a new ENVI image of these three
&gt; bands? What if I wanted to do the analysis with four image
&gt; bands?

&gt; Any help appreciated.

&gt; Thanks,

&gt; David
&gt; --
&gt; David Fanning, Ph.D.
&gt; Fanning Software Consulting, Inc.
&gt; Coyote's Guide to IDL Programming: http://www.dfanning.com/
">

David,

You can easily combine different images into a single cube in ENVI.
Just go to File -&gt; Save File As -&gt; Envi Standard.  Note that this
&quot;File&quot; menu is in the main ENVI menu, not the file menu for a display
window.  You can do it for any number of bands, even different
combinations of bands in different images,  and once you combine them
the PCA should work just fine.

Jeff
</POST>
<POST>
<POSTER> David Fanning &lt;da...@dfanning.com&gt; </POSTER>
<POSTDATE> 2007-08-23T15:49:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Jeff N. writes:
&gt; You can easily combine different images into a single cube in ENVI.
&gt; Just go to File -&gt; Save File As -&gt; Envi Standard.  Note that this
&gt; &quot;File&quot; menu is in the main ENVI menu, not the file menu for a display
&gt; window.  You can do it for any number of bands, even different
&gt; combinations of bands in different images,  and once you combine them
&gt; the PCA should work just fine.
">

Ah, fabulous. Piece of cake!

In case anyone is interested, here is a reference to a
FABULOUS explanation of priciple components analysis.
After reading it, I was convinced I could do PCA in IDL
if I couldn't get the darn ENVI stuff to work. But, in
the end, it was easier to let ENVI do the heavy lifting.

http://tinyurl.com/3aaeb6

Cheers,

David

--
David Fanning, Ph.D.
Fanning Software Consulting, Inc.
Coyote's Guide to IDL Programming: http://www.dfanning.com/
</POST>
<POST>
<POSTER> &quot;Jeff N.&quot; &lt;jnett...@utk.edu&gt; </POSTER>
<POSTDATE> 2007-08-23T16:04:00 </POSTDATE>
On Aug 23, 3:49 pm, David Fanning &lt;da ... @dfanning.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Jeff N. writes:
&gt; &gt; You can easily combine different images into a single cube in ENVI.
&gt; &gt; Just go to File -&gt; Save File As -&gt; Envi Standard.  Note that this
&gt; &gt; &quot;File&quot; menu is in the main ENVI menu, not the file menu for a display
&gt; &gt; window.  You can do it for any number of bands, even different
&gt; &gt; combinations of bands in different images,  and once you combine them
&gt; &gt; the PCA should work just fine.

&gt; Ah, fabulous. Piece of cake!

&gt; In case anyone is interested, here is a reference to a
&gt; FABULOUS explanation of priciple components analysis.
&gt; After reading it, I was convinced I could do PCA in IDL
&gt; if I couldn't get the darn ENVI stuff to work. But, in
&gt; the end, it was easier to let ENVI do the heavy lifting.

&gt; http://tinyurl.com/3aaeb6

&gt; Cheers,

&gt; David

&gt; --
&gt; David Fanning, Ph.D.
&gt; Fanning Software Consulting, Inc.
&gt; Coyote's Guide to IDL Programming: http://www.dfanning.com/
">

I've gone through that tutorial many times myself, almost as much as
the histogram tutorial! :)

Jeff
</POST>
<POST>
<POSTER> &quot;Jeff N.&quot; &lt;jnett...@utk.edu&gt; </POSTER>
<POSTDATE> 2007-08-23T17:32:00 </POSTDATE>
On Aug 23, 3:49 pm, David Fanning &lt;da ... @dfanning.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Jeff N. writes:
&gt; &gt; You can easily combine different images into a single cube in ENVI.
&gt; &gt; Just go to File -&gt; Save File As -&gt; Envi Standard.  Note that this
&gt; &gt; &quot;File&quot; menu is in the main ENVI menu, not the file menu for a display
&gt; &gt; window.  You can do it for any number of bands, even different
&gt; &gt; combinations of bands in different images,  and once you combine them
&gt; &gt; the PCA should work just fine.

&gt; Ah, fabulous. Piece of cake!

&gt; In case anyone is interested, here is a reference to a
&gt; FABULOUS explanation of priciple components analysis.
&gt; After reading it, I was convinced I could do PCA in IDL
&gt; if I couldn't get the darn ENVI stuff to work. But, in
&gt; the end, it was easier to let ENVI do the heavy lifting.

&gt; http://tinyurl.com/3aaeb6

&gt; Cheers,

&gt; David

&gt; --
&gt; David Fanning, Ph.D.
&gt; Fanning Software Consulting, Inc.
&gt; Coyote's Guide to IDL Programming: http://www.dfanning.com/
">

Now that I think about it, I remember trying a while back going
through that tutorial and trying to get the same answer using
PCOMP....but never could.  Has anyone else tried this? Did you get
good agreement?

Jeff
</POST>
<POST>
<POSTER> kBob &lt;KRD...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-08-23T22:42:00 </POSTDATE>
I find the book Image Analysis, Classification and Change Detection
in Remote Sensing, with Algorothms for ENIV/IDL by Morton Canty handy.
He provides ENVI/IDL code to do the PCAs.

Kelly Dean
Fort Collins, Colorado

On Aug 23, 12:27 pm, David Fanning &lt;da ... @dfanning.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Folks,

&gt; Is it just me, or is this turning into an ENVI forum...

&gt; I have three bands of a Landsat image. They come in
&gt; three separate files (GEOTIFF). I have opened all three
&gt; in ENVI. I wish to perform a principle components analysis
&gt; of these three images, and capture the first principle
&gt; component for further analysis.

&gt; ENVI seems to want to have these three images in the
&gt; same file or something. In any case, I can't work out
&gt; how to get these three images into the PC apparatus.
&gt; Perhaps if I could make a new ENVI image of these three
&gt; bands? What if I wanted to do the analysis with four image
&gt; bands?

&gt; Any help appreciated.

&gt; Thanks,

&gt; David
&gt; --
&gt; David Fanning, Ph.D.
&gt; Fanning Software Consulting, Inc.
&gt; Coyote's Guide to IDL Programming: http://www.dfanning.com/
">
</POST>
<POST>
<POSTER> David Fanning &lt;n...@dfanning.com&gt; </POSTER>
<POSTDATE> 2007-08-23T22:59:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
kBob writes:
&gt;  I find the book Image Analysis, Classification and Change Detection
&gt; in Remote Sensing, with Algorothms for ENIV/IDL by Morton Canty handy.
&gt; He provides ENVI/IDL code to do the PCAs.
">

Well, I'm ashamed to say, I had read part's of Mort's book
earlier in the week and found I needed, well, more remedial
help. Quite frankly, I didn't understand a word of it. :-(

The Lindsay Smith tutorial, on the other hand, was crystal
clear. So much so that I came back to my office and wrote up
the example in IDL, just to see if I could follow it.

It turns out, that the PCOMP function in IDL gives essentially
the same answer as the tutorial (this for Jeff's benefit), but
the values are scaled slightly differently. However they
plot on exactly the same line in the end. Here is the code
I used.

; Method according to the Lindsay Smith tutorial:
; http://tinyurl.com/3aaeb

x = [2.5, 0.5, 2.2, 1.9, 3.1, 2.3, 2.0, 1.0, 1.5, 1.1]
y = [2.4, 0.7, 2.9, 2.2, 3.0, 2.7, 1.6, 1.1, 1.6, 0.9]

xmean = x - Mean(x)
ymean = y - Mean(y)
Window, XSIZE=600, YSIZE=800
!P.MULTI=[0,1,2]
Plot, xmean, ymean, PSYM=7

dataAdjust = Transpose([ [xmean], [ymean] ])
covArray = Correlate(dataAdjust, /COVARIANCE, /DOUBLE)
eigenvalues = EIGENQL(covArray, EIGENVECTORS=eigenvectors, /DOUBLE)

Print, 'EIGENVALUES: ', eigenvalues
Print, 'EIGENVECTORS: '
Print, eigenvectors

rowFeatureVector = eigenvectors[0,*] ; Take first principle component.
;rowFeatureVector = eigenvectors
finalData = Transpose(rowFeatureVector) ## Transpose(dataAdjust)
Plot, finaldata+Mean(x), finaldata+mean(y), PSYM=7
!P.MULTI=0

; Method using PCOMP in IDL library.
data = Transpose([[x],[y]])
r = PCOMP(data, /COVARIANCE, NVARIABLES=1, EIGENVALUES=ev, /STANDARDIZE)
Print, 'IDL EIGENVALUES: ', ev

; Compare methods.
Window, 1
PLOT, r
OPLOT, finalData, LINESTYLE=2

Window, 2
PLOT, r + Mean(x), r + Mean(y), PSYM=2
OPLOT, finalData + Mean(x), finalData + Mean(y), PSYM=7
END

This is really nice stuff and has me EXTREMELY jazzed about
the potential of it. :-)

Cheers,

David
--
David Fanning, Ph.D.
Fanning Software Consulting, Inc.
Coyote's Guide to IDL Programming: http://www.dfanning.com/
Sepore ma de ni thui. (&quot;Perhaps thou speakest truth.&quot;)
</POST>
<POST>
<POSTER> Ben Panter &lt;m...@privacy.net&gt; </POSTER>
<POSTDATE> 2007-08-24T06:06:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
David Fanning wrote:
&gt; ; Method according to the Lindsay Smith tutorial:
&gt; ; http://tinyurl.com/3aaeb
">

US Senate Roll Call Votes 107th Congress?

I think you're missing the 6:

http://tinyurl.com/3aaeb6

cheers,

Ben

--
Ben Panter, Edinburgh, UK.
Email false, http://www.benpanter.co.uk
or you could try ben at ^^^^^^^^^^^^^^^
</POST>
<POST>
<POSTER> Yaswant Pradhan &lt;Yaswant.Prad...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-08-24T06:21:00 </POSTDATE>
On Aug 24, 3:59 am, David Fanning &lt;n ... @dfanning.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; kBob writes:
&gt; &gt;  I find the book Image Analysis, Classification and Change Detection
&gt; &gt; in Remote Sensing, with Algorothms for ENIV/IDL by Morton Canty handy.
&gt; &gt; He provides ENVI/IDL code to do the PCAs.

&gt; Well, I'm ashamed to say, I had read part's of Mort's book
&gt; earlier in the week and found I needed, well, more remedial
&gt; help. Quite frankly, I didn't understand a word of it. :-(

&gt; The Lindsay Smith tutorial, on the other hand, was crystal
&gt; clear. So much so that I came back to my office and wrote up
&gt; the example in IDL, just to see if I could follow it.

&gt; It turns out, that the PCOMP function in IDL gives essentially
&gt; the same answer as the tutorial (this for Jeff's benefit), but
&gt; the values are scaled slightly differently. However they
&gt; plot on exactly the same line in the end. Here is the code
&gt; I used.

&gt; ; Method according to the Lindsay Smith tutorial:
&gt; ; http://tinyurl.com/3aaeb

&gt; x = [2.5, 0.5, 2.2, 1.9, 3.1, 2.3, 2.0, 1.0, 1.5, 1.1]
&gt; y = [2.4, 0.7, 2.9, 2.2, 3.0, 2.7, 1.6, 1.1, 1.6, 0.9]

&gt; xmean = x - Mean(x)
&gt; ymean = y - Mean(y)
&gt; Window, XSIZE=600, YSIZE=800
&gt; !P.MULTI=[0,1,2]
&gt; Plot, xmean, ymean, PSYM=7

&gt; dataAdjust = Transpose([ [xmean], [ymean] ])
&gt; covArray = Correlate(dataAdjust, /COVARIANCE, /DOUBLE)
&gt; eigenvalues = EIGENQL(covArray, EIGENVECTORS=eigenvectors, /DOUBLE)

&gt; Print, 'EIGENVALUES: ', eigenvalues
&gt; Print, 'EIGENVECTORS: '
&gt; Print, eigenvectors

&gt; rowFeatureVector = eigenvectors[0,*] ; Take first principle component.
&gt; ;rowFeatureVector = eigenvectors
&gt; finalData = Transpose(rowFeatureVector) ## Transpose(dataAdjust)
&gt; Plot, finaldata+Mean(x), finaldata+mean(y), PSYM=7
&gt; !P.MULTI=0

&gt; ; Method using PCOMP in IDL library.
&gt; data = Transpose([[x],[y]])
&gt; r = PCOMP(data, /COVARIANCE, NVARIABLES=1, EIGENVALUES=ev, /STANDARDIZE)
&gt; Print, 'IDL EIGENVALUES: ', ev

&gt; ; Compare methods.
&gt; Window, 1
&gt; PLOT, r
&gt; OPLOT, finalData, LINESTYLE=2

&gt; Window, 2
&gt; PLOT, r + Mean(x), r + Mean(y), PSYM=2
&gt; OPLOT, finalData + Mean(x), finalData + Mean(y), PSYM=7
&gt; END

&gt; This is really nice stuff and has me EXTREMELY jazzed about
&gt; the potential of it. :-)

&gt; Cheers,

&gt; David
&gt; --
&gt; David Fanning, Ph.D.
&gt; Fanning Software Consulting, Inc.
&gt; Coyote's Guide to IDL Programming: http://www.dfanning.com/
&gt; Sepore ma de ni thui. (&quot;Perhaps thou speakest truth.&quot;)
">

Hi David,
Yes, both methods are essentially same except that the data in
Method#1 are NOT standardised. You will get exactly same result if you
do
xmean = (x - Mean(x) / Stddev(x)
ymean = (y - Mean(y) / STddev(y)

--yas
</POST>
<POST>
<POSTER> Yaswant Pradhan &lt;Yaswant.Prad...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-08-24T06:24:00 </POSTDATE>
On Aug 24, 11:21 am, Yaswant Pradhan &lt;Yaswant.Prad ... @gmail.com&gt;
wrote:

<QUOTE PREVIOUSPOST="
&gt; On Aug 24, 3:59 am, David Fanning &lt;n ... @dfanning.com&gt; wrote:

&gt; &gt; kBob writes:
&gt; &gt; &gt;  I find the book Image Analysis, Classification and Change Detection
&gt; &gt; &gt; in Remote Sensing, with Algorothms for ENIV/IDL by Morton Canty handy.
&gt; &gt; &gt; He provides ENVI/IDL code to do the PCAs.

&gt; &gt; Well, I'm ashamed to say, I had read part's of Mort's book
&gt; &gt; earlier in the week and found I needed, well, more remedial
&gt; &gt; help. Quite frankly, I didn't understand a word of it. :-(

&gt; &gt; The Lindsay Smith tutorial, on the other hand, was crystal
&gt; &gt; clear. So much so that I came back to my office and wrote up
&gt; &gt; the example in IDL, just to see if I could follow it.

&gt; &gt; It turns out, that the PCOMP function in IDL gives essentially
&gt; &gt; the same answer as the tutorial (this for Jeff's benefit), but
&gt; &gt; the values are scaled slightly differently. However they
&gt; &gt; plot on exactly the same line in the end. Here is the code
&gt; &gt; I used.

&gt; &gt; ; Method according to the Lindsay Smith tutorial:
&gt; &gt; ; http://tinyurl.com/3aaeb

&gt; &gt; x = [2.5, 0.5, 2.2, 1.9, 3.1, 2.3, 2.0, 1.0, 1.5, 1.1]
&gt; &gt; y = [2.4, 0.7, 2.9, 2.2, 3.0, 2.7, 1.6, 1.1, 1.6, 0.9]

&gt; &gt; xmean = x - Mean(x)
&gt; &gt; ymean = y - Mean(y)
&gt; &gt; Window, XSIZE=600, YSIZE=800
&gt; &gt; !P.MULTI=[0,1,2]
&gt; &gt; Plot, xmean, ymean, PSYM=7

&gt; &gt; dataAdjust = Transpose([ [xmean], [ymean] ])
&gt; &gt; covArray = Correlate(dataAdjust, /COVARIANCE, /DOUBLE)
&gt; &gt; eigenvalues = EIGENQL(covArray, EIGENVECTORS=eigenvectors, /DOUBLE)

&gt; &gt; Print, 'EIGENVALUES: ', eigenvalues
&gt; &gt; Print, 'EIGENVECTORS: '
&gt; &gt; Print, eigenvectors

&gt; &gt; rowFeatureVector = eigenvectors[0,*] ; Take first principle component.
&gt; &gt; ;rowFeatureVector = eigenvectors
&gt; &gt; finalData = Transpose(rowFeatureVector) ## Transpose(dataAdjust)
&gt; &gt; Plot, finaldata+Mean(x), finaldata+mean(y), PSYM=7
&gt; &gt; !P.MULTI=0

&gt; &gt; ; Method using PCOMP in IDL library.
&gt; &gt; data = Transpose([[x],[y]])
&gt; &gt; r = PCOMP(data, /COVARIANCE, NVARIABLES=1, EIGENVALUES=ev, /STANDARDIZE)
&gt; &gt; Print, 'IDL EIGENVALUES: ', ev

&gt; &gt; ; Compare methods.
&gt; &gt; Window, 1
&gt; &gt; PLOT, r
&gt; &gt; OPLOT, finalData, LINESTYLE=2

&gt; &gt; Window, 2
&gt; &gt; PLOT, r + Mean(x), r + Mean(y), PSYM=2
&gt; &gt; OPLOT, finalData + Mean(x), finalData + Mean(y), PSYM=7
&gt; &gt; END

&gt; &gt; This is really nice stuff and has me EXTREMELY jazzed about
&gt; &gt; the potential of it. :-)

&gt; &gt; Cheers,

&gt; &gt; David
&gt; &gt; --
&gt; &gt; David Fanning, Ph.D.
&gt; &gt; Fanning Software Consulting, Inc.
&gt; &gt; Coyote's Guide to IDL Programming: http://www.dfanning.com/
&gt; &gt; Sepore ma de ni thui. (&quot;Perhaps thou speakest truth.&quot;)

&gt; Hi David,
&gt; Yes, both methods are essentially same except that the data in
&gt; Method#1 are NOT standardised. You will get exactly same result if you
&gt; do
&gt; xmean = (x - Mean(x) / Stddev(x)
&gt; ymean = (y - Mean(y) / STddev(y)

&gt; --yas
">

whoops... missed a parenthesis, should read xmean = (x - Mean(x)) /
Stddev(x) and likewise.
</POST>
<POST>
<POSTER> mort canty &lt;m.ca...@fz-juelich.de&gt; </POSTER>
<POSTDATE> 2007-08-24T07:22:00 </POSTDATE>
David Fanning schrieb:

<QUOTE PREVIOUSPOST="
&gt; kBob writes:

&gt;&gt;  I find the book Image Analysis, Classification and Change Detection
&gt;&gt; in Remote Sensing, with Algorothms for ENIV/IDL by Morton Canty handy.
&gt;&gt; He provides ENVI/IDL code to do the PCAs.

&gt; Well, I'm ashamed to say, I had read part's of Mort's book
&gt; earlier in the week and found I needed, well, more remedial
&gt; help. Quite frankly, I didn't understand a word of it. :-(
">

Aw jeez, David, I understood *your* book :-)

Mort
</POST>
<POST>
<POSTER> David Fanning &lt;n...@dfanning.com&gt; </POSTER>
<POSTDATE> 2007-08-24T08:24:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
mort canty writes:
&gt; Aw jeez, David, I understood *your* book :-)
">

Well, you know, once the light goes on, a LOT of
things start to make sense. I'm going to re-visit it. :-)

Cheers,

David
--
David Fanning, Ph.D.
Fanning Software Consulting, Inc.
Coyote's Guide to IDL Programming: http://www.dfanning.com/
Sepore ma de ni thui. (&quot;Perhaps thou speakest truth.&quot;)
</POST>
<POST>
<POSTER> David Fanning &lt;da...@dfanning.com&gt; </POSTER>
<POSTDATE> 2007-08-24T11:46:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Yaswant Pradhan writes:
&gt; Yes, both methods are essentially same except that the data in
&gt; Method#1 are NOT standardised. You will get exactly same result if you
&gt; do
&gt; xmean = (x - Mean(x) / Stddev(x)
&gt; ymean = (y - Mean(y) / STddev(y)
">

Well, not exactly. Did you run the example with this change?
I get something quite a bit different, although still &quot;correct&quot;
I think.

;**************************************************************
; Method according to the Lindsay Smith tutorial:
; http://tinyurl.com/3aaeb6

x = [2.5, 0.5, 2.2, 1.9, 3.1, 2.3, 2.0, 1.0, 1.5, 1.1]
y = [2.4, 0.7, 2.9, 2.2, 3.0, 2.7, 1.6, 1.1, 1.6, 0.9]

xmean = (x - Mean(x)) / STDDEV(x, /DOUBLE)
ymean = (y - Mean(y)) / STDDEV(y, /DOUBLE)
Window, XSIZE=600, YSIZE=800
!P.MULTI=[0,1,2]
Plot, xmean, ymean, PSYM=7

dataAdjust = Transpose([ [xmean], [ymean] ])
covArray = Correlate(dataAdjust, /COVARIANCE, /DOUBLE)
eigenvalues = EIGENQL(covArray, EIGENVECTORS=eigenvectors, /DOUBLE)

Print, 'EIGENVALUES: ', eigenvalues
Print, 'EIGENVECTORS: '
Print, eigenvectors

rowFeatureVector = eigenvectors[0,*] ; Take first principle component.
;rowFeatureVector = eigenvectors
finalData = Transpose(rowFeatureVector) ## Transpose(dataAdjust)
Plot, finaldata+Mean(x), finaldata+mean(y), PSYM=7
!P.MULTI=0

; Method using PCOMP in IDL library.
data = Transpose([[x],[y]])
r = PCOMP(data, /COVARIANCE, NVARIABLES=1, $
EIGENVALUES=ev, /STANDARDIZE)
Print, 'IDL EIGENVALUES: ', ev

; Compare methods.
Window, 1
PLOT, r
OPLOT, finalData, LINESTYLE=2;, COLOR=FSC_Color('yellow')

Window, 2
PLOT, r + Mean(x), r + Mean(y), PSYM=2
OPLOT, finalData + Mean(x), finalData + Mean(y), $
PSYM=7;, COLOR=FSC_Color('yellow')
END
;**************************************************************

The curves in Window 1 are worse than they were without
making the change you suggest.

Cheers,

David

--
David Fanning, Ph.D.
Fanning Software Consulting, Inc.
Coyote's Guide to IDL Programming: http://www.dfanning.com/
</POST>
<POST>
<POSTER> David Fanning &lt;da...@dfanning.com&gt; </POSTER>
<POSTDATE> 2007-08-24T11:53:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
David Fanning writes:
&gt; mort canty writes:

&gt; &gt; Aw jeez, David, I understood *your* book :-)

&gt; Well, you know, once the light goes on, a LOT of
&gt; things start to make sense. I'm going to re-visit it. :-)
">

Well, I had another look at that PCA section this morning.
I'm pretty sure I must have gotten hold of the German version
of the book. :-(

Cheers,

David
--
David Fanning, Ph.D.
Fanning Software Consulting, Inc.
Coyote's Guide to IDL Programming: http://www.dfanning.com/
</POST>
<POST>
<POSTER> David Streutker &lt;dstreut...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-08-24T12:44:00 </POSTDATE>
For a reason I haven't quite figured out, the results of PCOMP and the
ENVI results differ by a factor of the square root of the eigenvalue
for the corresponding band.

This works for me:

x = [2.5, 0.5, 2.2, 1.9, 3.1, 2.3, 2.0, 1.0, 1.5, 1.1]
y = [2.4, 0.7, 2.9, 2.2, 3.0, 2.7, 1.6, 1.1, 1.6, 0.9]

;xmean = x - Mean(x)
;ymean = y - Mean(y)
Window, XSIZE=600, YSIZE=800
!P.MULTI=[0,1,2]
Plot, xmean, ymean, PSYM=7

;dataAdjust = Transpose([ [xmean], [ymean] ])
dataAdjust = Transpose([ [x], [y] ])
covArray = Correlate(dataAdjust, /COVARIANCE, /DOUBLE)
eigenvalues = EIGENQL(covArray, EIGENVECTORS=eigenvectors, /DOUBLE)

Print, 'EIGENVALUES: ', eigenvalues
Print, 'EIGENVECTORS: '
Print, eigenvectors

rowFeatureVector = eigenvectors[0,*] ; Take first principle component.
;rowFeatureVector = eigenvectors
finalData = Transpose(rowFeatureVector) ## Transpose(dataAdjust)
Plot, finaldata+Mean(x), finaldata+mean(y), PSYM=7
!P.MULTI=0

; Method using PCOMP in IDL library.
data = Transpose([[x],[y]])
;r = PCOMP(data, /COVARIANCE, NVARIABLES=1, EIGENVALUES=ev, /
STANDARDIZE)
r = PCOMP(data, /COVARIANCE, EIGENVALUES=ev)
Print, 'IDL EIGENVALUES: ', ev

; Compare methods.
Window, 1
;PLOT, r
PLOT, r[0,*] / sqrt(ev[0])
OPLOT, finalData, LINESTYLE=2

Window, 2
PLOT, r[0,*] / sqrt(ev[0]) + Mean(x), r[0,*] / sqrt(ev[0]) + Mean(y),
PSYM=2
;PLOT, r + Mean(x), r + Mean(y), PSYM=2
OPLOT, finalData + Mean(x), finalData + Mean(y), PSYM=7
END
</POST>
<POST>
<POSTER> David Streutker &lt;dstreut...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-08-24T12:50:00 </POSTDATE>
On Aug 24, 10:44 am, David Streutker &lt;dstreut ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; For a reason I haven't quite figured out, the results of PCOMP and the
&gt; ENVI results differ by a factor of the square root of the eigenvalue
&gt; for the corresponding band.

&gt; This works for me:

&gt; x = [2.5, 0.5, 2.2, 1.9, 3.1, 2.3, 2.0, 1.0, 1.5, 1.1]
&gt; y = [2.4, 0.7, 2.9, 2.2, 3.0, 2.7, 1.6, 1.1, 1.6, 0.9]

&gt; ;xmean = x - Mean(x)
&gt; ;ymean = y - Mean(y)
&gt; Window, XSIZE=600, YSIZE=800
&gt; !P.MULTI=[0,1,2]
&gt; Plot, xmean, ymean, PSYM=7

&gt; ;dataAdjust = Transpose([ [xmean], [ymean] ])
&gt; dataAdjust = Transpose([ [x], [y] ])
&gt; covArray = Correlate(dataAdjust, /COVARIANCE, /DOUBLE)
&gt; eigenvalues = EIGENQL(covArray, EIGENVECTORS=eigenvectors, /DOUBLE)

&gt; Print, 'EIGENVALUES: ', eigenvalues
&gt; Print, 'EIGENVECTORS: '
&gt; Print, eigenvectors

&gt; rowFeatureVector = eigenvectors[0,*] ; Take first principle component.
&gt; ;rowFeatureVector = eigenvectors
&gt; finalData = Transpose(rowFeatureVector) ## Transpose(dataAdjust)
&gt; Plot, finaldata+Mean(x), finaldata+mean(y), PSYM=7
&gt; !P.MULTI=0

&gt; ; Method using PCOMP in IDL library.
&gt; data = Transpose([[x],[y]])
&gt; ;r = PCOMP(data, /COVARIANCE, NVARIABLES=1, EIGENVALUES=ev, /
&gt; STANDARDIZE)
&gt; r = PCOMP(data, /COVARIANCE, EIGENVALUES=ev)
&gt; Print, 'IDL EIGENVALUES: ', ev

&gt; ; Compare methods.
&gt; Window, 1
&gt; ;PLOT, r
&gt; PLOT, r[0,*] / sqrt(ev[0])
&gt; OPLOT, finalData, LINESTYLE=2

&gt; Window, 2
&gt; PLOT, r[0,*] / sqrt(ev[0]) + Mean(x), r[0,*] / sqrt(ev[0]) + Mean(y),
&gt; PSYM=2
&gt; ;PLOT, r + Mean(x), r + Mean(y), PSYM=2
&gt; OPLOT, finalData + Mean(x), finalData + Mean(y), PSYM=7
&gt; END
">

And by &quot;ENVI results&quot;, I mean of course the the IDL programmatic (non-
PCOMP) method, which are equivalent.  (Sorry, I've got ENVI on the
brain this morning.)
</POST>
<POST>
<POSTER> Yaswant Pradhan &lt;Yaswant.Prad...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-08-24T13:30:00 </POSTDATE>
On Aug 24, 4:46 pm, David Fanning &lt;da ... @dfanning.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Yaswant Pradhan writes:
&gt; &gt; Yes, both methods are essentially same except that the data in
&gt; &gt; Method#1 are NOT standardised. You will get exactly same result if you
&gt; &gt; do
&gt; &gt; xmean = (x - Mean(x) / Stddev(x)
&gt; &gt; ymean = (y - Mean(y) / STddev(y)

&gt; Well, not exactly. Did you run the example with this change?
&gt; I get something quite a bit different, although still &quot;correct&quot;
&gt; I think.

&gt; ;**************************************************************
&gt; ; Method according to the Lindsay Smith tutorial:
&gt; ; http://tinyurl.com/3aaeb6

&gt; x = [2.5, 0.5, 2.2, 1.9, 3.1, 2.3, 2.0, 1.0, 1.5, 1.1]
&gt; y = [2.4, 0.7, 2.9, 2.2, 3.0, 2.7, 1.6, 1.1, 1.6, 0.9]

&gt; xmean = (x - Mean(x)) / STDDEV(x, /DOUBLE)
&gt; ymean = (y - Mean(y)) / STDDEV(y, /DOUBLE)
&gt; Window, XSIZE=600, YSIZE=800
&gt; !P.MULTI=[0,1,2]
&gt; Plot, xmean, ymean, PSYM=7

&gt; dataAdjust = Transpose([ [xmean], [ymean] ])
&gt; covArray = Correlate(dataAdjust, /COVARIANCE, /DOUBLE)
&gt; eigenvalues = EIGENQL(covArray, EIGENVECTORS=eigenvectors, /DOUBLE)

&gt; Print, 'EIGENVALUES: ', eigenvalues
&gt; Print, 'EIGENVECTORS: '
&gt; Print, eigenvectors

&gt; rowFeatureVector = eigenvectors[0,*] ; Take first principle component.
&gt; ;rowFeatureVector = eigenvectors
&gt; finalData = Transpose(rowFeatureVector) ## Transpose(dataAdjust)
&gt; Plot, finaldata+Mean(x), finaldata+mean(y), PSYM=7
&gt; !P.MULTI=0

&gt; ; Method using PCOMP in IDL library.
&gt; data = Transpose([[x],[y]])
&gt; r = PCOMP(data, /COVARIANCE, NVARIABLES=1, $
&gt;    EIGENVALUES=ev, /STANDARDIZE)
&gt; Print, 'IDL EIGENVALUES: ', ev

&gt; ; Compare methods.
&gt; Window, 1
&gt; PLOT, r
&gt; OPLOT, finalData, LINESTYLE=2;, COLOR=FSC_Color('yellow')

&gt; Window, 2
&gt; PLOT, r + Mean(x), r + Mean(y), PSYM=2
&gt; OPLOT, finalData + Mean(x), finalData + Mean(y), $
&gt;    PSYM=7;, COLOR=FSC_Color('yellow')
&gt; END
&gt; ;**************************************************************

&gt; The curves in Window 1 are worse than they were without
&gt; making the change you suggest.

&gt; Cheers,

&gt; David

&gt; --
&gt; David Fanning, Ph.D.
&gt; Fanning Software Consulting, Inc.
&gt; Coyote's Guide to IDL Programming: http://www.dfanning.com/
">

Not exactly, what I was looking at in your code is whether you get the
same eigenvalues/vecors or not.  I've changed the code slightly for
dimension compatibility.  What I would look at to compare both methods
is - (i) eigenvalues (maginitude), (ii) sign (direction) of the
components.

x = [2.5, 0.5, 2.2, 1.9, 3.1, 2.3, 2.0, 1.0, 1.5, 1.1]
y = [2.4, 0.7, 2.9, 2.2, 3.0, 2.7, 1.6, 1.1, 1.6, 0.9]

xmean = (x - Mean(x)) / STDDEV(x, /DOUBLE)
ymean = (y - Mean(y)) / STDDEV(y, /DOUBLE)
;Window, XSIZE=600, YSIZE=800
;!P.MULTI=[0,1,2]
;Plot, xmean, ymean, PSYM=7

dataAdjust = Transpose([ [xmean], [ymean] ])
;dataAdjust = ([ [xmean], [ymean] ])
covArray = Correlate(dataAdjust, /COVARIANCE, /DOUBLE)
eigenvalues = EIGENQL(covArray, EIGENVECTORS=eigenvectors, /DOUBLE)

Print, 'EIGENVALUES: ', eigenvalues
Print, 'EIGENVECTORS: '
Print, eigenvectors

;rowFeatureVector = eigenvectors[0,*] ; Take first principle
component.
rowFeatureVector = transpose(eigenvectors)
finalData = (dataAdjust) ## (rowFeatureVector)
;Plot, finaldata+Mean(x), finaldata+mean(y), PSYM=7
;!P.MULTI=0

; Method using PCOMP in IDL library.
data = Transpose([[x],[y]])
r = PCOMP(data, /COVARIANCE, EIGENVALUES=ev, /STANDARDIZE, /DOUBLE);,
NVARIABLES=1)
Print, 'IDL EIGENVALUES: ', ev

; Compare methods.
Window, 1, title='1st component'
PLOT, r[0,*]
OPLOT, finalData[0,*], LINESTYLE=2;, COLOR=FSC_Color('yellow')
OPLOT, [0,10],[0,0]

Window, 2, title='2nd component'
PLOT, finalData[1,*], LINESTYLE=2;, COLOR=FSC_Color('yellow')
OPLOT, r[1,*]
OPLOT, [0,10],[0,0]
</POST>
<POST>
<POSTER> Mort Canty &lt;m.ca...@fz-juelich.de&gt; </POSTER>
<POSTDATE> 2007-08-25T06:14:00 </POSTDATE>
David Fanning schrieb:

<QUOTE PREVIOUSPOST="
&gt; David Fanning writes:

&gt;&gt; mort canty writes:

&gt;&gt;&gt; Aw jeez, David, I understood *your* book :-)
&gt;&gt; Well, you know, once the light goes on, a LOT of
&gt;&gt; things start to make sense. I'm going to re-visit it. :-)

&gt; Well, I had another look at that PCA section this morning.
&gt; I'm pretty sure I must have gotten hold of the German version
&gt; of the book. :-(

&gt; Cheers,

&gt; David
">

Ah well. But do remember, it's a textbook. You won't follow the notation
in Chapter 3 without slogging through Chapters 1 and 2 first. Anyway,
please don't review it for Amazon :-)

Mort
</POST>
<POST>
<POSTER> David Fanning &lt;n...@dfanning.com&gt; </POSTER>
<POSTDATE> 2007-09-03T20:33:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
David Fanning writes:
&gt; Well, I'm ashamed to say, I had read part's of Mort's book
&gt; earlier in the week and found I needed, well, more remedial
&gt; help. Quite frankly, I didn't understand a word of it. :-(

&gt; The Lindsay Smith tutorial, on the other hand, was crystal
&gt; clear ( http://tinyurl.com/3aaeb6 ). So much so that I came
&gt; back to my office and wrote up  the example in IDL, just
&gt; to see if I could follow it.
">

Well, I'm back, this time with a spelling of &quot;principal&quot;
that might even make this discussion of Principal Components
Analysis (PCA) available to people who can spell correctly
on Google searches. (And I have bookmarked the difference
between &quot;principle&quot; as a fundamental truth or law, and
&quot;principal&quot; as the first in rank, in my dictionary. How
you get to be my age without knowing this is beyond me.)

I've been pretty much obsessed with PCA for the past couple
of weeks. For one thing, I felt badly about telling Mort
I couldn't understand a word of his excellent book. (It
does grow on you when you finally find yourself up to
speed again on some of the mathematical notations.)

Anyhow, I've wanted to understand this. Probably for the
same reason I've been studying Spanish so diligently
lately: it just seems like it might come in handy some
day. Does anyone know if they use PCA in Costa Rica?

PCA *is* fairly straightforward. At least after you
understand it, it is. Getting there is something else.
I suspect there are more of you out there like me who
would appreciate a--shall we say--less mathematical
approach to the subject.

I found MUCH became clear after reading the above
mentioned Lindsay Smith tutorial:

http://tinyurl.com/3aaeb6

But there were still a few unresolved problems for me.
One of these was why there are two ways to do PCA in
IDL, and why you don't get the same answer when you use
them. I discovered, eventually, that you DO get the same
answer, but this took me a whole lot longer to figure
out than it probably should have.

I also wanted to understand the use of PCA for images,
so I looked into that a little bit, too.

All this to say that I have written what I am calling
a PCA Tutorial, although that is probably a lofty title
for a piece of writing that is more like the blind leading
the blind. :-)

I would appreciate feedback on this from those of you
who know a lot more about it than I do. I tried to let
the Smith tutorial do the heavy theoretical lifting.
What I wanted to know was how to do this in IDL. So that
is the focus here. (I did find what I think is an error
in the Smith tutorial, for what it is worth.)

You can find the tutorial here:

http://www.dfanning.com/code_tips/pca.html

Any and all comments welcome.

Cheers,

David

--
David Fanning, Ph.D.
Fanning Software Consulting, Inc.
Coyote's Guide to IDL Programming: http://www.dfanning.com/
Sepore ma de ni thui. (&quot;Perhaps thou speakest truth.&quot;)
</POST>
<POST>
<POSTER> David Fanning &lt;n...@dfanning.com&gt; </POSTER>
<POSTDATE> 2007-09-03T21:06:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
David Fanning writes:
">

Principal &quot;Componets&quot; Analysis!? It's probably just as well
that no one is going to find that tutorial. :-(

Cheers,

David

--
David Fanning, Ph.D.
Fanning Software Consulting, Inc.
Coyote's Guide to IDL Programming: http://www.dfanning.com/
Sepore ma de ni thui. (&quot;Perhaps thou speakest truth.&quot;)
</POST>
<POST>
<POSTER> &quot;Jeff N.&quot; &lt;jnett...@utk.edu&gt; </POSTER>
<POSTDATE> 2007-09-04T12:02:00 </POSTDATE>
David,

I'm reading through the tutorial, and spotted something you might want
to fix in your discussion of CORRELATE.  It's not true that negative
values returned from that function are uncorrelated.  You actually
describe the reason why this is true in your tutorial:  &quot;a change in
one vector will predict an opposite change in the other.&quot;  if one
vector predicts a change in the other, it's correlated.  The negative
sign just means that the change is an opposite change, like you
mentioned.  How well two variables are correlated depends on the
magnitude of the number:  0 is not correlated, 1 is perfectly
correlated (so -1 is perfectly negatively correlated).

Jeff
</POST>
<POST>
<POSTER> David Fanning &lt;da...@dfanning.com&gt; </POSTER>
<POSTDATE> 2007-09-04T12:23:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Jeff N. writes:
&gt; I'm reading through the tutorial, and spotted something you might want
&gt; to fix in your discussion of CORRELATE.  It's not true that negative
&gt; values returned from that function are uncorrelated.  You actually
&gt; describe the reason why this is true in your tutorial:  &quot;a change in
&gt; one vector will predict an opposite change in the other.&quot;  if one
&gt; vector predicts a change in the other, it's correlated.  The negative
&gt; sign just means that the change is an opposite change, like you
&gt; mentioned.  How well two variables are correlated depends on the
&gt; magnitude of the number:  0 is not correlated, 1 is perfectly
&gt; correlated (so -1 is perfectly negatively correlated).
">

Oh, my goodness. I must have been asleep when I wrote that.
One of the problems with working at 3AM. :-(

Fixed now. Thanks.

Cheers,

David
--
David Fanning, Ph.D.
Fanning Software Consulting, Inc.
Coyote's Guide to IDL Programming: http://www.dfanning.com/
</POST>
<POST>
<POSTER> wlandsman &lt;wlands...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-05T10:45:00 </POSTDATE>
On Sep 3, 8:33 pm, David Fanning &lt;n ... @dfanning.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; You can find the tutorial here:

&gt; http://www.dfanning.com/code_tips/pca.html

&gt; Any and all comments welcome.
">

Well, a minor historical comment about the different PCA
conventions.   The pcomp.pro procedure was introduced into IDL in
1996, but prior to that Immanuel Freedman had written a procedure
pca.pro ( http://idlastro.gsfc.nasa.gov/ftp/pro/math/pca.pro ) based on
a FORTRAN program by Fionn Murtagh.

When pcomp.pro was introduced, it took me a long time to prove that
pca.pro and pcomp.pro gave the same results    Below are the notes I
wrote at the time:

*************************

The intrinsic IDL function PCOMP  duplicates most most of the
functionality of PCA, but uses different conventions and
normalizations.   Note the following:

(1) PCOMP requires a N_ATTRIB x N_OBJ input array; this is the
transpose of what PCA expects
(2) PCA uses standardized variables for the correlation matrix:  the
input  vectors are set to a  mean of zero and variance of one and
divided by  sqrt(n); use the /STANDARIZE keyword to PCOMP for a direct
comparison.
(3) PCA (unlike PCOMP) normalizes the eigenvectors by the square root
of the eigenvalues.
(4) PCA returns cumulative percentages; the VARIANCES keyword of PCOMP
returns the variance in each variable
(5) PCOMP divides the eigenvalues by (1/N_OBJ-1) when the covariance
matrix is used.

***********************

And, yes, I verified that pca.pro also reproduces the results in your
tutorial, but it requires even more adjustment than does pcomp.pro !
</POST>
</TEXT>
</BODY>
</DOC>
