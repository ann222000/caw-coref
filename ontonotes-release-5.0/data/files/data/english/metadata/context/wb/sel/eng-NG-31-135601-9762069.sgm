<DOC>
<DOCID> eng-NG-31-135601-9762069 </DOCID>
<DOCTYPE SOURCE="usenet"> USENET TEXT </DOCTYPE>
<DATETIME> 2007-10-29T08:06:00 </DATETIME>
<BODY>
<HEADLINE>
COBOL to Java conversion
</HEADLINE>
<TEXT>
<POST>
<POSTER> HansJ &lt;hji...@kup.de&gt; </POSTER>
<POSTDATE> 2007-10-29T08:06:00 </POSTDATE>
We are in the business of migrating Unisys COBOL mainframe
applications to Unix.
Using the same programming language and keeping the code intact is a
key element, because we think that there are enough issues to deal
with.
Recently we have seen requests to not only move to a different
platform, but also to change the language to be Java.
We don't need to discuss all the issues that come with a language
change, like maintainability, staff competence, etc. as this is a
different topic.
I would be interested in knowing if anyone has seen a successful
project of this type that has a significant size.
A significant size would be more than one million lines of COBOL code.

Thanks HansJ
</POST>
<POST>
<POSTER> &quot;HeyBub&quot; &lt;heybubNOS...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-10-29T11:22:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
HansJ wrote:
&gt; We are in the business of migrating Unisys COBOL mainframe
&gt; applications to Unix.
&gt; Using the same programming language and keeping the code intact is a
&gt; key element, because we think that there are enough issues to deal
&gt; with.
&gt; Recently we have seen requests to not only move to a different
&gt; platform, but also to change the language to be Java.
&gt; We don't need to discuss all the issues that come with a language
&gt; change, like maintainability, staff competence, etc. as this is a
&gt; different topic.
&gt; I would be interested in knowing if anyone has seen a successful
&gt; project of this type that has a significant size.
&gt; A significant size would be more than one million lines of COBOL code.

&gt; Thanks HansJ
">

To paraphrase Samuel Johnson,

&quot;COBOL to Java is like a dog raised up on its hinder legs. It is not
surprising that it does it poorly; what is surprising is that it would want
to do so at all.&quot;
</POST>
<POST>
<POSTER> HansJ &lt;hji...@kup.de&gt; </POSTER>
<POSTDATE> 2007-10-29T12:19:00 </POSTDATE>
On 29 Okt., 16:22, &quot;HeyBub&quot; &lt;heybubNOS ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; HansJ wrote:
&gt; &gt; We are in the business of migrating Unisys COBOL mainframe
&gt; &gt; applications to Unix.
&gt; &gt; Using the same programming language and keeping the code intact is a
&gt; &gt; key element, because we think that there are enough issues to deal
&gt; &gt; with.
&gt; &gt; Recently we have seen requests to not only move to a different
&gt; &gt; platform, but also to change the language to be Java.
&gt; &gt; We don't need to discuss all the issues that come with a language
&gt; &gt; change, like maintainability, staff competence, etc. as this is a
&gt; &gt; different topic.
&gt; &gt; I would be interested in knowing if anyone has seen a successful
&gt; &gt; project of this type that has a significant size.
&gt; &gt; A significant size would be more than one million lines of COBOL code.

&gt; &gt; Thanks HansJ

&gt; To paraphrase Samuel Johnson,

&gt; &quot;COBOL to Java is like a dog raised up on its hinder legs. It is not
&gt; surprising that it does it poorly; what is surprising is that it would want
&gt; to do so at all.&quot;
">

HeyBub,
I'm not saying that it is a good idea to even consider this, I'd like
to find out if there is anyone who can name a successfull project like
that.

Thanks HansJ
</POST>
<POST>
<POSTER> b...@cs.uofs.edu (Bill Gunshannon) </POSTER>
<POSTDATE> 2007-10-29T12:27:00 </POSTDATE>
In article &lt;1193674751.922948.92 ... @o80g2000hse.googlegroups.com&gt;,
HansJ &lt;hji ... @kup.de&gt; writes:

<QUOTE PREVIOUSPOST="
&gt; On 29 Okt., 16:22, &quot;HeyBub&quot; &lt;heybubNOS ... @gmail.com&gt; wrote:
&gt;&gt; HansJ wrote:
&gt;&gt; &gt; We are in the business of migrating Unisys COBOL mainframe
&gt;&gt; &gt; applications to Unix.
&gt;&gt; &gt; Using the same programming language and keeping the code intact is a
&gt;&gt; &gt; key element, because we think that there are enough issues to deal
&gt;&gt; &gt; with.
&gt;&gt; &gt; Recently we have seen requests to not only move to a different
&gt;&gt; &gt; platform, but also to change the language to be Java.
&gt;&gt; &gt; We don't need to discuss all the issues that come with a language
&gt;&gt; &gt; change, like maintainability, staff competence, etc. as this is a
&gt;&gt; &gt; different topic.
&gt;&gt; &gt; I would be interested in knowing if anyone has seen a successful
&gt;&gt; &gt; project of this type that has a significant size.
&gt;&gt; &gt; A significant size would be more than one million lines of COBOL code.

&gt;&gt; &gt; Thanks HansJ

&gt;&gt; To paraphrase Samuel Johnson,

&gt;&gt; &quot;COBOL to Java is like a dog raised up on its hinder legs. It is not
&gt;&gt; surprising that it does it poorly; what is surprising is that it would want
&gt;&gt; to do so at all.&quot;

&gt; HeyBub,
&gt; I'm not saying that it is a good idea to even consider this, I'd like
&gt; to find out if there is anyone who can name a successfull project like
&gt; that.
">

But, what would a successful project prove?  I know someone who successfully
put a Ford V8 engine in a 1979 Triumph Spitfire.  It was real impressive.
And basicly impossible to drive safely as it was way overpowered. (Not
to be construed as saying java is more powerful than COBOL, just an
example of a &quot;successful&quot; and yet worthless project.)

I have discussed this with some of the profeessors here as I am a
strong advocate of COBL and they have recently decided to not use
COBOL for any course projects any more.  You have already admited
that the concept is bound to cause problems. Now let's look at the
other side of the coin.  What would be gained by re-writting all
the COBOL in Java?  My guess would be nothing.  So, then why do
it?  Seems like a very simple Risk Assessment would be enough to
kill this idea.

Tschüß,

bill

--
Bill Gunshannon          |  de-moc-ra-cy (di mok' ra see) n.  Three wolves
b ... @cs.scranton.edu     |  and a sheep voting on what's for dinner.
University of Scranton   |
Scranton, Pennsylvania   |         #include &lt;std.disclaimer.h&gt;
</POST>
<POST>
<POSTER> &quot;Sergey Kashyrin&quot; &lt;s...@resqnet.com&gt; </POSTER>
<POSTDATE> 2007-10-29T15:15:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;HansJ&quot; &lt;hji ... @kup.de&gt; wrote in message
">

news:1193659579.442522.126090@o38g2000hse.googlegroups.com ...

<QUOTE PREVIOUSPOST="
&gt; We are in the business of migrating Unisys COBOL mainframe
&gt; applications to Unix.
&gt; Using the same programming language and keeping the code intact is a
&gt; key element, because we think that there are enough issues to deal
&gt; with.
&gt; Recently we have seen requests to not only move to a different
&gt; platform, but also to change the language to be Java.
&gt; We don't need to discuss all the issues that come with a language
&gt; change, like maintainability, staff competence, etc. as this is a
&gt; different topic.
&gt; I would be interested in knowing if anyone has seen a successful
&gt; project of this type that has a significant size.
&gt; A significant size would be more than one million lines of COBOL code.

&gt; Thanks HansJ
">

There are some automatic converters from Cobol to Java on the market (just
google them) but so far none of them producing 100% equivalent code, so you
have to rewrite a lot of things manually (some of the converters just
convert partially, some of them convert all COMP-3 and zoned arithmetics
into floating point...)

Your another option (if allowed) is to convert to C/C++ automatically (using
OpenCobol, for example).
The code will not look very friendly, but you will be able to recognize your
statements.
At least you will have a 100% working program, and than if you want you can
change it manually putting back the original variables names, making the
code more short and readable, etc. (and typically that's possible and not
very complicated).

Bad idea anyway. Good luck.
Sergey
</POST>
<POST>
<POSTER> Alistair &lt;alist...@ld50macca.demon.co.uk&gt; </POSTER>
<POSTDATE> 2007-10-29T17:54:00 </POSTDATE>
On 29 Oct, 15:22, &quot;HeyBub&quot; &lt;heybubNOS ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; HansJ wrote:
&gt; &gt; We are in the business of migrating Unisys COBOL mainframe
&gt; &gt; applications to Unix.
&gt; &gt; Using the same programming language and keeping the code intact is a
&gt; &gt; key element, because we think that there are enough issues to deal
&gt; &gt; with.
&gt; &gt; Recently we have seen requests to not only move to a different
&gt; &gt; platform, but also to change the language to be Java.
&gt; &gt; We don't need to discuss all the issues that come with a language
&gt; &gt; change, like maintainability, staff competence, etc. as this is a
&gt; &gt; different topic.
&gt; &gt; I would be interested in knowing if anyone has seen a successful
&gt; &gt; project of this type that has a significant size.
&gt; &gt; A significant size would be more than one million lines of COBOL code.

&gt; &gt; Thanks HansJ

&gt; To paraphrase Samuel Johnson,

&gt; &quot;COBOL to Java is like a dog raised up on its hinder legs. It is not
&gt; surprising that it does it poorly; what is surprising is that it would want
&gt; to do so at all.&quot;- Hide quoted text -

&gt; - Show quoted text -
">

That begs (sorry, no pun intended) the question: what was the original
Samuel Johnson quote?
</POST>
<POST>
<POSTER> Alistair &lt;alist...@ld50macca.demon.co.uk&gt; </POSTER>
<POSTDATE> 2007-10-29T18:03:00 </POSTDATE>
On 29 Oct, 16:27, b ... @cs.uofs.edu (Bill Gunshannon) wrote:

<QUOTE PREVIOUSPOST="
&gt; In article &lt;1193674751.922948.92 ... @o80g2000hse.googlegroups.com&gt;,
&gt;         HansJ &lt;hji ... @kup.de&gt; writes:

&gt; &gt; On 29 Okt., 16:22, &quot;HeyBub&quot; &lt;heybubNOS ... @gmail.com&gt; wrote:
&gt; &gt;&gt; HansJ wrote:
&gt; &gt;&gt; &gt; We are in the business of migrating Unisys COBOL mainframe
&gt; &gt;&gt; &gt; applications to Unix.
&gt; &gt;&gt; &gt; Using the same programming language and keeping the code intact is a
&gt; &gt;&gt; &gt; key element, because we think that there are enough issues to deal
&gt; &gt;&gt; &gt; with.
&gt; &gt;&gt; &gt; Recently we have seen requests to not only move to a different
&gt; &gt;&gt; &gt; platform, but also to change the language to be Java.
&gt; &gt;&gt; &gt; We don't need to discuss all the issues that come with a language
&gt; &gt;&gt; &gt; change, like maintainability, staff competence, etc. as this is a
&gt; &gt;&gt; &gt; different topic.
&gt; &gt;&gt; &gt; I would be interested in knowing if anyone has seen a successful
&gt; &gt;&gt; &gt; project of this type that has a significant size.
&gt; &gt;&gt; &gt; A significant size would be more than one million lines of COBOL code.

&gt; &gt;&gt; &gt; Thanks HansJ

&gt; &gt;&gt; To paraphrase Samuel Johnson,

&gt; &gt;&gt; &quot;COBOL to Java is like a dog raised up on its hinder legs. It is not
&gt; &gt;&gt; surprising that it does it poorly; what is surprising is that it would want
&gt; &gt;&gt; to do so at all.&quot;

&gt; &gt; HeyBub,
&gt; &gt; I'm not saying that it is a good idea to even consider this, I'd like
&gt; &gt; to find out if there is anyone who can name a successfull project like
&gt; &gt; that.

&gt; But, what would a successful project prove?  I know someone who successfully
&gt; put a Ford V8 engine in a 1979 Triumph Spitfire.  It was real impressive.
&gt; And basicly impossible to drive safely as it was way overpowered. (Not
&gt; to be construed as saying java is more powerful than COBOL, just an
&gt; example of a &quot;successful&quot; and yet worthless project.)

&gt; I have discussed this with some of the profeessors here as I am a
&gt; strong advocate of COBL and they have recently decided to not use
&gt; COBOL for any course projects any more.  You have already admited
&gt; that the concept is bound to cause problems. Now let's look at the
&gt; other side of the coin.  What would be gained by re-writting all
&gt; the COBOL in Java?  My guess would be nothing.  So, then why do
&gt; it?  Seems like a very simple Risk Assessment would be enough to
&gt; kill this idea.

&gt; Tschüß,

&gt; bill

&gt; --
&gt; Bill Gunshannon          |  de-moc-ra-cy (di mok' ra see) n.  Three wolves
&gt; b ... @cs.scranton.edu     |  and a sheep voting on what's for dinner.
&gt; University of Scranton   |
&gt; Scranton, Pennsylvania   |         #include &lt;std.disclaimer.h&gt;  - Hide quoted text -

&gt; - Show quoted text -
">

OK. Seeing as I am applying for a job where the organisation is
looking at the option of migrating Cobol (probably to NATURAL but that
is another drum to bang) what experience does this group have of
migrating Cobol to C/C++ or Java (or any other language that might be
relevant)?
</POST>
<POST>
<POSTER> &quot;Pete Dashwood&quot; &lt;dashw...@removethis.enternet.co.nz&gt; </POSTER>
<POSTDATE> 2007-10-29T19:08:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;HansJ&quot; &lt;hji ... @kup.de&gt; wrote in message
">

news:1193659579.442522.126090@o38g2000hse.googlegroups.com ...

<QUOTE PREVIOUSPOST="
&gt; We are in the business of migrating Unisys COBOL mainframe
&gt; applications to Unix.
">

You are not alone... :-)

There are several COBOL people in this newsgroup with specific Unisys
experience and at least one of them is currently working in Java.

<QUOTE PREVIOUSPOST="
&gt; Using the same programming language and keeping the code intact is a
&gt; key element, because we think that there are enough issues to deal
&gt; with.
">

You are right. At least initially.

<QUOTE PREVIOUSPOST="
&gt; Recently we have seen requests to not only move to a different
&gt; platform, but also to change the language to be Java.
">

This is a change of paradigm. It has risks and benefits. As you have asked
us not to discuss it, I won't.

<QUOTE PREVIOUSPOST="
&gt; We don't need to discuss all the issues that come with a language
&gt; change, like maintainability, staff competence, etc. as this is a
&gt; different topic.
&gt; I would be interested in knowing if anyone has seen a successful
&gt; project of this type that has a significant size.
&gt; A significant size would be more than one million lines of COBOL code.
">

I have not personally seen or worked on a Unisys conversion to Unix,
although I have been laterally involved in some conversions on other
platforms.

Here is some free advice (definitely worth the price...but bear in mind that
I make a living out of giving advice and helping it get implemented :-)).

1. Ask yourself WHY you need to do this. If the answer is &quot;Because then we
can move to an OO language like Java.&quot; then you need to ask yourself WHY you
need to do that. Doing this will establish WHERE you are going and WHY. It
is very important to have a clear vision of what you want.

(It isn't just about technical platforms. If you want the company's IT
systems to be responsive to change and able to deal with fiercely
competitive market places, you might need to consider a much broader
picture. Should you be using in-house developed software at all? What about
web services? Packages? Saas?  My point is that it is pretty sad if you
invest considerable time and money in changing a technical platform, only to
find that the whole way in which you currently develop stuff is not
conducive to what the company actually wants/needs, or that the future for
the company lies in web based services and your expensive conversion to Unix
and even to Java fails to achieve this.)

2. If you are looking at converting in the hope of extending the life of the
existing systems, how will running under Unix achieve that?

3. If you are not ready to write off your existing codebase, maybe what you
SHOULD be considering is how best to leverage and re-factor what you have.
(This MIGHT involve a conversion to Java or it might not. Either way, the
tail doesn't wag the dog; hence my point about clarity of vision above. Be
very clear about WHERE you are going and WHY, before you sign any cheques.)

BOTTOM LINE:

Don't let technical staff decide how the company's IT systems should work;
they will see only a technical solution. :-)

Get a steering committee involving senior management to sit down and
formulate what they need, in Business functional terms. (One way to do this
is to get them to look at what is good and bad about the existing systems.
Don't take it personally and don't be defensive; the objective is to find
out what is REALLY needed and wanted, not to castigate IT over past
history). Make sure you elicit what is really important to them.

Explore weaknesses in existing systems and what would be needed to enhance
them, in Business terms only. You are considering major investment; tell
them to make time for it. Make sure that strategic direction for the Company
is included in what emerges.

Take the general directions and goals from the steering committee and relate
them back to existing systems. This will help you decide how much of what
you have is worth re-factoring and how much needs new development, or even a
new approach.

THEN get your technical people to explore options for achieving each of the
stated goals. Make sure that every goal has at least three options, even if
some of them are not very attractive... The objective is to get people
thinking outside the square and not just proceeding with what they've always
done... a &quot;New Deal&quot; for the IT department.

Consider Client/Server solutions as well as mainframe based ones, for
specific systems. (For example, you might find it very cost effective to
re-factor some of your existing COBOL onto a Client/server platform which
you can wrap as a web service and reuse throughout the company... or you
might not. The point is, that options need to be explored, evaluated and
costed, rather than just proceeding with &quot;business as usual&quot;.)

You may find that the money you would have spent on a Unix/Java conversion
can be much better spent in other ways. The days when a single corporate
software solution, based around a single corporate platform, was the only
option, are long gone. If you don't HAVE to put all your eggs in one basket;
why would you?

Stay goal oriented and ensure that your people do too.

It is a criminal waste of resource to do something in IT purely because it
is the perceived wisdom, or because &quot;everybody's doing it&quot;, or because your
tech people want something &quot;fashionable&quot; on their CVs :-)

Viel Gluck!

Pete.
--
&quot;I used to write COBOL...now I can do anything.&quot;
</POST>
<POST>
<POSTER> &quot;William M. Klein&quot; &lt;wmkl...@nospam.netcom.com&gt; </POSTER>
<POSTDATE> 2007-10-29T19:15:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Alistair&quot; &lt;alist ... @ld50macca.demon.co.uk&gt; wrote in message
">

&lt;snip&gt;

<QUOTE PREVIOUSPOST="
&gt;&gt; &quot;COBOL to Java is like a dog raised up on its hinder legs. It is not
&gt;&gt; surprising that it does it poorly; what is surprising is that it would want
&gt;&gt; to do so at all.&quot;- Hide quoted text -

&gt;&gt; - Show quoted text -

&gt; That begs (sorry, no pun intended) the question: what was the original
&gt; Samuel Johnson quote?
">

From:
http://www.bartleby.com/66/93/31293.html

&quot;QUOTATION:
A woman preaching is like a dog's walking on his hinder legs. It is not done
well; but you are surprised to find it done at all.

P.S.  What is the quote about teaching a dog or a bear to dance?  That is what I
thought of first with this quote, but couldn't find it online (as I don't
remember enough of the quote).
</POST>
<POST>
<POSTER> &quot;tlmfru&quot; &lt;la...@mts.net&gt; </POSTER>
<POSTDATE> 2007-10-29T20:43:00 </POSTDATE>
There's also one about the singing horse ...

PL
William M. Klein &lt;wmkl ... @nospam.netcom.com&gt; wrote in message
news:5QtVi.286478$zt4.84966@fe08.news.easynews.com ...

<QUOTE PREVIOUSPOST="
&gt; &quot;Alistair&quot; &lt;alist ... @ld50macca.demon.co.uk&gt; wrote in message
&gt; &lt;snip&gt;
&gt; &gt;&gt; &quot;COBOL to Java is like a dog raised up on its hinder legs. It is not
&gt; &gt;&gt; surprising that it does it poorly; what is surprising is that it would
want
&gt; &gt;&gt; to do so at all.&quot;- Hide quoted text -

&gt; &gt;&gt; - Show quoted text -
">
</POST>
<POST>
<POSTER> docdw...@panix.com () </POSTER>
<POSTDATE> 2007-10-29T20:24:00 </POSTDATE>
In article &lt;5QtVi.286478$zt4.84 ... @fe08.news.easynews.com&gt;,
William M. Klein &lt;wmkl ... @nospam.netcom.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt;&quot;Alistair&quot; &lt;alist ... @ld50macca.demon.co.uk&gt; wrote in message
&gt;&lt;snip&gt;
&gt;&gt;&gt; &quot;COBOL to Java is like a dog raised up on its hinder legs. It is not
&gt;&gt;&gt; surprising that it does it poorly; what is surprising is that it would want
&gt;&gt;&gt; to do so at all.&quot;- Hide quoted text -

&gt;&gt;&gt; - Show quoted text -

&gt;&gt; That begs (sorry, no pun intended) the question: what was the original
&gt;&gt; Samuel Johnson quote?

&gt;From:
&gt; http://www.bartleby.com/66/93/31293.html

&gt;&quot;QUOTATION:
&gt;    A woman preaching is like a dog's walking on his hinder legs. It is
&gt;not done
&gt;well; but you are surprised to find it done at all.

&gt;P.S.  What is the quote about teaching a dog or a bear to dance?  That
&gt;is what I
&gt;thought of first with this quote, but couldn't find it online (as I don't
&gt;remember enough of the quote).
">

There's one warning against trying to teach a pig to sing... but for
ursines all I can remember is 'The miracle of a dancing bear is not how
gracefully it dances, but that it dances at all.'

DD
</POST>
<POST>
<POSTER> LX-i &lt;lxi0...@netscape.net&gt; </POSTER>
<POSTDATE> 2007-10-29T20:51:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
HansJ wrote:
&gt; We are in the business of migrating Unisys COBOL mainframe
&gt; applications to Unix.
">

A-series or ClearPath?

<QUOTE PREVIOUSPOST="
&gt; Recently we have seen requests to not only move to a different
&gt; platform, but also to change the language to be Java.
&gt; We don't need to discuss all the issues that come with a language
&gt; change, like maintainability, staff competence, etc. as this is a
&gt; different topic.
">

I know this goes against what you just said, but from my experience, I
would caution against *any* language &quot;roll&quot; from one to another.  When a
system is coded, the low-level design usually draws upon the strengths
and efficiencies of the language in which it is written.  These do not
transfer well from one language to another.  Forget about the issues you
mentioned - it's simply bad code.

Add to that some of the &quot;bad&quot; COBOL structures one encounters,
especially on code that's old enough to vote, and it's simply a recipe
for disaster.

<QUOTE PREVIOUSPOST="
&gt; I would be interested in knowing if anyone has seen a successful
&gt; project of this type that has a significant size.
&gt; A significant size would be more than one million lines of COBOL code.
">

I have seen a failed project of this type.  :)  But that's not what you
asked, is it?

Personally, I would tell them something along the lines of this...
&quot;Moving to Java would take significant re-engineering of the existing
system.  (The data structures may also need to be converted to a
relational database.)  From our research and experience, trying to
convert the system at the code level would be a high-risk endeavor,
while re-engineering would not only increase your chances of being happy
with our results, but may result in a more efficient system that will
cost less to operate in the long run.&quot;

Of course, I'm not a marketing guy...  I just know that, with my 9 years
coding my previous system, and my 7 months being up to my eyeballs in
Java, I have a pretty good idea of how I'd go about converting my last
system to a Java web application.  :)  Not to say I could do it quickly,
but I can see how the objects and services would break down.

I can assure you that, first off, hundreds-of-lines-long &quot;edit&quot;
paragraphs would be a thing of the past.  Reusable single-responsibility
methods are great.  But, you're not going to eliminate that stuff with a
code roll.

--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~     / \/ _ o     ~          Live from Albuquerque, NM!          ~
~     _ /\   |     ~                                              ~
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
~ Business E-mail  ~ daniel @ &quot;Business Website&quot; below            ~
~ Business Website ~ http://www.djs-consulting.com ~
~ Tech Blog        ~ http://www.djs-consulting.com/linux/blog ~
~ Personal E-mail  ~ &quot;Personal Blog&quot; as e-mail address            ~
~ Personal Blog    ~ http://daniel.summershome.org ~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

GEEKCODE 3.12 GCS/IT d s-:+ a C++ L++ E--- W++ N++ o? K- w$ !O M--
V PS+ PE++ Y? !PGP t+ 5? X+ R* tv b+ DI++ D+ G- e h---- r+++ z++++

&quot;Who is more irrational?  A man who believes in a God he doesn't see,
or a man who's offended by a God he doesn't believe in?&quot; - Brad Stine
</POST>
<POST>
<POSTER> HansJ &lt;hji...@kup.de&gt; </POSTER>
<POSTDATE> 2007-10-30T04:45:00 </POSTDATE>
Pete Dashwood schrieb:

<QUOTE PREVIOUSPOST="
&gt; &quot;HansJ&quot; &lt;hji ... @kup.de&gt; wrote in message
&gt; news:1193659579.442522.126090@o38g2000hse.googlegroups.com ...
&gt; &gt; We are in the business of migrating Unisys COBOL mainframe
&gt; &gt; applications to Unix.

&gt; You are not alone... :-)
">

Yes I know, but there are only a few, it is a very small niche market
and it is divided into the MCP and the 2200 heritage, we focus on the
2200 only.

<QUOTE PREVIOUSPOST="
&gt; There are several COBOL people in this newsgroup with specific Unisys
&gt; experience and at least one of them is currently working in Java.
">

We do have sufficient experience in both areas, COBOL and new OO
languages, primarily Java. All our new product development is actually
in Java. My question was not to compare both environments.

<QUOTE PREVIOUSPOST="
&gt; &gt; Using the same programming language and keeping the code intact is a
&gt; &gt; key element, because we think that there are enough issues to deal
&gt; &gt; with.

&gt; You are right. At least initially.

&gt; &gt; Recently we have seen requests to not only move to a different
&gt; &gt; platform, but also to change the language to be Java.

&gt; This is a change of paradigm. It has risks and benefits. As you have asked
&gt; us not to discuss it, I won't.

&gt; &gt; We don't need to discuss all the issues that come with a language
&gt; &gt; change, like maintainability, staff competence, etc. as this is a
&gt; &gt; different topic.
&gt; &gt; I would be interested in knowing if anyone has seen a successful
&gt; &gt; project of this type that has a significant size.
&gt; &gt; A significant size would be more than one million lines of COBOL code.

&gt; I have not personally seen or worked on a Unisys conversion to Unix,
&gt; although I have been laterally involved in some conversions on other
&gt; platforms.

&gt; Here is some free advice (definitely worth the price...but bear in mind that
&gt; I make a living out of giving advice and helping it get implemented :-)).
">

Pete, thanks for that advise, while I appreciate it, it is beyond what
I was looking for, though I do agree with mst of what you're saying.

<QUOTE PREVIOUSPOST="
- Hide quoted text - - Show quoted text -
">

<QUOTE PREVIOUSPOST="
&gt; 1. Ask yourself WHY you need to do this. If the answer is &quot;Because then we
&gt; can move to an OO language like Java.&quot; then you need to ask yourself WHY you
&gt; need to do that. Doing this will establish WHERE you are going and WHY. It
&gt; is very important to have a clear vision of what you want.

&gt; (It isn't just about technical platforms. If you want the company's IT
&gt; systems to be responsive to change and able to deal with fiercely
&gt; competitive market places, you might need to consider a much broader
&gt; picture. Should you be using in-house developed software at all? What about
&gt; web services? Packages? Saas?  My point is that it is pretty sad if you
&gt; invest considerable time and money in changing a technical platform, only to
&gt; find that the whole way in which you currently develop stuff is not
&gt; conducive to what the company actually wants/needs, or that the future for
&gt; the company lies in web based services and your expensive conversion to Unix
&gt; and even to Java fails to achieve this.)
">

Changing a technical platform might have many reasons, and needs to be
evaluated for every site differently. One good reason in large
organisations is to reduce the number of platforms to be supported,
but keep valuable applications.

<QUOTE PREVIOUSPOST="
&gt; 2. If you are looking at converting in the hope of extending the life of the
&gt; existing systems, how will running under Unix achieve that?
">

Assumed that the existing system is worth using it for some time to
come, running it an a Unix platform will allow easier integration with
other systems running in the same environment.

<QUOTE PREVIOUSPOST="
&gt; 3. If you are not ready to write off your existing codebase, maybe what you
&gt; SHOULD be considering is how best to leverage and re-factor what you have.
&gt; (This MIGHT involve a conversion to Java or it might not. Either way, the
&gt; tail doesn't wag the dog; hence my point about clarity of vision above. Be
&gt; very clear about WHERE you are going and WHY, before you sign any cheques.)
">

Sure, what's not worth keeping should go. My issue was, that I have
seen requirements where a platform change (whatever the reason might
have been for that organisation) was combined with a change from COBOL
to Java. I would not recommend that at all!

<QUOTE PREVIOUSPOST="
- Hide quoted text - - Show quoted text -
">

<QUOTE PREVIOUSPOST="
&gt; BOTTOM LINE:

&gt; Don't let technical staff decide how the company's IT systems should work;
&gt; they will see only a technical solution. :-)

&gt; Get a steering committee involving senior management to sit down and
&gt; formulate what they need, in Business functional terms. (One way to do this
&gt; is to get them to look at what is good and bad about the existing systems.
&gt; Don't take it personally and don't be defensive; the objective is to find
&gt; out what is REALLY needed and wanted, not to castigate IT over past
&gt; history). Make sure you elicit what is really important to them.

&gt; Explore weaknesses in existing systems and what would be needed to enhance
&gt; them, in Business terms only. You are considering major investment; tell
&gt; them to make time for it. Make sure that strategic direction for the Company
&gt; is included in what emerges.

&gt; Take the general directions and goals from the steering committee and relate
&gt; them back to existing systems. This will help you decide how much of what
&gt; you have is worth re-factoring and how much needs new development, or even a
&gt; new approach.

&gt; THEN get your technical people to explore options for achieving each of the
&gt; stated goals. Make sure that every goal has at least three options, even if
&gt; some of them are not very attractive... The objective is to get people
&gt; thinking outside the square and not just proceeding with what they've always
&gt; done... a &quot;New Deal&quot; for the IT department.

&gt; Consider Client/Server solutions as well as mainframe based ones, for
&gt; specific systems. (For example, you might find it very cost effective to
&gt; re-factor some of your existing COBOL onto a Client/server platform which
&gt; you can wrap as a web service and reuse throughout the company... or you
&gt; might not. The point is, that options need to be explored, evaluated and
&gt; costed, rather than just proceeding with &quot;business as usual&quot;.)

&gt; You may find that the money you would have spent on a Unix/Java conversion
&gt; can be much better spent in other ways. The days when a single corporate
&gt; software solution, based around a single corporate platform, was the only
&gt; option, are long gone. If you don't HAVE to put all your eggs in one basket;
&gt; why would you?

&gt; Stay goal oriented and ensure that your people do too.

&gt; It is a criminal waste of resource to do something in IT purely because it
&gt; is the perceived wisdom, or because &quot;everybody's doing it&quot;, or because your
&gt; tech people want something &quot;fashionable&quot; on their CVs :-)
">

Well, the IT landscape is scattered with this...

<QUOTE PREVIOUSPOST="
&gt; Viel Gluck!
">

Danke.

<QUOTE PREVIOUSPOST="
- Hide quoted text - - Show quoted text -
">

<QUOTE PREVIOUSPOST="
&gt; Pete.
&gt; --
&gt; &quot;I used to write COBOL...now I can do anything.&quot;
">
</POST>
<POST>
<POSTER> HansJ &lt;hji...@kup.de&gt; </POSTER>
<POSTDATE> 2007-10-30T04:55:00 </POSTDATE>
On 29 Okt., 20:15, &quot;Sergey Kashyrin&quot; &lt;s ... @resqnet.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; &quot;HansJ&quot; &lt;hji ... @kup.de&gt; wrote in message

&gt; news:1193659579.442522.126090@o38g2000hse.googlegroups.com ...

&gt; &gt; We are in the business of migrating Unisys COBOL mainframe
&gt; &gt; applications to Unix.
&gt; &gt; Using the same programming language and keeping the code intact is a
&gt; &gt; key element, because we think that there are enough issues to deal
&gt; &gt; with.
&gt; &gt; Recently we have seen requests to not only move to a different
&gt; &gt; platform, but also to change the language to be Java.
&gt; &gt; We don't need to discuss all the issues that come with a language
&gt; &gt; change, like maintainability, staff competence, etc. as this is a
&gt; &gt; different topic.
&gt; &gt; I would be interested in knowing if anyone has seen a successful
&gt; &gt; project of this type that has a significant size.
&gt; &gt; A significant size would be more than one million lines of COBOL code.

&gt; &gt; Thanks HansJ

&gt; There are some automatic converters from Cobol to Java on the market (just
&gt; google them) but so far none of them producing 100% equivalent code, so you
&gt; have to rewrite a lot of things manually (some of the converters just
&gt; convert partially, some of them convert all COMP-3 and zoned arithmetics
&gt; into floating point...)

&gt; Your another option (if allowed) is to convert to C/C++ automatically (using
&gt; OpenCobol, for example).
&gt; The code will not look very friendly, but you will be able to recognize your
&gt; statements.
&gt; At least you will have a 100% working program, and than if you want you can
&gt; change it manually putting back the original variables names, making the
&gt; code more short and readable, etc. (and typically that's possible and not
&gt; very complicated).

&gt; Bad idea anyway. Good luck.
&gt; Sergey
">

Sergey,

thanks for your comments, I know that there are converters and we have
seen some of the converted code as a sample, but that was just a
complex subroutine and not an application.

I know about Open Cobol and we are using it, so I know about the the C
code that is generated. This would be something I could understand. I
did also read a bit about LegacyJ, what I'd like to  know is if there
are successful projects completed.

Thanks HansJ
</POST>
<POST>
<POSTER> HansJ &lt;hji...@kup.de&gt; </POSTER>
<POSTDATE> 2007-10-30T05:06:00 </POSTDATE>
On 30 Okt., 01:51, LX-i &lt;lxi0 ... @netscape.net&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; HansJ wrote:
&gt; &gt; We are in the business of migrating Unisys COBOL mainframe
&gt; &gt; applications to Unix.

&gt; A-series or ClearPath?
">

In this business area, all we do is 2200 (Clearpath can be both...)

<QUOTE PREVIOUSPOST="
&gt; &gt; Recently we have seen requests to not only move to a different
&gt; &gt; platform, but also to change the language to be Java.
&gt; &gt; We don't need to discuss all the issues that come with a language
&gt; &gt; change, like maintainability, staff competence, etc. as this is a
&gt; &gt; different topic.

&gt; I know this goes against what you just said, but from my experience, I
&gt; would caution against *any* language &quot;roll&quot; from one to another.  When a
&gt; system is coded, the low-level design usually draws upon the strengths
&gt; and efficiencies of the language in which it is written.  These do not
&gt; transfer well from one language to another.  Forget about the issues you
&gt; mentioned - it's simply bad code.
">

There is nothing wrong (and really not much of an alternative)  for
small amounts of code to change the language, for example rewrite
assembler system routines in C language. It is a completely different
story when we are talking about large amounts of the code.

<QUOTE PREVIOUSPOST="
&gt; Add to that some of the &quot;bad&quot; COBOL structures one encounters,
&gt; especially on code that's old enough to vote, and it's simply a recipe
&gt; for disaster.

&gt; &gt; I would be interested in knowing if anyone has seen a successful
&gt; &gt; project of this type that has a significant size.
&gt; &gt; A significant size would be more than one million lines of COBOL code.

&gt; I have seen a failed project of this type.  :)  But that's not what you
&gt; asked, is it?

&gt; Personally, I would tell them something along the lines of this...
&gt; &quot;Moving to Java would take significant re-engineering of the existing
&gt; system.  (The data structures may also need to be converted to a
&gt; relational database.)  From our research and experience, trying to
&gt; convert the system at the code level would be a high-risk endeavor,
&gt; while re-engineering would not only increase your chances of being happy
&gt; with our results, but may result in a more efficient system that will
&gt; cost less to operate in the long run.&quot;
">

Agreed..

<QUOTE PREVIOUSPOST="
- Hide quoted text - - Show quoted text -
">

<QUOTE PREVIOUSPOST="
&gt; Of course, I'm not a marketing guy...  I just know that, with my 9 years
&gt; coding my previous system, and my 7 months being up to my eyeballs in
&gt; Java, I have a pretty good idea of how I'd go about converting my last
&gt; system to a Java web application.  :)  Not to say I could do it quickly,
&gt; but I can see how the objects and services would break down.

&gt; I can assure you that, first off, hundreds-of-lines-long &quot;edit&quot;
&gt; paragraphs would be a thing of the past.  Reusable single-responsibility
&gt; methods are great.  But, you're not going to eliminate that stuff with a
&gt; code roll.

&gt; --
&gt; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
&gt; ~     / \/ _ o     ~          Live from Albuquerque, NM!          ~
&gt; ~     _ /\   |     ~                                              ~
&gt; ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
&gt; ~ Business E-mail  ~ daniel @ &quot;Business Website&quot; below            ~
&gt; ~ Business Website ~ http://www.djs-consulting.com ~
&gt; ~ Tech Blog        ~ http://www.djs-consulting.com/linux/blog ~
&gt; ~ Personal E-mail  ~ &quot;Personal Blog&quot; as e-mail address            ~
&gt; ~ Personal Blog    ~ http://daniel.summershome.org ~
&gt; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

&gt; GEEKCODE 3.12 GCS/IT d s-:+ a C++ L++ E--- W++ N++ o? K- w$ !O M--
&gt; V PS+ PE++ Y? !PGP t+ 5? X+ R* tv b+ DI++ D+ G- e h---- r+++ z++++

&gt; &quot;Who is more irrational?  A man who believes in a God he doesn't see,
&gt; or a man who's offended by a God he doesn't believe in?&quot; - Brad Stine
">
</POST>
<POST>
<POSTER> Robert &lt;n...@e.mail&gt; </POSTER>
<POSTDATE> 2007-10-30T10:06:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
On Mon, 29 Oct 2007 05:06:19 -0700, HansJ &lt;hji ... @kup.de&gt; wrote:
&gt;We are in the business of migrating Unisys COBOL mainframe
&gt;applications to Unix.
&gt;Using the same programming language and keeping the code intact is a
&gt;key element, because we think that there are enough issues to deal
&gt;with.
&gt;Recently we have seen requests to not only move to a different
&gt;platform, but also to change the language to be Java.
&gt;We don't need to discuss all the issues that come with a language
&gt;change, like maintainability, staff competence, etc. as this is a
&gt;different topic.
&gt;I would be interested in knowing if anyone has seen a successful
&gt;project of this type that has a significant size.
&gt;A significant size would be more than one million lines of COBOL code.
">

The system rewrite most discussed in print was the Chrysler payroll, discussed here
http://en.wikipedia.org/wiki/Chrysler_Comprehensive_Compensation

That one was in Smalltalk and Gemstone. If they were doing it today, they would use Java
and J2EE. There is enough similarity to make the experience relevant. The key concept is
an object oriented code-centric style of design and management, then called Extreme
Programming (XP).

Make a list of the factors needed for a successful IT project, then ask how many of them
can be performed by the language or compiler. My list looks like this:

1. Management, leadership
2. Programming talent
3. Clear definition of goals
4. Management support, lack of politics
5. Testing, quality control
6. Adequate resources -- time, people, software tools, hardware
7. Development speed
</POST>
<POST>
<POSTER> b...@cs.uofs.edu (Bill Gunshannon) </POSTER>
<POSTDATE> 2007-10-30T09:05:00 </POSTDATE>
In article &lt;5QtVi.286478$zt4.84 ... @fe08.news.easynews.com&gt;,
&quot;William M. Klein&quot; &lt;wmkl ... @nospam.netcom.com&gt; writes:

<QUOTE PREVIOUSPOST="
&gt; &quot;Alistair&quot; &lt;alist ... @ld50macca.demon.co.uk&gt; wrote in message
&gt; &lt;snip&gt;
&gt;&gt;&gt; &quot;COBOL to Java is like a dog raised up on its hinder legs. It is not
&gt;&gt;&gt; surprising that it does it poorly; what is surprising is that it would want
&gt;&gt;&gt; to do so at all.&quot;- Hide quoted text -

&gt;&gt;&gt; - Show quoted text -

&gt;&gt; That begs (sorry, no pun intended) the question: what was the original
&gt;&gt; Samuel Johnson quote?

&gt; From:
&gt; http://www.bartleby.com/66/93/31293.html

&gt; &quot;QUOTATION:
&gt;     A woman preaching is like a dog's walking on his hinder legs. It is not done
&gt; well; but you are surprised to find it done at all.

&gt; P.S.  What is the quote about teaching a dog or a bear to dance?  That is what I
&gt; thought of first with this quote, but couldn't find it online (as I don't
&gt; remember enough of the quote).
">

I think you might be thinking of this one.

&quot;Never try to teach a pig to sing. You waste your time and you annoy the pig.&quot;
1973 Robert A. Heinlein, Time Enough for Love (ISBN 0739419447)

bill

--
Bill Gunshannon          |  de-moc-ra-cy (di mok' ra see) n.  Three wolves
b ... @cs.scranton.edu     |  and a sheep voting on what's for dinner.
University of Scranton   |
Scranton, Pennsylvania   |         #include &lt;std.disclaimer.h&gt;
</POST>
<POST>
<POSTER> b...@cs.uofs.edu (Bill Gunshannon) </POSTER>
<POSTDATE> 2007-10-30T09:10:00 </POSTDATE>
In article &lt;RjqVi.38$xk.132 ... @news.sisna.com&gt;,
&quot;Sergey Kashyrin&quot; &lt;s ... @resqnet.com&gt; writes:

<QUOTE PREVIOUSPOST="
&gt; &quot;HansJ&quot; &lt;hji ... @kup.de&gt; wrote in message
&gt; news:1193659579.442522.126090@o38g2000hse.googlegroups.com ...
&gt;&gt; We are in the business of migrating Unisys COBOL mainframe
&gt;&gt; applications to Unix.
&gt;&gt; Using the same programming language and keeping the code intact is a
&gt;&gt; key element, because we think that there are enough issues to deal
&gt;&gt; with.
&gt;&gt; Recently we have seen requests to not only move to a different
&gt;&gt; platform, but also to change the language to be Java.
&gt;&gt; We don't need to discuss all the issues that come with a language
&gt;&gt; change, like maintainability, staff competence, etc. as this is a
&gt;&gt; different topic.
&gt;&gt; I would be interested in knowing if anyone has seen a successful
&gt;&gt; project of this type that has a significant size.
&gt;&gt; A significant size would be more than one million lines of COBOL code.

&gt;&gt; Thanks HansJ

&gt; There are some automatic converters from Cobol to Java on the market (just
&gt; google them) but so far none of them producing 100% equivalent code, so you
&gt; have to rewrite a lot of things manually (some of the converters just
&gt; convert partially, some of them convert all COMP-3 and zoned arithmetics
&gt; into floating point...)

&gt; Your another option (if allowed) is to convert to C/C++ automatically (using
&gt; OpenCobol, for example).
&gt; The code will not look very friendly, but you will be able to recognize your
&gt; statements.
&gt; At least you will have a 100% working program, and than if you want you can
&gt; change it manually putting back the original variables names, making the
&gt; code more short and readable, etc. (and typically that's possible and not
&gt; very complicated).

&gt; Bad idea anyway. Good luck.
&gt; Sergey
">

While we are talking about language conversions, is there anyone here
who remembers a product from the early 80's called &quot;SCORE&quot; that took
even more english like syntax (actually, it looked a lot like RPG)
and generated COBOL source.  What ever became of the company?  We
test ran it at USMA and the programmers unanimously rejected it.
Tandy had one, too.  If you thought COBOL was verbose, you should
have seent he putput from that one!!

bill

--
Bill Gunshannon          |  de-moc-ra-cy (di mok' ra see) n.  Three wolves
b ... @cs.scranton.edu     |  and a sheep voting on what's for dinner.
University of Scranton   |
Scranton, Pennsylvania   |         #include &lt;std.disclaimer.h&gt;
</POST>
<POST>
<POSTER> b...@cs.uofs.edu (Bill Gunshannon) </POSTER>
<POSTDATE> 2007-10-30T09:16:00 </POSTDATE>
In article &lt;5on7ejFnk8m ... @mid.individual.net&gt;,
&quot;Pete Dashwood&quot; &lt;dashw ... @removethis.enternet.co.nz&gt; writes:

<QUOTE PREVIOUSPOST="
&gt; &quot;HansJ&quot; &lt;hji ... @kup.de&gt; wrote in message
&gt; news:1193659579.442522.126090@o38g2000hse.googlegroups.com ...
&gt;&gt; We are in the business of migrating Unisys COBOL mainframe
&gt;&gt; applications to Unix.

&gt; You are not alone... :-)

&gt; There are several COBOL people in this newsgroup with specific Unisys
&gt; experience and at least one of them is currently working in Java.
">

I find that statement interesting as I, too, have experience in COBOL
and DML on a Univac 1100.  And then, until about a year ago we used
a VAX and VMS COBOL here in the CS Department.  And, recently, I have
been working with the free Unix COBOL's mostly because I really like
COBOL and still hope someone looking for COBOL experience will find me. :-)

I trimmed the rest, but let me at least say it looked like real good
advice to me!!

bill

--
Bill Gunshannon          |  de-moc-ra-cy (di mok' ra see) n.  Three wolves
b ... @cs.scranton.edu     |  and a sheep voting on what's for dinner.
University of Scranton   |
Scranton, Pennsylvania   |         #include &lt;std.disclaimer.h&gt;
</POST>
<POST>
<POSTER> HansJ &lt;hji...@kup.de&gt; </POSTER>
<POSTDATE> 2007-10-30T10:30:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&gt; I find that statement interesting as I, too, have experience in COBOL
&gt; and DML on a Univac 1100.  And then, until about a year ago we used
&gt; a VAX and VMS COBOL here in the CS Department.  And, recently, I have
&gt; been working with the free Unix COBOL's mostly because I really like
&gt; COBOL and still hope someone looking for COBOL experience will find me. :-)

&gt; I trimmed the rest, but let me at least say it looked like real good
&gt; advice to me!!
">

Bill, my feeling is that demand for COBOL experience is currently
fairly low. So if you're investing into your career, I would not be
focussing on COBOL.

Some of the answers I seem to predict that I'm looking for advise on
how to convert a COBOL application to Java, THAT IS NOT THE CASE at
all. Maybe someone come up with an answer...

Regards HansJ
</POST>
<POST>
<POSTER> b...@cs.uofs.edu (Bill Gunshannon) </POSTER>
<POSTDATE> 2007-10-30T11:05:00 </POSTDATE>
In article &lt;1193754625.140107.30 ... @y42g2000hsy.googlegroups.com&gt;,
HansJ &lt;hji ... @kup.de&gt; writes:

<QUOTE PREVIOUSPOST="
&gt;&gt; I find that statement interesting as I, too, have experience in COBOL
&gt;&gt; and DML on a Univac 1100.  And then, until about a year ago we used
&gt;&gt; a VAX and VMS COBOL here in the CS Department.  And, recently, I have
&gt;&gt; been working with the free Unix COBOL's mostly because I really like
&gt;&gt; COBOL and still hope someone looking for COBOL experience will find me. :-)

&gt;&gt; I trimmed the rest, but let me at least say it looked like real good
&gt;&gt; advice to me!!

&gt; Bill, my feeling is that demand for COBOL experience is currently
&gt; fairly low.
">

I think it is fairly low but pretty stable.  Of course, the pool of
knowledgable COBOL programmers is also low and shrinking at a faster
rate than the need.

<QUOTE PREVIOUSPOST="
&gt;              So if you're investing into your career, I would not be
&gt; focussing on COBOL.
">

At the stage of my career where I currently find myself, I am not
really &quot;investing&quot; in anything.  I am rapidly approaching retirement
and am mostly just looking for something interesting to round things
out.  30 years ago I was a COBOL programmer.  Since then I have been
a Systems Engineer, a Network Engineer, A SysAdmin for various (but
mostly Unix) systems and prgrammed in more languages than I can count
without taking my shoes off.  Of all of this, I think I enjoyed my
time doing COBOL best of all and I would be very happy to go back to
my roots for these last years. (might even extend those years for the
right position :-)  I could be just what someone is in need of as I
am not just beinning my career but ending it.   I am sure there are
people out there who see their long term IT goals as moving away from
COBOL, but in the meantime, the existing COBOL will need to be maintained,
possibly for several more years until the conversion can be completed.
And, this maintenance could include moving the COBOL from a dead or
dying platform to something more mainstream like Unix or Linux.

<QUOTE PREVIOUSPOST="
&gt; Some of the answers I seem to predict that I'm looking for advise on
&gt; how to convert a COBOL application to Java, THAT IS NOT THE CASE at
&gt; all. Maybe someone come up with an answer...
">

I re-iterate my original comment, as repeated by others.  Unless Java
is bringing something of value to the move, and given the already known
risks involved in such a move, the question is simply, why?

bill

--
Bill Gunshannon          |  de-moc-ra-cy (di mok' ra see) n.  Three wolves
b ... @cs.scranton.edu     |  and a sheep voting on what's for dinner.
University of Scranton   |
Scranton, Pennsylvania   |         #include &lt;std.disclaimer.h&gt;
</POST>
<POST>
<POSTER> Howard Brazee &lt;how...@brazee.net&gt; </POSTER>
<POSTDATE> 2007-10-30T11:13:00 </POSTDATE>
On Mon, 29 Oct 2007 15:03:12 -0700, Alistair

<QUOTE PREVIOUSPOST="
&lt;alist ... @ld50macca.demon.co.uk&gt; wrote:
&gt;OK. Seeing as I am applying for a job where the organisation is
&gt;looking at the option of migrating Cobol (probably to NATURAL but that
&gt;is another drum to bang) what experience does this group have of
&gt;migrating Cobol to C/C++ or Java (or any other language that might be
&gt;relevant)?
">

I've had enough experience &quot;migrating&quot; CoBOL to CoBOL to know that
migration is rarely the way to go even with the same language.   When
data, databases, interfaces, and/or business needs change rewrites are
appropriate.

The expression &quot;I can write Fortran in any language&quot; is not a
recommendation.
</POST>
<POST>
<POSTER> Howard Brazee &lt;how...@brazee.net&gt; </POSTER>
<POSTDATE> 2007-10-30T11:14:00 </POSTDATE>
On Mon, 29 Oct 2007 14:54:43 -0700, Alistair

<QUOTE PREVIOUSPOST="
&lt;alist ... @ld50macca.demon.co.uk&gt; wrote:
&gt;That begs (sorry, no pun intended) the question: what was the original
&gt;Samuel Johnson quote?
">

More evidence that the original definition of &quot;begs the question&quot; is
dead and should be buried.
</POST>
<POST>
<POSTER> Howard Brazee &lt;how...@brazee.net&gt; </POSTER>
<POSTDATE> 2007-10-30T11:16:00 </POSTDATE>
On 29 Oct 2007 23:08:04 GMT, &quot;Pete Dashwood&quot;

<QUOTE PREVIOUSPOST="
&lt;dashw ... @removethis.enternet.co.nz&gt; wrote:
&gt;Don't let technical staff decide how the company's IT systems should work;
&gt;they will see only a technical solution. :-)
">

Amen.
</POST>
<POST>
<POSTER> Howard Brazee &lt;how...@brazee.net&gt; </POSTER>
<POSTDATE> 2007-10-30T11:51:00 </POSTDATE>
On Tue, 30 Oct 2007 09:16:33 -0600, Howard Brazee &lt;how ... @brazee.net&gt;
wrote:

<QUOTE PREVIOUSPOST="
&gt;&gt;Don't let technical staff decide how the company's IT systems should work;
&gt;&gt;they will see only a technical solution. :-)

&gt;Amen.
">

Although if management make the decision, they will likely see only a
management solution.    This might be closer to the best business
solution - but won't be optimum.
</POST>
<POST>
<POSTER> &quot;William M. Klein&quot; &lt;wmkl...@nospam.netcom.com&gt; </POSTER>
<POSTDATE> 2007-10-30T11:56:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;HansJ&quot; &lt;hji ... @kup.de&gt; wrote in message
">

news:1193734534.072600.180290@k79g2000hse.googlegroups.com ...

<QUOTE PREVIOUSPOST="
&gt; On 29 Okt., 20:15, &quot;Sergey Kashyrin&quot; &lt;s ... @resqnet.com&gt; wrote:
&gt;&gt; &quot;HansJ&quot; &lt;hji ... @kup.de&gt; wrote in message
&lt;mich snippage&gt;
&gt; I know about Open Cobol and we are using it, so I know about the the C
&gt; code that is generated. This would be something I could understand. I
&gt; did also read a bit about LegacyJ, what I'd like to  know is if there
&gt; are successful projects completed.

&gt; Thanks HansJ
">

I could be mistaken on this, but I *think* that checking in a Java newsgroup
rather than a COBOL one might be a better place to get input/reports about
successful COBOL -&gt; Java conversions projects.  Having said that, I don't
subscribe to such groups so you may have already asked there too.

P.S.  My experience is much more on the IBM mainframe and PC sides of the world.
However, I have noticed that the IBM &lt;mainframe&gt; newsgroups mostly have
information on FAILED conversion/migration projects and not on those that
succeed.

--
Bill Klein
wmklein &lt;at&gt; ix.netcom.com
</POST>
<POST>
<POSTER> HansJ &lt;hji...@kup.de&gt; </POSTER>
<POSTDATE> 2007-10-30T12:41:00 </POSTDATE>
snip...

<QUOTE PREVIOUSPOST="
&gt; And, this maintenance could include moving the COBOL from a dead or
&gt; dying platform to something more mainstream like Unix or Linux.
">

...and this is what we are doing for COBOL code coming from the Unisys
2200, implementing it WITHOUT LANGUAGE CHANGE to Unix.

This is a snippet from the the RFP that triggered this thread:
&quot;the transitioned applications are expected to be redesigned and built
in PL/SQL and/or JAVA rather than COBOL&quot;

PL/SQL because Oracle would have been the target database.

Regards HansJ
</POST>
<POST>
<POSTER> Robert &lt;n...@e.mail&gt; </POSTER>
<POSTDATE> 2007-10-30T14:37:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
On Tue, 30 Oct 2007 07:30:25 -0700, HansJ &lt;hji ... @kup.de&gt; wrote:
&gt;&gt; I find that statement interesting as I, too, have experience in COBOL
&gt;&gt; and DML on a Univac 1100.  And then, until about a year ago we used
&gt;&gt; a VAX and VMS COBOL here in the CS Department.  And, recently, I have
&gt;&gt; been working with the free Unix COBOL's mostly because I really like
&gt;&gt; COBOL and still hope someone looking for COBOL experience will find me. :-)

&gt;&gt; I trimmed the rest, but let me at least say it looked like real good
&gt;&gt; advice to me!!

&gt;Bill, my feeling is that demand for COBOL experience is currently
&gt;fairly low.
">

As a Cobol contractor who has to find a new project every 6-12 months, I've found demand
(and pay) for Cobol contractors is medium. It's all maintenance, no new development.

Java is the skill in highest demand. That's common knowledge. Unexpectedly, the second
highest demand is for PL/SQL. There are shops doing EVERYTHING in PL/SQL, SQR, scripting
languages, principally PERL, and data watehousing tools.  Demand for PL/SQL is roughly
double demand for Cobol; money is 20-40% higher.

<QUOTE PREVIOUSPOST="
&gt;So if you're investing into your career, I would not be focussing on COBOL.
">

Agreed. Go for Java. In a few years it'll be something else.
</POST>
<POST>
<POSTER> Howard Brazee &lt;how...@brazee.net&gt; </POSTER>
<POSTDATE> 2007-10-30T13:55:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
On Tue, 30 Oct 2007 12:37:53 -0600, Robert &lt;n ... @e.mail&gt; wrote:
&gt;&gt;So if you're investing into your career, I would not be focussing on COBOL.

&gt;Agreed. Go for Java. In a few years it'll be something else.
">

Which means - don't market yourself (to yourself or your boss) as a
Java programmer.   Define your skills more broadly towards your
contributions to your business.
</POST>
<POST>
<POSTER> &quot;William M. Klein&quot; &lt;wmkl...@nospam.netcom.com&gt; </POSTER>
<POSTDATE> 2007-10-30T18:36:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Robert&quot; &lt;n ... @e.mail&gt; wrote in message
">

news:jptei3pnp3049g53o3i0o9udcjpnc691mp@4ax.com ...

<QUOTE PREVIOUSPOST="
&gt; On Tue, 30 Oct 2007 07:30:25 -0700, HansJ &lt;hji ... @kup.de&gt; wrote:

&lt;snip&gt;
&gt; As a Cobol contractor who has to find a new project every 6-12 months, I've
&gt; found demand
&gt; (and pay) for Cobol contractors is medium. It's all maintenance, no new
&gt; development.
">

Robert,
&lt;JOKING&gt;
You should move to the IBM mainframe.  Lots of new development in COBOL being
done there (XML,  CICS SOA, etc)

(a little more seriously)
Of course,  as I have previously indicated, I think (from limited input) that
most of this is done by in-house employees and NOT contractors.

--
Bill Klein
wmklein &lt;at&gt; ix.netcom.com
</POST>
<POST>
<POSTER> Robert &lt;n...@e.mail&gt; </POSTER>
<POSTDATE> 2007-10-30T19:46:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
On Tue, 30 Oct 2007 11:55:20 -0600, Howard Brazee &lt;how ... @brazee.net&gt; wrote:
&gt;On Tue, 30 Oct 2007 12:37:53 -0600, Robert &lt;n ... @e.mail&gt; wrote:

&gt;&gt;&gt;So if you're investing into your career, I would not be focussing on COBOL.

&gt;&gt;Agreed. Go for Java. In a few years it'll be something else.

&gt;Which means - don't market yourself (to yourself or your boss) as a
&gt;Java programmer.   Define your skills more broadly towards your
&gt;contributions to your business.
">

Job ads don't ask for business contributions, they ask for a bucket of technical skills.
Here's a typical, randomly selected ad:

We are seeking someone with the following skills:

Required-
5+ Years Micro Focus COBOL &amp; Pro-Cobol
3+ Years UNIX &amp; shell script
Oracle 9i or above with background in the following features: SQL,
Pro-SQL, Tables, Views, etc.

Knowledge or Experience
Mainframe JCL
Micro Focus Workbench
Pro-C
Software Design Lifecycle ? ESDm a plus
</POST>
<POST>
<POSTER> Robert &lt;n...@e.mail&gt; </POSTER>
<POSTDATE> 2007-10-31T00:22:00 </POSTDATE>
On Tue, 30 Oct 2007 22:36:38 GMT, &quot;William M. Klein&quot; &lt;wmkl ... @nospam.netcom.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt;&quot;Robert&quot; &lt;n ... @e.mail&gt; wrote in message
&gt; news:jptei3pnp3049g53o3i0o9udcjpnc691mp@4ax.com ...
&gt;&gt; On Tue, 30 Oct 2007 07:30:25 -0700, HansJ &lt;hji ... @kup.de&gt; wrote:

&gt;&lt;snip&gt;
&gt;&gt; As a Cobol contractor who has to find a new project every 6-12 months, I've
&gt;&gt; found demand
&gt;&gt; (and pay) for Cobol contractors is medium. It's all maintenance, no new
&gt;&gt; development.

&gt;Robert,
&gt;  &lt;JOKING&gt;
&gt;You should move to the IBM mainframe.  Lots of new development in COBOL being
&gt;done there (XML,  CICS SOA, etc)
">

I hate to admit it, but you're right.

There are two kinds of Unix/Cobol shops. One kind is full of resentful 'former'
mainframers who zealous enforce their1980s standard, spend half their time bashing new
technologies and the other half planning their retirements. Crews on sinking ships don't
care about development, their only concern is survival. The other kind of shop is full of
C programmers 'stuck' with maintaining old Cobol. When a program requires significant
change, they rewrite it in C or write the enhancement as a callable C function.

For instance, AxMDOCS ICM is a huge system that does billing, customer service, etc. for
most phone companies worldwide. It was originally, in the early '90s, written in Cobol and
Powerbuilder. For 15 years the company has been replacing the UI with Java, and the Cobol
back end with C. The back end is now more then 60% C/C++. I don't know how many millions
of lines of code it has, but I know compiling everything on a multi-CPU machine takes 18
hours. Compiling one program takes less than a second. And yes, the make file runs
parallel compilations.

<QUOTE PREVIOUSPOST="
&gt;(a little more seriously)
&gt;Of course,  as I have previously indicated, I think (from limited input) that
&gt;most of this is done by in-house employees and NOT contractors.
">

Generally true. In some big companies, employees are fully occupied with meetings,
production support and many days off. They don't have time for development projects longer
than a few hours. They find time for sexy new technologies such as XML and SOA (Same Old
Architecture); they use contractors for routine enhancements, especially on Cobol
programs.

Development is sometimes outsourced, but those projects don't use Cobol. They use whatever
the CIO read was hot in an airline magazine.

A warning to prospective contractors: you MUST be mobile. If you're rooted to one city by
a house, spouse or family, get a 'perm' job, don't try to be a contractor. If you do,
here's what will happen. The first project will be in your home city. No problem. The
second will be 50 miles away. A long commute, but doable. The third will be 300-500 miles
away. For the first month, you'll go home every weekend. For the second month, you'll go
home every other weekend. By the fourth month, you'll hate the job, resent the spouse or
think this is no way to live. You'll spend a lot of time looking for a contract back home.
When you can't find one, you'll feel trapped. Then you'll take a Robert Half job paying
$30/hr.  I've seen it happen dozens of times. I never made that mistake; I AM mobile.

Also, don't believe anything the pimp (contracting company) tells you, especially the
project duration. He simply doesn't know. That's determined by the client. The pimp will
usually say 'six months with possible extensions.' Translation: between two months and
five years. The PM (project manager) won't say either, because the legal department told
him to make no verbal commitments. To find out, ask the team lead for the Go Live date. If
there isn't one, it's not a bona fide project. They might want a sacrificial goat for the
next round of downsizing; they might want a tester or production support person; there
might even be a kickback scam going on. I've seen all three. In any case, they don't need
a developer, so you won't be happy.

When you are on a project, you're competing with the other contractors for a seat on the
NEXT project, if any. Volunteer for crappy tasks no one else wants to do, especially those
involving process (methodology). Put yourself in the PM's place. Managers think
development is ALL about process. They think code monkeys can be hired from outside;
workers versed in the company's process are worth keeping.
</POST>
<POST>
<POSTER> Alistair &lt;alist...@ld50macca.demon.co.uk&gt; </POSTER>
<POSTDATE> 2007-10-31T10:04:00 </POSTDATE>
On 30 Oct, 23:46, Robert &lt;n ... @e.mail&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Tue, 30 Oct 2007 11:55:20 -0600, Howard Brazee &lt;how ... @brazee.net&gt; wrote:
&gt; &gt;On Tue, 30 Oct 2007 12:37:53 -0600, Robert &lt;n ... @e.mail&gt; wrote:

&gt; &gt;&gt;&gt;So if you're investing into your career, I would not be focussing on COBOL.

&gt; &gt;&gt;Agreed. Go for Java. In a few years it'll be something else.

&gt; &gt;Which means - don't market yourself (to yourself or your boss) as a
&gt; &gt;Java programmer.   Define your skills more broadly towards your
&gt; &gt;contributions to your business.

&gt; Job ads don't ask for business contributions, they ask for a bucket of technical skills.
&gt; Here's a typical, randomly selected ad:

&gt; We are seeking someone with the following skills:

&gt; Required-
&gt; 5+ Years Micro Focus COBOL &amp; Pro-Cobol
&gt; 3+ Years UNIX &amp; shell script
&gt; Oracle 9i or above with background in the following features: SQL,
&gt; Pro-SQL, Tables, Views, etc.

&gt; Knowledge or Experience
&gt; Mainframe JCL
&gt; Micro Focus Workbench
&gt; Pro-C
&gt; Software Design Lifecycle ? ESDm a plus
">

They seem to be light on the requirements. I have seen job ads for
experienced hands-off project managers who needed to be able to code
(what happened to hands-off?), act as a design authority, problem
resolve in several computing languages...etc....etc... and only paid
around $40,000 pa.
</POST>
<POST>
<POSTER> &quot;Sergey Kashyrin&quot; &lt;s...@resqnet.com&gt; </POSTER>
<POSTDATE> 2007-10-31T21:50:00 </POSTDATE>
Robert,

You've made my day :-D

<QUOTE PREVIOUSPOST="
&gt; I hate to admit it, but you're right.
">

&lt;my signature is here&gt;

The only thing I can add or put in question:

<QUOTE PREVIOUSPOST="
&gt; There are two kinds of Unix/Cobol shops.
">

I'm in the third one.
I'm the only C++ (and actually any language)  programmer in the company with
a primary product written in Cobol which is still developed/enhanced over 30
years in Cobol/CICS.
Yes, I do the tricks writing callable C++ programs even under CICS (hacker's
stuff keeping the open file or socket handle in TWA or TSQ etc. which can't
be done in Cobol) but generally all business logic of the product is in
Cobol.
I have my own implementation of CICS (in Java/C++, of course limited number
of statement types) which works on Win, any Unix and as400 and that's how we
see the &quot;conversion&quot; goal or the way to go.
We use OpenCobol on all the platforms but 390 and as400 and we have our own
precompilers for this &quot;CICS emulator&quot;.

Speaking of original topic, yes, I have a success story but not for 1M of
lines.
It was kind of a &quot;pilot&quot; which went to trash and I've just wanter to
evaluate the efforts.
There were only 30K, and a really small number of &quot;EXEC SQL&quot;. It took a
month. Steps were:
- Convert to C using OpenCobol (get a working program but SQL) (30 seconds)
- manually restore the C structures/unions with names according levels in
Cobol (program still working but SQL) (2-3 days).
- Convert to java style (completely nonworking) - replacing structures by
the classes, throwing out unions (result of REDEFINEs), convert all former
COMP-3 into BigDecimal, etc (a week).
- Replace all calls to former OC &quot;libcob&quot; library by the real java
operations/functions (still garbage) (another week).
- Figuring out PERFORM flow and getting rid of PERFORM stack and &quot;goto&quot;-s
related to that (much better but still don't compile) (another week)
- Cleaning up the syntax, putting back SQL (the rest 2-3 days)

Now I can say that that was mostly &quot;monkey job&quot;, i.e. if you did it once you
will know how to do and that's not interesting anymore.
I'm still thinking of automating that, but I also want to have a life and
I've never seen a real demand for that.
It might happen eventually if OpenCobol will switch from C to C++ and to the
ideology of keeping the original Cobol names in C++ code and to the ideology
of operation overloads for the specific (read COMP-3/4/etc) data types
(that's the point where C++ and Java are getting closer).

Regards,
SKA

<QUOTE PREVIOUSPOST="
&quot;Robert&quot; &lt;n ... @e.mail&gt; wrote in message
">

news:kdnfi3djta8r4nb4fribot1nb3sao71p36@4ax.com ...

<QUOTE PREVIOUSPOST="
&gt; On Tue, 30 Oct 2007 22:36:38 GMT, &quot;William M. Klein&quot;
&gt; &lt;wmkl ... @nospam.netcom.com&gt; wrote:

&gt;&gt;&quot;Robert&quot; &lt;n ... @e.mail&gt; wrote in message
&gt;&gt; news:jptei3pnp3049g53o3i0o9udcjpnc691mp@4ax.com ...
&gt;&gt;&gt; On Tue, 30 Oct 2007 07:30:25 -0700, HansJ &lt;hji ... @kup.de&gt; wrote:

&gt;&gt;&lt;snip&gt;
&gt;&gt;&gt; As a Cobol contractor who has to find a new project every 6-12 months,
&gt;&gt;&gt; I've
&gt;&gt;&gt; found demand
&gt;&gt;&gt; (and pay) for Cobol contractors is medium. It's all maintenance, no new
&gt;&gt;&gt; development.

&gt;&gt;Robert,
&gt;&gt;  &lt;JOKING&gt;
&gt;&gt;You should move to the IBM mainframe.  Lots of new development in COBOL
&gt;&gt;being
&gt;&gt;done there (XML,  CICS SOA, etc)

&gt; I hate to admit it, but you're right.

&gt; There are two kinds of Unix/Cobol shops. One kind is full of resentful
&gt; 'former'
&gt; mainframers who zealous enforce their1980s standard, spend half their time
&gt; bashing new
&gt; technologies and the other half planning their retirements. Crews on
&gt; sinking ships don't
&gt; care about development, their only concern is survival. The other kind of
&gt; shop is full of
&gt; C programmers 'stuck' with maintaining old Cobol. When a program requires
&gt; significant
&gt; change, they rewrite it in C or write the enhancement as a callable C
&gt; function.

&gt; For instance, AxMDOCS ICM is a huge system that does billing, customer
&gt; service, etc. for
&gt; most phone companies worldwide. It was originally, in the early '90s,
&gt; written in Cobol and
&gt; Powerbuilder. For 15 years the company has been replacing the UI with
&gt; Java, and the Cobol
&gt; back end with C. The back end is now more then 60% C/C++. I don't know how
&gt; many millions
&gt; of lines of code it has, but I know compiling everything on a multi-CPU
&gt; machine takes 18
&gt; hours. Compiling one program takes less than a second. And yes, the make
&gt; file runs
&gt; parallel compilations.

&gt;&gt;(a little more seriously)
&gt;&gt;Of course,  as I have previously indicated, I think (from limited input)
&gt;&gt;that
&gt;&gt;most of this is done by in-house employees and NOT contractors.

&gt; Generally true. In some big companies, employees are fully occupied with
&gt; meetings,
&gt; production support and many days off. They don't have time for development
&gt; projects longer
&gt; than a few hours. They find time for sexy new technologies such as XML and
&gt; SOA (Same Old
&gt; Architecture); they use contractors for routine enhancements, especially
&gt; on Cobol
&gt; programs.

&gt; Development is sometimes outsourced, but those projects don't use Cobol.
&gt; They use whatever
&gt; the CIO read was hot in an airline magazine.

&gt; A warning to prospective contractors: you MUST be mobile. If you're rooted
&gt; to one city by
&gt; a house, spouse or family, get a 'perm' job, don't try to be a contractor.
&gt; If you do,
&gt; here's what will happen. The first project will be in your home city. No
&gt; problem. The
&gt; second will be 50 miles away. A long commute, but doable. The third will
&gt; be 300-500 miles
&gt; away. For the first month, you'll go home every weekend. For the second
&gt; month, you'll go
&gt; home every other weekend. By the fourth month, you'll hate the job, resent
&gt; the spouse or
&gt; think this is no way to live. You'll spend a lot of time looking for a
&gt; contract back home.
&gt; When you can't find one, you'll feel trapped. Then you'll take a Robert
&gt; Half job paying
&gt; $30/hr.  I've seen it happen dozens of times. I never made that mistake; I
&gt; AM mobile.

&gt; Also, don't believe anything the pimp (contracting company) tells you,
&gt; especially the
&gt; project duration. He simply doesn't know. That's determined by the client.
&gt; The pimp will
&gt; usually say 'six months with possible extensions.' Translation: between
&gt; two months and
&gt; five years. The PM (project manager) won't say either, because the legal
&gt; department told
&gt; him to make no verbal commitments. To find out, ask the team lead for the
&gt; Go Live date. If
&gt; there isn't one, it's not a bona fide project. They might want a
&gt; sacrificial goat for the
&gt; next round of downsizing; they might want a tester or production support
&gt; person; there
&gt; might even be a kickback scam going on. I've seen all three. In any case,
&gt; they don't need
&gt; a developer, so you won't be happy.

&gt; When you are on a project, you're competing with the other contractors for
&gt; a seat on the
&gt; NEXT project, if any. Volunteer for crappy tasks no one else wants to do,
&gt; especially those
&gt; involving process (methodology). Put yourself in the PM's place. Managers
&gt; think
&gt; development is ALL about process. They think code monkeys can be hired
&gt; from outside;
&gt; workers versed in the company's process are worth keeping.
">
</POST>
<POST>
<POSTER> Robert &lt;n...@e.mail&gt; </POSTER>
<POSTDATE> 2007-11-01T00:47:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
On Wed, 31 Oct 2007 21:50:38 -0400, &quot;Sergey Kashyrin&quot; &lt;s ... @resqnet.com&gt; wrote:
&gt;&gt; There are two kinds of Unix/Cobol shops.

&gt;I'm in the third one.
&gt;I'm the only C++ (and actually any language)  programmer in the company with
&gt;a primary product written in Cobol which is still developed/enhanced over 30
&gt;years in Cobol/CICS.
&gt;Yes, I do the tricks writing callable C++ programs even under CICS (hacker's
&gt;stuff keeping the open file or socket handle in TWA or TSQ etc. which can't
&gt;be done in Cobol)
">

ANYthing can be done in Cobol .. anything a user state program can do.
It may need a non-transient 'friend' process to hold its pointers across transactions.

<QUOTE PREVIOUSPOST="
&gt;I have my own implementation of CICS (in Java/C++, of course limited number
&gt;of statement types)
">

I know a guy who wrote a FULL implementation of CICS .. 100% in Cobol.

<QUOTE PREVIOUSPOST="
&gt;which works on Win, any Unix and as400 and that's how we
&gt;see the &quot;conversion&quot; goal or the way to go.
">

Does it run each transaction in a separate thread?

Do you really think CICS is The Way To Go? &lt;Says he, sticking his finger in his throat and
gagging.&gt; I think it's what you settle for when you're limited to a non-preemptive
dispatcher.

<QUOTE PREVIOUSPOST="
&gt;It might happen eventually if OpenCobol will switch from C to C++ and to the
&gt;ideology of keeping the original Cobol names in C++ code and to the ideology
&gt;of operation overloads for the specific (read COMP-3/4/etc) data types
&gt;(that's the point where C++ and Java are getting closer).
">

You could generate macros for data names, or write a program that replaces them in the C
code.

You could use C++  overloads with explicit casts without rewriting the rest of the C
program.
</POST>
<POST>
<POSTER> &quot;Sergey Kashyrin&quot; &lt;s...@resqnet.com&gt; </POSTER>
<POSTDATE> 2007-10-31T23:59:00 </POSTDATE>
Hi Robert,

<QUOTE PREVIOUSPOST="
&gt; Does it run each transaction in a separate thread?
">

No. There are several single-thread processes which are run as an
&quot;application servers&quot; and serving the requests from the &quot;central&quot; process
(multi-process pthreads and shared memory)

<QUOTE PREVIOUSPOST="
&gt; I know a guy who wrote a FULL implementation of CICS .. 100% in Cobol.
">

:-D how many lines of code ?

<QUOTE PREVIOUSPOST="
&gt; Do you really think CICS is The Way To Go?
">

No, I don't, but the app programmers do. And it's better not to change the
way how system is developed (people are trained etc)
Who cares in what statements business logic has been coded ? As soon as it
works - nobody.

<QUOTE PREVIOUSPOST="
&gt; You could generate macros for data names, or write a program that replaces
&gt; them in the C code.
">

So far Open does not preserve the original Cobol variable names :-(

<QUOTE PREVIOUSPOST="
&gt; You could use C++  overloads with explicit casts without rewriting the
&gt; rest of the C program.
">

So far OpenCobol is &quot;C&quot; and not &quot;C++&quot; and that's the showstopper.

--
SK

<QUOTE PREVIOUSPOST="
&quot;Robert&quot; &lt;n ... @e.mail&gt; wrote in message
">

news:3okii3h4levmh91n9itpttl7g9pt3oek21@4ax.com ...

<QUOTE PREVIOUSPOST="
&gt; On Wed, 31 Oct 2007 21:50:38 -0400, &quot;Sergey Kashyrin&quot; &lt;s ... @resqnet.com&gt;
&gt; wrote:

&gt;&gt;&gt; There are two kinds of Unix/Cobol shops.

&gt;&gt;I'm in the third one.
&gt;&gt;I'm the only C++ (and actually any language)  programmer in the company
&gt;&gt;with
&gt;&gt;a primary product written in Cobol which is still developed/enhanced over
&gt;&gt;30
&gt;&gt;years in Cobol/CICS.
&gt;&gt;Yes, I do the tricks writing callable C++ programs even under CICS
&gt;&gt;(hacker's
&gt;&gt;stuff keeping the open file or socket handle in TWA or TSQ etc. which
&gt;&gt;can't
&gt;&gt;be done in Cobol)

&gt; ANYthing can be done in Cobol .. anything a user state program can do.
&gt; It may need a non-transient 'friend' process to hold its pointers across
&gt; transactions.

&gt;&gt;I have my own implementation of CICS (in Java/C++, of course limited
&gt;&gt;number
&gt;&gt;of statement types)

&gt; I know a guy who wrote a FULL implementation of CICS .. 100% in Cobol.

&gt;&gt;which works on Win, any Unix and as400 and that's how we
&gt;&gt;see the &quot;conversion&quot; goal or the way to go.

&gt; Does it run each transaction in a separate thread?

&gt; Do you really think CICS is The Way To Go? &lt;Says he, sticking his finger
&gt; in his throat and
&gt; gagging.&gt; I think it's what you settle for when you're limited to a
&gt; non-preemptive
&gt; dispatcher.

&gt;&gt;It might happen eventually if OpenCobol will switch from C to C++ and to
&gt;&gt;the
&gt;&gt;ideology of keeping the original Cobol names in C++ code and to the
&gt;&gt;ideology
&gt;&gt;of operation overloads for the specific (read COMP-3/4/etc) data types
&gt;&gt;(that's the point where C++ and Java are getting closer).

&gt; You could generate macros for data names, or write a program that replaces
&gt; them in the C
&gt; code.

&gt; You could use C++  overloads with explicit casts without rewriting the
&gt; rest of the C
&gt; program.
">
</POST>
<POST>
<POSTER> &quot;Sergey Kashyrin&quot; &lt;s...@resqnet.com&gt; </POSTER>
<POSTDATE> 2007-11-01T00:06:00 </POSTDATE>
Small comment:

<QUOTE PREVIOUSPOST="
&gt; ANYthing can be done in Cobol .. anything a user state program can do.
">

just NO.

1. Even a simple MOVE which can be done in MFocus/Open does not work on 390:
MOVE H'FFFFFFF0' TO aaa.
2. You can't move POINTER to COMP-4 (you can assume 31-bit on 390, but you
don't have a 64-bit Cobol on 390 but Open)
3. You can't move POINTER to anything but POINTER on AS400.

Sorry
--
SK
</POST>
<POST>
<POSTER> Robert &lt;n...@e.mail&gt; </POSTER>
<POSTDATE> 2007-11-01T02:56:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
On Thu, 1 Nov 2007 00:06:33 -0400, &quot;Sergey Kashyrin&quot; &lt;s ... @resqnet.com&gt; wrote:
&gt;Small comment:

&gt;&gt; ANYthing can be done in Cobol .. anything a user state program can do.

&gt;just NO.

&gt;1. Even a simple MOVE which can be done in MFocus/Open does not work on 390:
&gt;MOVE H'FFFFFFF0' TO aaa.
">

IBM manuals say it works using X, not H.

<QUOTE PREVIOUSPOST="
&gt;2. You can't move POINTER to COMP-4 (you can assume 31-bit on 390, but you
&gt;don't have a 64-bit Cobol on 390 but Open)
">

You can redefine the pointer as comp-4. Why would you want to? Do arithmetic on the
offset, not the pointer.

<QUOTE PREVIOUSPOST="
&gt;3. You can't move POINTER to anything but POINTER on AS400.
">

As it should be.
</POST>
<POST>
<POSTER> Robert &lt;n...@e.mail&gt; </POSTER>
<POSTDATE> 2007-11-01T03:14:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
On Wed, 31 Oct 2007 23:59:08 -0400, &quot;Sergey Kashyrin&quot; &lt;s ... @resqnet.com&gt; wrote:

&gt;Hi Robert,

&gt;&gt; Does it run each transaction in a separate thread?

&gt;No. There are several single-thread processes which are run as an
&gt;&quot;application servers&quot; and serving the requests from the &quot;central&quot; process
&gt;(multi-process pthreads and shared memory)
">

Since the OS is dispatching, which is the right way, there is no reason to terminate
programs between transactions. Programs can be conversational.

Be careful to avoid race conditions with shared memory.

<QUOTE PREVIOUSPOST="
&gt;&gt; I know a guy who wrote a FULL implementation of CICS .. 100% in Cobol.

&gt;:-D how many lines of code ?
">

I don't know. It took him 6-12 months, so I'd guess 50,000 lines.

<QUOTE PREVIOUSPOST="
&gt;&gt; Do you really think CICS is The Way To Go?

&gt;No, I don't, but the app programmers do. And it's better not to change the
&gt;way how system is developed (people are trained etc)
&gt;Who cares in what statements business logic has been coded ? As soon as it
&gt;works - nobody.

&gt;&gt; You could generate macros for data names, or write a program that replaces
&gt;&gt; them in the C code.

&gt;So far Open does not preserve the original Cobol variable names :-(
">

Run your program, which replaces generated names with Cobol names,  between OC and C.

<QUOTE PREVIOUSPOST="
&gt;&gt; You could use C++  overloads with explicit casts without rewriting the
&gt;&gt; rest of the C program.

&gt;So far OpenCobol is &quot;C&quot; and not &quot;C++&quot; and that's the showstopper.
">

The C compiler can do both in the same program. You talked about modifying the generated
C.
</POST>
<POST>
<POSTER> &quot;Sergey Kashyrin&quot; &lt;s...@resqnet.com&gt; </POSTER>
<POSTDATE> 2007-11-01T03:21:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&gt;&gt;No. There are several single-thread processes which are run as an
&gt;&gt;&quot;application servers&quot; and serving the requests from the &quot;central&quot; process
&gt;&gt;(multi-process pthreads and shared memory)
&gt; Since the OS is dispatching, which is the right way, there is no reason to
&gt; terminate
&gt; programs between transactions. Programs can be conversational.
">

Than your &quot;appserver&quot; simply will not alailable to the &quot;others&quot;.
I'm personally avoding converational at all.

<QUOTE PREVIOUSPOST="
&gt; Be careful to avoid race conditions with shared memory.
">

:-D
2 IBM bugs in pthread on AIX 5.2 and AS400 (even the latest)

<QUOTE PREVIOUSPOST="
&gt;&gt;&gt; I know a guy who wrote a FULL implementation of CICS .. 100% in Cobol.
&gt;&gt;:-D how many lines of code ?
&gt; I don't know. It took him 6-12 months, so I'd guess 50,000 lines.
">

:-)

<QUOTE PREVIOUSPOST="
&gt;&gt;So far Open does not preserve the original Cobol variable names :-(
&gt; Run your program, which replaces generated names with Cobol names,
&gt; between OC and C.
">

It's no that straightforward. You can't just restore :-(

<QUOTE PREVIOUSPOST="
&gt;&gt;So far OpenCobol is &quot;C&quot; and not &quot;C++&quot; and that's the showstopper.
&gt; The C compiler can do both in the same program. You talked about modifying
&gt; the generated C.
">

Yes, I'm talking about genned code

--
SK
</POST>
<POST>
<POSTER> &quot;Sergey Kashyrin&quot; &lt;s...@resqnet.com&gt; </POSTER>
<POSTDATE> 2007-11-01T03:25:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&gt;&gt;1. Even a simple MOVE which can be done in MFocus/Open does not work on
&gt;&gt;390:
&gt;&gt;MOVE H'FFFFFFF0' TO aaa.
&gt; IBM manuals say it works using X, not H.
">

It does not. i.e.
01 W PIC S9(7) COMP-4.
MOVE X'F1F2F3' TO W.
is moving the number &quot;123&quot; to W (on 390)
(Tht's not a question - that's the fact and statement)

<QUOTE PREVIOUSPOST="
&gt;&gt;2. You can't move POINTER to COMP-4 (you can assume 31-bit on 390, but you
&gt;&gt;don't have a 64-bit Cobol on 390 but Open)
&gt; You can redefine the pointer as comp-4. Why would you want to? Do
&gt; arithmetic on the
&gt; offset, not the pointer.
">

:-)) do that on as400. I'ld like to see the result.
</POST>
<POST>
<POSTER> Alistair &lt;alist...@ld50macca.demon.co.uk&gt; </POSTER>
<POSTDATE> 2007-11-01T08:29:00 </POSTDATE>
On 1 Nov, 04:47, Robert &lt;n ... @e.mail&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; &gt;Yes, I do the tricks writing callable C++ programs even under CICS (hacker's
&gt; &gt;stuff keeping the open file or socket handle in TWA or TSQ etc. which can't
&gt; &gt;be done in Cobol)

&gt; ANYthing can be done in Cobol .. anything a user state program can do.
&gt; It may need a non-transient 'friend' process to hold its pointers across transactions.
">

Not quite. I recall that a shop I worked at used an Assembler routine
to access VSAM files in a specific circumstance. I do not recall
exactly why Cobol couldn't do it but we could only achieve the desired
access using Assembler.

<QUOTE PREVIOUSPOST="
&gt; I know a guy who wrote a FULL implementation of CICS .. 100% in Cobol.
">

The last time I saw any CICS code (I mean the TP code and not a screen
program) that was written in........Cobol.

<QUOTE PREVIOUSPOST="

">
</POST>
<POST>
<POSTER> Robert &lt;n...@e.mail&gt; </POSTER>
<POSTDATE> 2007-11-01T10:39:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
On Thu, 1 Nov 2007 03:25:59 -0400, &quot;Sergey Kashyrin&quot; &lt;s ... @resqnet.com&gt; wrote:
&gt;&gt;&gt;1. Even a simple MOVE which can be done in MFocus/Open does not work on
&gt;&gt;&gt;390:
&gt;&gt;&gt;MOVE H'FFFFFFF0' TO aaa.
&gt;&gt; IBM manuals say it works using X, not H.

&gt;It does not. i.e.
&gt;01 W PIC S9(7) COMP-4.
&gt;MOVE X'F1F2F3' TO W.
&gt;is moving the number &quot;123&quot; to W (on 390)
&gt;(Tht's not a question - that's the fact and statement
">

Hex literals are alphanumeric. It should work if you redefine W as pic x(4).
</POST>
<POST>
<POSTER> &quot;William M. Klein&quot; &lt;wmkl...@nospam.netcom.com&gt; </POSTER>
<POSTDATE> 2007-11-01T13:36:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Robert&quot; &lt;n ... @e.mail&gt; wrote in message
">

news:l6pji3pgkolnveuli6gda072gj6cdcfdhq@4ax.com ...

<QUOTE PREVIOUSPOST="
&gt; On Thu, 1 Nov 2007 03:25:59 -0400, &quot;Sergey Kashyrin&quot; &lt;s ... @resqnet.com&gt; wrote:

&gt;&gt;&gt;&gt;1. Even a simple MOVE which can be done in MFocus/Open does not work on
&gt;&gt;&gt;&gt;390:
&gt;&gt;&gt;&gt;MOVE H'FFFFFFF0' TO aaa.
&gt;&gt;&gt; IBM manuals say it works using X, not H.

&gt;&gt;It does not. i.e.
&gt;&gt;01 W PIC S9(7) COMP-4.
&gt;&gt;MOVE X'F1F2F3' TO W.
&gt;&gt;is moving the number &quot;123&quot; to W (on 390)
&gt;&gt;(Tht's not a question - that's the fact and statement

&gt; Hex literals are alphanumeric. It should work if you redefine W as pic x(4).
">

Robert,
Check your Micro Focus documentation for the difference between H-literals
and X-literals.  The point of the original note was that Micro Focus supports a
hex specification for NUMERIC values that the &lt;IBM&gt; mainframe doesn't.

MOVE  H&quot;FFFF&quot;
is very different (in Micro Focus) from
Move X&quot;FFFF&quot;
</POST>
<POST>
<POSTER> &quot;Judson McClendon&quot; &lt;ju...@sunvaley0.com&gt; </POSTER>
<POSTDATE> 2007-11-01T16:25:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Robert&quot; &lt;n ... @e.mail&gt; wrote:

&gt; ANYthing can be done in Cobol .. anything a user state program can do.
&gt; It may need a non-transient 'friend' process to hold its pointers across transactions.
">

Okay, write an OS in COBOL. ;-)
--
Judson McClendon      ju ... @sunvaley0.com (remove zero)
Sun Valley Systems http://sunvaley.com
&quot;For God so loved the world that He gave His only begotten Son, that
whoever believes in Him should not perish but have everlasting life.&quot;
</POST>
<POST>
<POSTER> billg...@cs.uofs.edu (Bill Gunshannon) </POSTER>
<POSTDATE> 2007-11-01T16:38:00 </POSTDATE>
In article &lt;nDqWi.17715$u7.4 ... @bignews2.bellsouth.net&gt;,
&quot;Judson McClendon&quot; &lt;ju ... @sunvaley0.com&gt; writes:

<QUOTE PREVIOUSPOST="
&gt; &quot;Robert&quot; &lt;n ... @e.mail&gt; wrote:

&gt;&gt; ANYthing can be done in Cobol .. anything a user state program can do.
&gt;&gt; It may need a non-transient 'friend' process to hold its pointers across transactions.

&gt; Okay, write an OS in COBOL. ;-)
">

Can be done, depending on your definition of an OS.  :-)

bill

--
Bill Gunshannon          |  de-moc-ra-cy (di mok' ra see) n.  Three wolves
b ... @cs.scranton.edu     |  and a sheep voting on what's for dinner.
University of Scranton   |
Scranton, Pennsylvania   |         #include &lt;std.disclaimer.h&gt;
</POST>
<POST>
<POSTER> &quot;Judson McClendon&quot; &lt;ju...@sunvaley0.com&gt; </POSTER>
<POSTDATE> 2007-11-01T17:04:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Bill Gunshannon&quot; &lt;billg ... @cs.uofs.edu&gt; wrote:
&gt; &quot;Judson McClendon&quot; &lt;ju ... @sunvaley0.com&gt; writes:
&gt;&gt; &quot;Robert&quot; &lt;n ... @e.mail&gt; wrote:

&gt;&gt;&gt; ANYthing can be done in Cobol .. anything a user state program can do.
&gt;&gt;&gt; It may need a non-transient 'friend' process to hold its pointers across transactions.

&gt;&gt; Okay, write an OS in COBOL. ;-)

&gt; Can be done, depending on your definition of an OS.  :-)
">

An OS running with nothing else between itself and the hardware.  Write a
COBOL program that you can hit the 'Reset' or 'Load' button on the CPU
and it boot. I think you will find it 'difficult' to find a COBOL compiler
these days that will write object code in a format needed to run directly
on the hardware. There are no COBOL constructs to deal with the multitide
of tasks needed, and even calling external routines like DLLs won't help,
because those calls are designed to operate under an OS. You could write a
COBOL program to compile an OS, or write the object code for an OS, but
without a special COBOL compiler designed for the task, I don't think you
will be able to actually write even a simple OS (e.g. MS DOS) in COBOL.

I'll be delighted if someone can prove me wrong, but I don't think so. At
the vary least, it is a Non Trivial Task. :-)
--
Judson McClendon      ju ... @sunvaley0.com (remove zero)
Sun Valley Systems http://sunvaley.com
&quot;For God so loved the world that He gave His only begotten Son, that
whoever believes in Him should not perish but have everlasting life.&quot;
</POST>
<POST>
<POSTER> &quot;Pete Dashwood&quot; &lt;dashw...@removethis.enternet.co.nz&gt; </POSTER>
<POSTDATE> 2007-11-01T19:14:00 </POSTDATE>
&quot;William M. Klein&quot; &lt;wmkl ... @nospam.netcom.com&gt; wrote in message
news:c8oWi.363159$Lx1.53402@fe05.news.easynews.com ...

<QUOTE PREVIOUSPOST="
&gt; &quot;Robert&quot; &lt;n ... @e.mail&gt; wrote in message
&gt; news:l6pji3pgkolnveuli6gda072gj6cdcfdhq@4ax.com ...
&gt;&gt; On Thu, 1 Nov 2007 03:25:59 -0400, &quot;Sergey Kashyrin&quot; &lt;s ... @resqnet.com&gt;
&gt;&gt; wrote:

&gt;&gt;&gt;&gt;&gt;1. Even a simple MOVE which can be done in MFocus/Open does not work on
&gt;&gt;&gt;&gt;&gt;390:
&gt;&gt;&gt;&gt;&gt;MOVE H'FFFFFFF0' TO aaa.
&gt;&gt;&gt;&gt; IBM manuals say it works using X, not H.

&gt;&gt;&gt;It does not. i.e.
&gt;&gt;&gt;01 W PIC S9(7) COMP-4.
&gt;&gt;&gt;MOVE X'F1F2F3' TO W.
&gt;&gt;&gt;is moving the number &quot;123&quot; to W (on 390)
&gt;&gt;&gt;(Tht's not a question - that's the fact and statement

&gt;&gt; Hex literals are alphanumeric. It should work if you redefine W as pic
&gt;&gt; x(4).

&gt; Robert,
&gt;   Check your Micro Focus documentation for the difference between
&gt; H-literals and X-literals.  The point of the original note was that Micro
&gt; Focus supports a hex specification for NUMERIC values that the &lt;IBM&gt;
&gt; mainframe doesn't.

&gt;   MOVE  H&quot;FFFF&quot;
&gt;      is very different (in Micro Focus) from
&gt;   Move X&quot;FFFF&quot;
">

Interesting.

Why would they have 2 different specs for Hex literals, Bill? Isn't Hex
just... Hex? (a shorthand form of Binary).

Pete.
--
&quot;I used to write COBOL...now I can do anything.&quot;

<QUOTE PREVIOUSPOST="
- Hide quoted text - - Show quoted text -
">

<QUOTE PREVIOUSPOST="

">
</POST>
<POST>
<POSTER> &quot;Pete Dashwood&quot; &lt;dashw...@removethis.enternet.co.nz&gt; </POSTER>
<POSTDATE> 2007-11-01T19:36:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Judson McClendon&quot; &lt;ju ... @sunvaley0.com&gt; wrote in message
">

news:nDqWi.17715$u7.4000@bignews2.bellsouth.net ...

<QUOTE PREVIOUSPOST="
&gt; &quot;Robert&quot; &lt;n ... @e.mail&gt; wrote:

&gt;&gt; ANYthing can be done in Cobol .. anything a user state program can do.
&gt;&gt; It may need a non-transient 'friend' process to hold its pointers across
&gt;&gt; transactions.

&gt; Okay, write an OS in COBOL. ;-)
">

I believe that COULD be done. The question is why you would want to.

And you would probably call other facilities from the COBOL that might not
be actually written in COBOL. (But that would be to save time, NOT because
they COULDN'T be written in COBOL.

1. An OS executes machine code. (Assume it uses or needs the entire
instruction set implemented on the platform.)
2. COBOL generates machine code. (And can be &quot;encouraged&quot; to generate any
machine code you want.. therefore, the entire instruction set)

Therefore, it follows, at least theoretically, that an OS COULD be written
in COBOL.

(I had a similar argument to this one about thirty years ago. I ended up
writing a program that used ONLY BOOLEAN Instructions (AND, OR, NOT, and
XOR) to read cards, perform arithmetic, and print results. As binary is all
the machine can recognise, provided you can program binary, you can do
anything. COBOL supports Hex Literals and has access to BOOLEAN bit wise
operations (through extensions in certain implementations). In STANDARD
COBOL, while it may be more difficult, I'm still not convinced it is
impossible... :-) It comes down to whether or not you can create code that
represents the entire instruction set. If you can manipulate binary, then
you can. Most people recognise that COBOL is not GOOD at manipulating
binary, so it wouldn't be the first choice for writing an OS. But that
doesn't mean it CAN'T do it... :-))

Pete.
--
&quot;I used to write COBOL...now I can do anything.&quot;

<QUOTE PREVIOUSPOST="
&gt; Judson McClendon      ju ... @sunvaley0.com (remove zero)
&gt; Sun Valley Systems http://sunvaley.com
&gt; &quot;For God so loved the world that He gave His only begotten Son, that
&gt; whoever believes in Him should not perish but have everlasting life.&quot;
">
</POST>
<POST>
<POSTER> Robert &lt;n...@e.mail&gt; </POSTER>
<POSTDATE> 2007-11-01T20:54:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
On Thu, 1 Nov 2007 15:25:56 -0500, &quot;Judson McClendon&quot; &lt;ju ... @sunvaley0.com&gt; wrote:
&gt;&quot;Robert&quot; &lt;n ... @e.mail&gt; wrote:

&gt;&gt; ANYthing can be done in Cobol .. anything a user state program can do.
&gt;&gt; It may need a non-transient 'friend' process to hold its pointers across transactions.

&gt;Okay, write an OS in COBOL. ;-)
">

It would be no different from writing an OS such as Linux in C. The machine specific stuff
would have to be in assembly language, but good design would isolate that stuff anyway.

Look at the Linux kernel to see how little assembly language it uses.

Large pieces of Burroughs' MCPV, which ran on B3500/4700, were written in Cobol. I rewrote
its non-trivial communication module 100% in Cobol, because the one delivered wasn't
adequate for the first TeleChek (check approval) system. In today's terminology it was
equivalent to SIP, TCP and IP. It started and stopped transaction processes; packetized,
prioritized and biffered messages; did error detection/recovery and routing. It was ISO
layers 5 Session, 4 Transport and 3 Network (we didn't use routers in those days).

Early Cobol compilers had inline assembly language that was equivalent to GCC's 'AT&amp;T
style' assembly. The syntax was ENTER ASSEMBLY LANGUAGE, followed by ENTER COBOL.
Burroughs had a nice implementation of it. One could refer to Cobol data and paragraph
names. I think it even supported qualification. I seldom needed that feature. When I did
it was usually for pointers, which are now supported by Cobol.
</POST>
</TEXT>
</BODY>
</DOC>
