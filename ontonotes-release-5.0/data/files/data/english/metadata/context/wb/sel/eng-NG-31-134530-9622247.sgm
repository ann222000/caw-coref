<DOC>
<DOCID> eng-NG-31-134530-9622247 </DOCID>
<DOCTYPE SOURCE="usenet"> USENET TEXT </DOCTYPE>
<DATETIME> 2007-12-19T22:34:00 </DATETIME>
<BODY>
<HEADLINE>
Chess in CAL
</HEADLINE>
<TEXT>
<POST>
<POSTER> Nik &lt;nshay...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-12-19T22:34:00 </POSTDATE>
Another little CAL program, this time without an IO monad:

http://home.doramail.com/ns999/chess.html

Nik Shaylor.
</POST>
<POST>
<POSTER> Joseph Wong &lt;jhtw...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-12-20T01:22:00 </POSTDATE>
Hi Nik,

This chess game is really cool! And I believe it's another CAL first -
first CAL-based AI that plays against a human.

I noticed that you're bundling images in the JAR that are loaded
directly by the SOE graphics library through the Java resource
mechanism. I suppose to support this the standalone JAR builder should
be extended to allow arbitrary files specified by the user to be added
to the JAR as well.

Another possibility is to hook up the graphics library with the CAL
resource mechanism - files under the CAL_Resources directory and
organized on a per-module basis are understood by the Quark framework
and are automatically handled by the standalone JAR builder and
retrievable via the Cal.Core.Resource module.

Cheers,
Joseph

p.s. next on my wish list for would be Breakout or maybe Space
Invaders ;-)

On Dec 19, 7:34 pm, Nik &lt;nshay ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Another little CAL program, this time without an IO monad:

&gt; http://home.doramail.com/ns999/chess.html

&gt; Nik Shaylor.
">
</POST>
<POST>
<POSTER> Nik &lt;nshay...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-12-20T11:34:00 </POSTDATE>
Hi Joseph,

On Dec 19, 10:22 pm, Joseph Wong &lt;jhtw ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Hi Nik,

&gt; This chess game is really cool! And I believe it's another CAL first -
&gt; first CAL-based AI that plays against a human.

&gt; I noticed that you're bundling images in the JAR that are loaded
&gt; directly by the SOE graphics library through the Java resource
&gt; mechanism. I suppose to support this the standalone JAR builder should
&gt; be extended to allow arbitrary files specified by the user to be added
&gt; to the JAR as well.
">

It wouldn't hurt, but it is not very difficult to add these files with
the jar command as a part of some build process.

<QUOTE PREVIOUSPOST="
&gt; Another possibility is to hook up the graphics library with the CAL
&gt; resource mechanism - files under the CAL_Resources directory and
&gt; organized on a per-module basis are understood by the Quark framework
&gt; and are automatically handled by the standalone JAR builder and
&gt; retrievable via the Cal.Core.Resource module.
">

It looks like I could have used Cal.Core.Resource, but then I would
have had to write something that would take the input stream and
converted it into an image. In fact what I did was just a quick and
dirty API that would read and display an image of a certain name. The
question may be whether you expect people to write CAL applications
without having to write application specific Java code, but given the
huge Java API this may often be an inevitable.

Apart from this the main thing I think the standalone JAR builder
could benefit from for applets would be:

1, To support entry points other then main(). I have not looked into
this much, and may be I've missed something, but the only way I could
see to get the applets started was to use the main() entry point
passing a string with which I could retrieve the Applet object in
native Java code.

2, Somehow to prevent calls to System.getPropery when the keys are not
allowed in an applet context. I did this by hacking Proguard to change
all the calls to System.getPropery to become calls to some other
method where I can just simply return null.

But I can see that CAL applet support may not be a very pressing
issue.

Cheers,

Nik
</POST>
</TEXT>
</BODY>
</DOC>
