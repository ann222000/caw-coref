<DOC>
<DOCID> eng-NG-31-135602-8600291 </DOCID>
<DOCTYPE SOURCE="usenet"> USENET TEXT </DOCTYPE>
<DATETIME> 2007-09-10T04:38:00 </DATETIME>
<BODY>
<HEADLINE>
Resources for interpreter/VM design, stack-based languages, etc?
</HEADLINE>
<TEXT>
<POST>
<POSTER> pineapple.l...@yahoo.com </POSTER>
<POSTDATE> 2007-09-10T04:38:00 </POSTDATE>
Hi - figured this would be a better place to post for this than most
(spent 45 minutes trying to find a comp.lang.interpreter-design or
something to that effect, but had no success).

I'd like some online resources for general language design, but in
particular how to implement (write) a &quot;forth-type&quot; language
(interpreted, stack-based, etc).  If forth contains a so-called VM,
maybe that too.

A usenet group would be good, also any online books or publications,
etc.

Thanks so much!
</POST>
<POST>
<POSTER> geom...@gmail.com </POSTER>
<POSTDATE> 2007-09-10T06:16:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
pineapple.l ... @yahoo.com wrote:
&gt; Hi - figured this would be a better place to post for this than most
&gt; (spent 45 minutes trying to find a comp.lang.interpreter-design or
&gt; something to that effect, but had no success).

&gt; I'd like some online resources for general language design, but in
&gt; particular how to implement (write) a &quot;forth-type&quot; language
&gt; (interpreted, stack-based, etc).  If forth contains a so-called VM,
&gt; maybe that too.

&gt; A usenet group would be good, also any online books or publications,
&gt; etc.

&gt; Thanks so much!
">

http://www.zetetics.com/bj/papers/
http://www.figuk.plus.com/byof.htm
http://www.ece.cmu.edu/~koopman/stack_computers/contents.html

And of course there's the source of the many open source Forths.
</POST>
<POST>
<POSTER> an...@mips.complang.tuwien.ac.at (Anton Ertl) </POSTER>
<POSTDATE> 2007-09-10T11:56:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
pineapple.l ... @yahoo.com writes:
&gt;Hi - figured this would be a better place to post for this than most
&gt;(spent 45 minutes trying to find a comp.lang.interpreter-design or
&gt;something to that effect, but had no success).
">

There is a not very active mailing list
&lt; http://compilers.iecc.com/comparch/article/99-11-018 &gt;.

<QUOTE PREVIOUSPOST="
&gt;I'd like some online resources for general language design, but in
&gt;particular how to implement (write) a &quot;forth-type&quot; language
&gt;(interpreted, stack-based, etc).  If forth contains a so-called VM,
&gt;maybe that too.

&gt;A usenet group would be good,
">

In addition to clf, for questions beyond Forth comp.compilers
(moderated) would be an appropriate Usenet group.

<QUOTE PREVIOUSPOST="
&gt; also any online books or publications,
">

I have published a lot on this topic.  Good places to start and for
finding additional references might be:

http://www.complang.tuwien.ac.at/papers/ertl+02.ps.gz
http://www.complang.tuwien.ac.at/papers/ertl%26gregg05.ps.gz

- anton
--
M. Anton Ertl http://www.complang.tuwien.ac.at/anton/home.html
comp.lang.forth FAQs: http://www.complang.tuwien.ac.at/forth/faq/toc.html
New standard: http://www.forth200x.org/forth200x.html
EuroForth 2007: http://www.complang.tuwien.ac.at/anton/euroforth2007/
</POST>
<POST>
<POSTER> Dmitry Ponyatov &lt;fo...@km.ru&gt; </POSTER>
<POSTDATE> 2007-09-10T13:58:00 </POSTDATE>
See http://uFos.cvs.sf.net -- compiler in two pages of FORTH code &amp; VM
in C(++), can be rewritten from scratch in one hour for any system in
any programming language. Version without multitasking is much much
simpler.
</POST>
<POST>
<POSTER> &quot;sl...@jedit.org&quot; &lt;sl...@jedit.org&gt; </POSTER>
<POSTDATE> 2007-09-10T14:30:00 </POSTDATE>
On Sep 10, 4:38 am, pineapple.l ... @yahoo.com wrote:

<QUOTE PREVIOUSPOST="
&gt; Hi - figured this would be a better place to post for this than most
&gt; (spent 45 minutes trying to find a comp.lang.interpreter-design or
&gt; something to that effect, but had no success).

&gt; I'd like some online resources for general language design, but in
&gt; particular how to implement (write) a &quot;forth-type&quot; language
&gt; (interpreted, stack-based, etc).  If forth contains a so-called VM,
&gt; maybe that too.

&gt; A usenet group would be good, also any online books or publications,
&gt; etc.

&gt; Thanks so much!
">

Hi,

You should be aware that classical Forth implementation techniques
such as bytecode, ITC, DTC and STC are about 30 years behind the state
of the art in language implementation. Unless your target is a Z80
CPU, I suggest reading a book such as &quot;Engineering a Compiler&quot; by
Keith D. Cooper and Linda Torczon, rather that studying Forth
implementation guides.

Slava
</POST>
<POST>
<POSTER> Elizabeth D Rather &lt;erather...@forth.com&gt; </POSTER>
<POSTDATE> 2007-09-10T16:04:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
sl ... @jedit.org wrote:
&gt; On Sep 10, 4:38 am, pineapple.l ... @yahoo.com wrote:
&gt;&gt; Hi - figured this would be a better place to post for this than most
&gt;&gt; (spent 45 minutes trying to find a comp.lang.interpreter-design or
&gt;&gt; something to that effect, but had no success).

&gt;&gt; I'd like some online resources for general language design, but in
&gt;&gt; particular how to implement (write) a &quot;forth-type&quot; language
&gt;&gt; (interpreted, stack-based, etc).  If forth contains a so-called VM,
&gt;&gt; maybe that too.

&gt;&gt; A usenet group would be good, also any online books or publications,
&gt;&gt; etc.

&gt;&gt; Thanks so much!

&gt; Hi,

&gt; You should be aware that classical Forth implementation techniques
&gt; such as bytecode, ITC, DTC and STC are about 30 years behind the state
&gt; of the art in language implementation. Unless your target is a Z80
&gt; CPU, I suggest reading a book such as &quot;Engineering a Compiler&quot; by
&gt; Keith D. Cooper and Linda Torczon, rather that studying Forth
&gt; implementation guides.
">

The current state-of-the-art Forth implementations have also moved
beyond the &quot;classical&quot; techniques.  In fact, contemporary optimizing
Forth compilers will produce a better (significantly faster, and
probably also smaller) result even on that Z80.  So, I'd encourage the
OP to look at several current Forth implementations and read their
documentation (in addition to hanging out here and perhaps posing some
specific questions and objectives).

Cheers,
Elizabeth

--
==================================================
Elizabeth D. Rather   (US &amp; Canada)   800-55-FORTH
FORTH Inc.                         +1 310-491-3356
5155 W. Rosecrans Ave. #1018  Fax: +1 310-978-9454
Hawthorne, CA 90250
http://www.forth.com

&quot;Forth-based products and Services for real-time
applications since 1973.&quot;
==================================================
</POST>
<POST>
<POSTER> &quot;sl...@jedit.org&quot; &lt;sl...@jedit.org&gt; </POSTER>
<POSTDATE> 2007-09-10T17:02:00 </POSTDATE>
On Sep 10, 4:04 pm, Elizabeth D Rather &lt;erather ... @forth.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; The current state-of-the-art Forth implementations have also moved
&gt; beyond the &quot;classical&quot; techniques.
">

Indeed. Unfortunately for folks like the OP looking to learn, state of
the art Forths all seem to be closed source. ;-)

Slava
</POST>
<POST>
<POSTER> hel...@gmail.com </POSTER>
<POSTDATE> 2007-09-10T17:14:00 </POSTDATE>
On Sep 10, 11:02 pm, &quot;sl ... @jedit.org&quot; &lt;sl ... @jedit.org&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Sep 10, 4:04 pm, Elizabeth D Rather &lt;erather ... @forth.com&gt; wrote:

&gt; &gt; The current state-of-the-art Forth implementations have also moved
&gt; &gt; beyond the &quot;classical&quot; techniques.

&gt; Indeed. Unfortunately for folks like the OP looking to learn, state of
&gt; the art Forths all seem to be closed source. ;-)
">

Hehe ;) Leave the professionals something to eat. Vmgen of Gforth or
the 4p JIT or a completely native Forth like Reva might be enough for
learning. Or?

-Helmar

<QUOTE PREVIOUSPOST="
&gt; Slava
">
</POST>
<POST>
<POSTER> &quot;sl...@jedit.org&quot; &lt;sl...@jedit.org&gt; </POSTER>
<POSTDATE> 2007-09-10T17:19:00 </POSTDATE>
On Sep 10, 5:14 pm, hel ... @gmail.com wrote:

<QUOTE PREVIOUSPOST="
&gt; Hehe ;) Leave the professionals something to eat. Vmgen of Gforth or
&gt; the 4p JIT or a completely native Forth like Reva might be enough for
&gt; learning. Or?
">

I don't know about 4p, but Gforth and Reva's optimizing compilers are
not nearly as sophisticated as, say, gcc, LLVM, MLton, SBCL, Larceny
Scheme, or Java HotSpot.

Slava
</POST>
<POST>
<POSTER> hel...@gmail.com </POSTER>
<POSTDATE> 2007-09-10T17:26:00 </POSTDATE>
On Sep 10, 11:19 pm, &quot;sl ... @jedit.org&quot; &lt;sl ... @jedit.org&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Sep 10, 5:14 pm, hel ... @gmail.com wrote:

&gt; &gt; Hehe ;) Leave the professionals something to eat. Vmgen of Gforth or
&gt; &gt; the 4p JIT or a completely native Forth like Reva might be enough for
&gt; &gt; learning. Or?

&gt; I don't know about 4p, but Gforth and Reva's optimizing compilers are
&gt; not nearly as sophisticated as, say, gcc, LLVM, MLton, SBCL, Larceny
&gt; Scheme, or Java HotSpot.
">

http://maschenwerk.de/4p/ it uses a very simple code unrolling scheme
and not half as sopisticated as HelFORTH (you'll find on above link,
but I dont work much on it these days) but reaches good speed. 4p with
JIT is also very jung, so I did not really spend time on optimization,
I simply wanted it to run as JIT first ;)
You might notice some benchmarks: http://maschenwerk.de/4p/benchmarks.html
- I know, it's surely not comparable to iForth, but for example with
LLVM you dont get a Forth that fast (at least not that easy - I'm
working on this for 4p 2.0).

Regards,
-Helmar
</POST>
<POST>
<POSTER> pineapple.l...@yahoo.com </POSTER>
<POSTDATE> 2007-09-11T13:40:00 </POSTDATE>
Thanks very much for all the help.

I will be experimenting with some ideas I have on a stack-based
language, and figured &quot;What better place to look for examples other
than the fine language Forth?&quot;

Initially this will be prototyping, proof of concept, and &quot;playing
around,&quot; so bleeding-edge and state of the art is not required, and
indeed is not wanted.  &quot;Classical techniques&quot; are fine.  Correct me if
I am wrong, but I believe a stack-based language (if following a Forth
example) should eliminate most of the complexity with parsing and
semantical analysis?  The approach has other desirable characteristics
I am looking for as well (RPN syntax, etc).

I considered taking some minimal Forth, and simply &quot;converting&quot; it (by
writing my own words) into my own language, so to speak, by defining
my own words.  This has some advantages, but some disadvantages as
well that I won't go into, so I'm looking at other options (I once did
a C compiler for a project in college, so I'm not totally in the dark
here, but it was certainly a while back).

If this ends up being a desirable approach, is there a particular free
Forth someone would recommend?  ANSI standards and what have you are
not important, and even performance at this stage is not, but
flexibility is.  Certainly something that would let me design my own
custom data structures easily.  Also, I'm interested in not having
separate lines or statements delimited by a character (say a period,
semicolon, etc).  Not sure if any Forths are flexible enough for me to
specify those kinds of semantics?

Anyway, this seems like a friendly bunch of folks.  Thanks again for
the help, and if you have anything to say on the above, by all means
let me hear it.
</POST>
<POST>
<POSTER> &quot;sl...@jedit.org&quot; &lt;sl...@jedit.org&gt; </POSTER>
<POSTDATE> 2007-09-11T14:51:00 </POSTDATE>
On Sep 11, 1:40 pm, pineapple.l ... @yahoo.com wrote:

<QUOTE PREVIOUSPOST="
&gt; Correct me if
&gt; I am wrong, but I believe a stack-based language (if following a Forth
&gt; example) should eliminate most of the complexity with parsing and
&gt; semantical analysis?
">

Parsing, yes. Code generation, no.

Slava
</POST>
<POST>
<POSTER> Elizabeth D Rather &lt;erather...@forth.com&gt; </POSTER>
<POSTDATE> 2007-09-11T16:22:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
pineapple.l ... @yahoo.com wrote:
&gt; Thanks very much for all the help.

&gt; I will be experimenting with some ideas I have on a stack-based
&gt; language, and figured &quot;What better place to look for examples other
&gt; than the fine language Forth?&quot;
&gt; ...
&gt; I considered taking some minimal Forth, and simply &quot;converting&quot; it (by
&gt; writing my own words) into my own language, so to speak, by defining
&gt; my own words.  This has some advantages, but some disadvantages as
&gt; well that I won't go into, so I'm looking at other options (I once did
&gt; a C compiler for a project in college, so I'm not totally in the dark
&gt; here, but it was certainly a while back).

&gt; If this ends up being a desirable approach, is there a particular free
&gt; Forth someone would recommend?  ANSI standards and what have you are
&gt; not important, and even performance at this stage is not, but
&gt; flexibility is.
">

I'm not sure how much you know about Forth, or how much you wish to
know.  You may find it advantageous to start with a full-functioned,
well-documented Forth and write some code in it before launching into
your own language project.  There are a number of free Forths around,
including gForth (recommended for *nix platforms) and free evaluation
copies of the commercial Forths (my company's SwiftForth and MPE's VFX,
for example).

<QUOTE PREVIOUSPOST="
&gt; Certainly something that would let me design my own
&gt; custom data structures easily.
">

Well, that's one of the signal advantages of any Forth.

<QUOTE PREVIOUSPOST="
&gt; Also, I'm interested in not having
&gt; separate lines or statements delimited by a character (say a period,
&gt; semicolon, etc).  Not sure if any Forths are flexible enough for me to
&gt; specify those kinds of semantics?
">

I don't know of any Forth that requires line delimiters (beyond the
simple function of being able to read a file line by line).  The
language itself ignores lines.

<QUOTE PREVIOUSPOST="
&gt; Anyway, this seems like a friendly bunch of folks.  Thanks again for
&gt; the help, and if you have anything to say on the above, by all means
&gt; let me hear it.
">

Enjoy!

Cheers,
Elizabeth

--
==================================================
Elizabeth D. Rather   (US &amp; Canada)   800-55-FORTH
FORTH Inc.                         +1 310-491-3356
5155 W. Rosecrans Ave. #1018  Fax: +1 310-978-9454
Hawthorne, CA 90250
http://www.forth.com

&quot;Forth-based products and Services for real-time
applications since 1973.&quot;
==================================================
</POST>
<POST>
<POSTER> hel...@gmail.com </POSTER>
<POSTDATE> 2007-09-11T16:29:00 </POSTDATE>
On Sep 11, 10:22 pm, Elizabeth D Rather &lt;erather ... @forth.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; The
&gt; language itself ignores lines.
">

No, not completely. Everywhere where there is something like

( C: &quot;&lt;spaces&gt;name&quot; -- ... )

in the standard, ANS-Forth does not ignore lines.

Regards,
-Helmar
</POST>
<POST>
<POSTER> Bruce McFarling &lt;agil...@netscape.net&gt; </POSTER>
<POSTDATE> 2007-09-11T17:00:00 </POSTDATE>
On Sep 11, 4:29 pm, hel ... @gmail.com wrote:

<QUOTE PREVIOUSPOST="
&gt; On Sep 11, 10:22 pm, Elizabeth D Rather &lt;erather ... @forth.com&gt; wrote:

&gt; &gt; The
&gt; &gt; language itself ignores lines.

&gt; No, not completely. Everywhere where there is something like

&gt; ( C: &quot;&lt;spaces&gt;name&quot; -- ... )

&gt; in the standard, ANS-Forth does not ignore lines.
">

That depends on whether the source is the command line, file, or
block.

But, yes, while a line is not a semantic unit, a semantic unit
consisting of a parsing word and what it parses must normally be on
the same line.
</POST>
<POST>
<POSTER> Jean-François Michaud &lt;come...@comcast.net&gt; </POSTER>
<POSTDATE> 2007-09-12T08:55:00 </POSTDATE>
On Sep 10, 2:14 pm, hel ... @gmail.com wrote:

<QUOTE PREVIOUSPOST="
&gt; On Sep 10, 11:02 pm, &quot;sl ... @jedit.org&quot; &lt;sl ... @jedit.org&gt; wrote:

&gt; &gt; On Sep 10, 4:04 pm, Elizabeth D Rather &lt;erather ... @forth.com&gt; wrote:

&gt; &gt; &gt; The current state-of-the-art Forth implementations have also moved
&gt; &gt; &gt; beyond the &quot;classical&quot; techniques.

&gt; &gt; Indeed. Unfortunately for folks like the OP looking to learn, state of
&gt; &gt; the art Forths all seem to be closed source. ;-)

&gt; Hehe ;) Leave the professionals something to eat. Vmgen of Gforth or
&gt; the 4p JIT or a completely native Forth like Reva might be enough for
&gt; learning. Or?

&gt; -Helmar

&gt; &gt; Slava
">

Bah, they can still eat, they just need to switch towards the newer
business models. Information can't be owned. It is fundamentally
counter productive to &quot;own&quot; software and information in general. It
promotes elitism and closed circles instead of liberated/open
circulation of information and potential co-operation. I strongly
prefer free circulation of information and potential co-operation
with, for example, a service oriented business model centered around
freely circulating information. It seems like everybody can benefit
from such a model.

Regards
Jean-Francois Michaud
</POST>
<POST>
<POSTER> Bruce McFarling &lt;agil...@netscape.net&gt; </POSTER>
<POSTDATE> 2007-09-12T10:06:00 </POSTDATE>
On Sep 12, 8:55 am, Jean-François Michaud &lt;come ... @comcast.net&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Bah, they can still eat, they just need to switch towards the newer
&gt; business models. Information can't be owned. It is fundamentally
&gt; counter productive to &quot;own&quot; software and information in general. It
&gt; promotes elitism and closed circles instead of liberated/open
&gt; circulation of information and potential co-operation. I strongly
&gt; prefer free circulation of information and potential co-operation
&gt; with, for example, a service oriented business model centered around
&gt; freely circulating information. It seems like everybody can benefit
&gt; from such a model.
">

Precisely. Its getting a massive windfall and retiring at the age of
35 to an island you bought in the Caribbean that becomes for all
practical purposes impossible. However, like all &quot;lottery&quot; style
incentives, it was never very likely in the first place.
</POST>
<POST>
<POSTER> Brad Eckert &lt;nospaambr...@tinyboot.com&gt; </POSTER>
<POSTDATE> 2007-09-12T11:25:00 </POSTDATE>
On Sep 11, 1:22 pm, Elizabeth D Rather &lt;erather ... @forth.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; I'm not sure how much you know about Forth, or how much you wish to
&gt; know.  You may find it advantageous to start with a full-functioned,
&gt; well-documented Forth and write some code in it before launching into
&gt; your own language project.
">

Having written more Forths than I had any business writing, I have to
agree with Elizabeth. You see that Forth is cool so you want to build
your own, but that will not teach you Forth programming. It will teach
you the semantics of the words and implementation details, but you can
learn that in the course of using a real Forth.

Implementing a Forth and writing programs in Forth are two totally
different skills, as you will probably notice by the way it makes your
brain feel when you try writing Forth programs after years of Algol
style programming.

My recommendation is to get the best Forth you can find and study the
sample programs that come with it. Wait until you've written some
Forth programs, then implement. Forth VMs are great stuff, but the
power of Forth goes deeper than the VM.

Brad
</POST>
<POST>
<POSTER> hel...@gmail.com </POSTER>
<POSTDATE> 2007-09-12T13:47:00 </POSTDATE>
On Sep 12, 2:55 pm, Jean-François Michaud &lt;come ... @comcast.net&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Sep 10, 2:14 pm, hel ... @gmail.com wrote:

&gt; &gt; On Sep 10, 11:02 pm, &quot;sl ... @jedit.org&quot; &lt;sl ... @jedit.org&gt; wrote:

&gt; &gt; &gt; On Sep 10, 4:04 pm, Elizabeth D Rather &lt;erather ... @forth.com&gt; wrote:

&gt; &gt; &gt; &gt; The current state-of-the-art Forth implementations have also moved
&gt; &gt; &gt; &gt; beyond the &quot;classical&quot; techniques.

&gt; &gt; &gt; Indeed. Unfortunately for folks like the OP looking to learn, state of
&gt; &gt; &gt; the art Forths all seem to be closed source. ;-)

&gt; &gt; Hehe ;) Leave the professionals something to eat. Vmgen of Gforth or
&gt; &gt; the 4p JIT or a completely native Forth like Reva might be enough for
&gt; &gt; learning. Or?

&gt; &gt; -Helmar

&gt; &gt; &gt; Slava

&gt; Bah, they can still eat, they just need to switch towards the newer
&gt; business models.
">

Business models are developed as business goes. Not everybody can
found something that's bought by Google later. I think you
misunderstand something completely about freedom. It's also freedom to
be free how to organize a business.

<QUOTE PREVIOUSPOST="
&gt; Information can't be owned.
">

Sure it can be &quot;owned&quot;. You've better to explain what you mean with
&quot;owned&quot;. An information I did not publish is not in public if I'm the
only one that has this information. You forget that information needs
to be communicated before being in public.

<QUOTE PREVIOUSPOST="
&gt; It is fundamentally
&gt; counter productive to &quot;own&quot; software and information in general.
">

As I know commercial software developers you get the source if you
want it. Maybe you do not get it for inclusion into own (maybe free)
products, but you get it.

<QUOTE PREVIOUSPOST="
&gt; It
&gt; promotes elitism and closed circles instead of liberated/open
&gt; circulation of information and potential co-operation.
">

Maybe. Communication does the same. Or academia does the same. As I
told for information it needs communication or receipients to be of
any influence if some program exists in &quot;wild&quot; and in source.

<QUOTE PREVIOUSPOST="
&gt; I strongly
&gt; prefer free circulation of information and potential co-operation
&gt; with, for example, a service oriented business model centered around
&gt; freely circulating information. It seems like everybody can benefit
&gt; from such a model.
">

No. You see big companies making money with spare time of developers.
That's all. That's not freedom. That's a new kind of internal
feudalism.

Kind regards,
-Helmar
</POST>
<POST>
<POSTER> pineapple.l...@yahoo.com </POSTER>
<POSTDATE> 2007-09-13T13:23:00 </POSTDATE>
&lt;&lt;That's not freedom. That's a new kind of internal
feudalism. &gt;&gt;

I couldn't agree more.  As a developer I never understood why other
developers thought they should give away their work for free.  Oil
companies don't give gasoline away for free.  Car companies don't give
cars away for free.  Lawyers and doctors and accountants don't work
for free.  But for some reason, software developers don't value
themselves or their work enough to demand compensation for it.  This
kind of philosophy actually has the potential to ruin the profession.
</POST>
<POST>
<POSTER> Cesar Rabak &lt;csra...@yahoo.com.br&gt; </POSTER>
<POSTDATE> 2007-09-13T15:43:00 </POSTDATE>
pineapple.l ... @yahoo.com escreveu:

<QUOTE PREVIOUSPOST="
&gt; &lt;&lt;That's not freedom. That's a new kind of internal
&gt; feudalism. &gt;&gt;

&gt; I couldn't agree more.  As a developer I never understood why other
&gt; developers thought they should give away their work for free.  Oil
&gt; companies don't give gasoline away for free.  Car companies don't give
&gt; cars away for free.  Lawyers and doctors and accountants don't work
&gt; for free.  But for some reason, software developers don't value
&gt; themselves or their work enough to demand compensation for it.  This
&gt; kind of philosophy actually has the potential to ruin the profession.
">

Two toughts:

If the only reason a person would work (give its time) was money, the
begging question would be: how much do you earn to post here?

Why in the Earth should software development continue to be a
profession, and (say) a knowledge that all persons interested in
computers can exercise?
</POST>
<POST>
<POSTER> hel...@gmail.com </POSTER>
<POSTDATE> 2007-09-13T16:44:00 </POSTDATE>
On Sep 13, 9:43 pm, Cesar Rabak &lt;csra ... @yahoo.com.br&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; pineapple.l ... @yahoo.com escreveu:&gt; &lt;&lt;That's not freedom. That's a new kind of internal
&gt; &gt; feudalism. &gt;&gt;

&gt; &gt; I couldn't agree more.  As a developer I never understood why other
&gt; &gt; developers thought they should give away their work for free.  Oil
&gt; &gt; companies don't give gasoline away for free.  Car companies don't give
&gt; &gt; cars away for free.  Lawyers and doctors and accountants don't work
&gt; &gt; for free.  But for some reason, software developers don't value
&gt; &gt; themselves or their work enough to demand compensation for it.  This
&gt; &gt; kind of philosophy actually has the potential to ruin the profession.

&gt; Two toughts:

&gt; If the only reason a person would work (give its time) was money, the
&gt; begging question would be: how much do you earn to post here?
">

Are you the authorities? Maybe posting in in c.l.f gets expensive some
day. I think posting here is done by persons that think posting here
makes sense - not money.

<QUOTE PREVIOUSPOST="
&gt; Why in the Earth should software development continue to be a
&gt; profession, and (say) a knowledge that all persons interested in
&gt; computers can exercise?
">

Why the hell there should be any professions in future? We all can
read the internet. There is no need for professions anymore. Maybe
some hands get lost while sawing something from wood, but that's the
kind of losses we all would like to bring if therefore there is no
more profession anymore??!

-Helmar
</POST>
<POST>
<POSTER> Cesar Rabak &lt;csra...@yahoo.com.br&gt; </POSTER>
<POSTDATE> 2007-09-13T17:13:00 </POSTDATE>
hel ... @gmail.com escreveu:

<QUOTE PREVIOUSPOST="
&gt; On Sep 13, 9:43 pm, Cesar Rabak &lt;csra ... @yahoo.com.br&gt; wrote:
&gt;&gt; pineapple.l ... @yahoo.com escreveu:&gt; &lt;&lt;That's not freedom. That's a new kind of internal
&gt;&gt;&gt; feudalism. &gt;&gt;
&gt;&gt;&gt; I couldn't agree more.  As a developer I never understood why other
&gt;&gt;&gt; developers thought they should give away their work for free.  Oil
&gt;&gt;&gt; companies don't give gasoline away for free.  Car companies don't give
&gt;&gt;&gt; cars away for free.  Lawyers and doctors and accountants don't work
&gt;&gt;&gt; for free.  But for some reason, software developers don't value
&gt;&gt;&gt; themselves or their work enough to demand compensation for it.  This
&gt;&gt;&gt; kind of philosophy actually has the potential to ruin the profession.
&gt;&gt; Two toughts:

&gt;&gt; If the only reason a person would work (give its time) was money, the
&gt;&gt; begging question would be: how much do you earn to post here?

&gt; Are you the authorities?
">

No! Why? Do you fear them? ;-)

<QUOTE PREVIOUSPOST="
&gt; Maybe posting in in c.l.f gets expensive some
&gt; day. I think posting here is done by persons that think posting here
&gt; makes sense - not money.
">

Yes. The first point I was willing to make: not all programming in the
World has to be made for making money.

<QUOTE PREVIOUSPOST="
&gt;&gt; Why in the Earth should software development continue to be a
&gt;&gt; profession, and (say) a knowledge that all persons interested in
&gt;&gt; computers can exercise?

&gt; Why the hell there should be any professions in future?
">

Probably a good question to make, but too far reaching to answer, but if
we restrict to computer programming we could arrive to some interesting
conclusions...

<QUOTE PREVIOUSPOST="
&gt; We all can
&gt; read the internet. There is no need for professions anymore. Maybe
&gt; some hands get lost while sawing something from wood, but that's the
&gt; kind of losses we all would like to bring if therefore there is no
&gt; more profession anymore??!
">

I cannot grok the connection between 'internet' and 'sawing something
from wood' so can comment.

Regards,

--
Cesar Rabak
</POST>
<POST>
<POSTER> hel...@gmail.com </POSTER>
<POSTDATE> 2007-09-13T17:19:00 </POSTDATE>
On Sep 13, 11:13 pm, Cesar Rabak &lt;csra ... @yahoo.com.br&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; hel ... @gmail.com escreveu:

&gt; &gt; On Sep 13, 9:43 pm, Cesar Rabak &lt;csra ... @yahoo.com.br&gt; wrote:
&gt; &gt;&gt; pineapple.l ... @yahoo.com escreveu:&gt; &lt;&lt;That's not freedom. That's a new kind of internal
&gt; &gt;&gt;&gt; feudalism. &gt;&gt;
&gt; &gt;&gt;&gt; I couldn't agree more.  As a developer I never understood why other
&gt; &gt;&gt;&gt; developers thought they should give away their work for free.  Oil
&gt; &gt;&gt;&gt; companies don't give gasoline away for free.  Car companies don't give
&gt; &gt;&gt;&gt; cars away for free.  Lawyers and doctors and accountants don't work
&gt; &gt;&gt;&gt; for free.  But for some reason, software developers don't value
&gt; &gt;&gt;&gt; themselves or their work enough to demand compensation for it.  This
&gt; &gt;&gt;&gt; kind of philosophy actually has the potential to ruin the profession.
&gt; &gt;&gt; Two toughts:

&gt; &gt;&gt; If the only reason a person would work (give its time) was money, the
&gt; &gt;&gt; begging question would be: how much do you earn to post here?

&gt; &gt; Are you the authorities?

&gt; No! Why? Do you fear them? ;-)
">

They are the instance that usually takes money for something you would
not expect. Eg. breathing.

<QUOTE PREVIOUSPOST="
&gt; &gt; Maybe posting in in c.l.f gets expensive some
&gt; &gt; day. I think posting here is done by persons that think posting here
&gt; &gt; makes sense - not money.

&gt; Yes. The first point I was willing to make: not all programming in the
&gt; World has to be made for making money.
">

I'm supporting this point of view. But it does not restrict the
programming for money, as your idea does not restrict people from
talking about Forth outside this newsgroup. Also if they make money
with Forth.

<QUOTE PREVIOUSPOST="
&gt; &gt;&gt; Why in the Earth should software development continue to be a
&gt; &gt;&gt; profession, and (say) a knowledge that all persons interested in
&gt; &gt;&gt; computers can exercise?

&gt; &gt; Why the hell there should be any professions in future?

&gt; Probably a good question to make, but too far reaching to answer, but if
&gt; we restrict to computer programming we could arrive to some interesting
&gt; conclusions...
">

They are as uninteresting as if you would restrict it to professions
that handle to saw wood.

<QUOTE PREVIOUSPOST="
&gt; &gt; We all can
&gt; &gt; read the internet. There is no need for professions anymore. Maybe
&gt; &gt; some hands get lost while sawing something from wood, but that's the
&gt; &gt; kind of losses we all would like to bring if therefore there is no
&gt; &gt; more profession anymore??!

&gt; I cannot grok the connection between 'internet' and 'sawing something
&gt; from wood' so can comment.
">

Just try to go away from dogmatisms.

Kind Regards!
-Helmar
</POST>
<POST>
<POSTER> pineapple.l...@yahoo.com </POSTER>
<POSTDATE> 2007-09-14T08:13:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&gt; Why in the Earth should software development continue to be a
&gt; profession....
">

Why shouldn't it?  Do you also ask why financial planning and
accounting and lawyering and doctoring should not continue to be a
profession?  Why should anything continue to be a profession?  What
about YOUR profession?  What do you do?  Should it continue to remain
a profession?
</POST>
<POST>
<POSTER> Brad Eckert &lt;nospaambr...@tinyboot.com&gt; </POSTER>
<POSTDATE> 2007-09-14T10:29:00 </POSTDATE>
On Sep 13, 10:23 am, pineapple.l ... @yahoo.com wrote:

<QUOTE PREVIOUSPOST="
&gt; &lt;&lt;That's not freedom. That's a new kind of internal
&gt; feudalism. &gt;&gt;

&gt; I couldn't agree more.  As a developer I never understood why other
&gt; developers thought they should give away their work for free.  Oil
&gt; companies don't give gasoline away for free.  Car companies don't give
&gt; cars away for free.  Lawyers and doctors and accountants don't work
&gt; for free.  But for some reason, software developers don't value
&gt; themselves or their work enough to demand compensation for it.  This
&gt; kind of philosophy actually has the potential to ruin the profession.
">

It could be that they just want to contribute to the world in their
own way and since the cost of production is zero after the time is
invested, they see money as a necessary evil that they'd rather not
see encumbering their project.

An economy can be driven by either love or money, because that's the
two things that motivate people. The free software crowd desires a
different kind of economy enough to suffer monetarily to make it
happen, which I'm sure annoys the people firmly entrenched in the
other economy. That's not to say that either way is good or bad, just
that both camps have idealogies that are hard to reconcile.

Brad
</POST>
<POST>
<POSTER> astrobe &lt;fduboi...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-14T11:05:00 </POSTDATE>
On 13 sep, 19:23, pineapple.l ... @yahoo.com wrote:

<QUOTE PREVIOUSPOST="
&gt; &lt;&lt;That's not freedom. That's a new kind of internal
&gt; feudalism. &gt;&gt;

&gt; I couldn't agree more.  As a developer I never understood why other
&gt; developers thought they should give away their work for free.
">

Indeed, you didn't get the concept; they don't give away their work
for free.
I use free software, so I feel I have to give something back to the
free software community in return.
It is kind of a barter.

Amicalement,
Astrobe
</POST>
<POST>
<POSTER> Elizabeth D Rather &lt;erather...@forth.com&gt; </POSTER>
<POSTDATE> 2007-09-14T13:37:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Brad Eckert wrote:
&gt; On Sep 13, 10:23 am, pineapple.l ... @yahoo.com wrote:
&gt;&gt; &lt;&lt;That's not freedom. That's a new kind of internal
&gt;&gt; feudalism. &gt;&gt;

&gt;&gt; I couldn't agree more.  As a developer I never understood why other
&gt;&gt; developers thought they should give away their work for free.  Oil
&gt;&gt; companies don't give gasoline away for free.  Car companies don't give
&gt;&gt; cars away for free.  Lawyers and doctors and accountants don't work
&gt;&gt; for free.  But for some reason, software developers don't value
&gt;&gt; themselves or their work enough to demand compensation for it.  This
&gt;&gt; kind of philosophy actually has the potential to ruin the profession.

&gt; It could be that they just want to contribute to the world in their
&gt; own way and since the cost of production is zero after the time is
&gt; invested, they see money as a necessary evil that they'd rather not
&gt; see encumbering their project.
">

In the first place, the initial cost of development may be considerable.
Who bears this cost?  In some cases, the cost is borne as an auxiliary
expense in aid of some other goal, and the developer doesn't expect to
recover it.  In that case, it may be a reasonable decision to release
the software for free.  But in other cases, the development itself was
paid for as an investment in the expectation of future return in the
form of sales of the software.  That is a different but equally
reasonable business model, and one which has produced quite a lot of
excellent commercial software.

In the second place, the cost of maintaining software over time can also
be considerable, if you view it as an ongoing project with user support
and future enhancements.  In the open source model, the assumption is
that this cost will be borne by a community of users.  If the original
development was done as an investment, however, the investor is also
responsible for the ongoing maintenance costs, and will support them so
long as it continues to be economically viable to do so.

<QUOTE PREVIOUSPOST="
&gt; An economy can be driven by either love or money, because that's the
&gt; two things that motivate people. The free software crowd desires a
&gt; different kind of economy enough to suffer monetarily to make it
&gt; happen, which I'm sure annoys the people firmly entrenched in the
&gt; other economy. That's not to say that either way is good or bad, just
&gt; that both camps have idealogies that are hard to reconcile.
">

It's not a matter of &quot;annoyance&quot;, it's a matter of acknowledging that
some people have different economic circumstances.  A programmer who has
a dependable income and writes software on his own time can afford to
make the decision to release it &quot;for love&quot;.  But someone whose
livelihood depends on being paid for writing software has a very
different situation, and I don't think they should be disparaged.  &quot;The
workman is worthy of his hire.&quot;

Cheers,
Elizabeth

--
==================================================
Elizabeth D. Rather   (US &amp; Canada)   800-55-FORTH
FORTH Inc.                         +1 310-491-3356
5155 W. Rosecrans Ave. #1018  Fax: +1 310-978-9454
Hawthorne, CA 90250
http://www.forth.com

&quot;Forth-based products and Services for real-time
applications since 1973.&quot;
==================================================
</POST>
<POST>
<POSTER> pineapple.l...@yahoo.com </POSTER>
<POSTDATE> 2007-09-14T15:11:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&gt; It could be that they just want to contribute to the world in their
&gt; own way...
">

Well assuming that &quot;charity&quot; like this is a good thing... the one
poster above goes far beyond this, claiming that all information is
free, blah blah.  You have one case you are citing above, where some
guy does something and gives it away of his own free will.  Fine - his
decision.  But you have another person demanding (the way I read it,
anyway) that all others do the same.

<QUOTE PREVIOUSPOST="
&gt; The free software crowd desires a
&gt; different kind of economy enough to suffer monetarily to make it
&gt; happen
">

This is just nuts.  I mean, it will never happen, unless there is a
communist revolution.  Putting out free software won't change anything
into a &quot;love economy.&quot;  The more likely case is that they put out
enough free software to put the common man out of a very good
profession, and at the same time (ironically enough) help the fat
cats, who are already profiting enough from cheap labor through
outsourcing and bringing in Indians on H1-Bs.

This philosophy is new to me, but I'm assuming these people are doing
this out of a hatred of big corporations like Microsoft (correct me if
I'm wrong).  Look, I understand hatred of the fat cats - I hate them
myself.  But putting out free software isn't the way to fight them.
It only hurts the common man - the people they would probably say they
don't want to hurt - and it only helps the fat cats - the people they
would probably say they don't want to help.

<QUOTE PREVIOUSPOST="
&gt; That's not to say that either way is good or bad, just
&gt; that both camps have idealogies that are hard to reconcile.
">

I understand - you are merely describing what's going on.

Regards.
</POST>
<POST>
<POSTER> pineapple.l...@yahoo.com </POSTER>
<POSTDATE> 2007-09-14T15:14:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&gt; This philosophy is new to me, but I'm assuming these people are doing
&gt; this out of a hatred of big corporations like Microsoft (correct me if
&gt; I'm wrong).
">

I assume this because I don't see a &quot;free accounting&quot; movement or a
&quot;free lawyering&quot; movement.  It's only &quot;free software.&quot;
</POST>
<POST>
<POSTER> Bruce McFarling &lt;agil...@netscape.net&gt; </POSTER>
<POSTDATE> 2007-09-14T15:41:00 </POSTDATE>
On Sep 14, 3:11 pm, pineapple.l ... @yahoo.com wrote:

<QUOTE PREVIOUSPOST="
&gt; This philosophy is new to me, but I'm assuming these people are doing
&gt; this out of a hatred of big corporations like Microsoft (correct me if
&gt; I'm wrong).
">

Primarily? No, probably not.

The aphorism is that information like software wants to be expensive,
because its so useful, and it also wants to be cheap, because
reproducing it does not use it up.

Behind that aphorism is the observation that to sell software as a
commodity, it is necessary to find a way to deliberately sabotage that
ease of reproduction, and efforts to find programming models that do
not require that sabotage are for some people a primary motivation for
participating in the free software community.

The free software community, has been around long enough to develop
its own particular institutions, like any other community of similar
size, consisting of rules of behavior and folkviews regarding those
rules of behavior, and broad sweeping declarations regarding the free
software community eventually over-running the development-for-hire
model seems to be driven by some of those folkviews.

The end of programming as a profession seems to be what happens to the
argument regarding the end of software being treated as a commodity
for sale when it gets pushed in the direction of an infotopia ... but
it is a mis-characterization of the original argument, in which a
programming profession would indeed continue to exist as a service for
hire, like a lawyer or an accountant, as opposed to being like a car
designer designing a new model of car for the car factory.

Viewed from outside, in addition to the infotopia model and the
service for hire model, there is the third possibility that software
as commodity and programming as service for hire will continue to co-
exist, with the competition between the two models continually
regenerating this particular subthread.
</POST>
<POST>
<POSTER> &quot;sl...@jedit.org&quot; &lt;sl...@jedit.org&gt; </POSTER>
<POSTDATE> 2007-09-14T15:53:00 </POSTDATE>
On Sep 14, 3:11 pm, pineapple.l ... @yahoo.com wrote:

<QUOTE PREVIOUSPOST="
&gt; Well assuming that &quot;charity&quot; like this is a good thing... the one
&gt; poster above goes far beyond this, claiming that all information is
&gt; free, blah blah.  You have one case you are citing above, where some
&gt; guy does something and gives it away of his own free will.  Fine - his
&gt; decision.  But you have another person demanding (the way I read it,
&gt; anyway) that all others do the same.
">

You hit the nail on the head. The &quot;free software&quot; advocates want to
take away people's freedom to make money by selling software. Perhaps
the same people think that in order to remain democratic, a country
must cancel elections and unite under one &quot;People's Party&quot;?

Slava
</POST>
<POST>
<POSTER> Brad Eckert &lt;nospaambr...@tinyboot.com&gt; </POSTER>
<POSTDATE> 2007-09-14T16:42:00 </POSTDATE>
On Sep 14, 12:11 pm, pineapple.l ... @yahoo.com wrote:

<QUOTE PREVIOUSPOST="
&gt; &gt; The free software crowd desires a
&gt; &gt; different kind of economy enough to suffer monetarily to make it
&gt; &gt; happen

&gt; This is just nuts.  I mean, it will never happen, unless there is a
&gt; communist revolution.  Putting out free software won't change
&gt; anything
&gt; into a &quot;love economy.&quot;  The more likely case is that they put out
&gt; enough free software to put the common man out of a very good
&gt; profession, and at the same time (ironically enough) help the fat
&gt; cats, who are already profiting enough from cheap labor through
&gt; outsourcing and bringing in Indians on H1-Bs.
">

Living in a culture and agreeing with it are two different things. If
someone believes in giving away software, they can live what they
believe even if they know it's not very practical. Perhaps the Free
Software movement is a form of nonviolence. A way to rebel against
established norms.

<QUOTE PREVIOUSPOST="
&gt; It only hurts the common man - the people they would probably say
&gt; they don't want to hurt - and it only helps the fat cats - the
&gt; people they would probably say they don't want to help.
">

Well, it's disruptive to established business models for sure. But
then the free market adjusts to such disruptions all the time. All
occupations carry an opportunity cost, including programming. Putting
programmers out of work for lack of a paying market, as unpleasant as
that may be, frees them up for other creative endeavors.

The overall purpose of an economic system is to get people to work
together. I can think of socialist countries (like Norway) and
capitalist countries (like the US) that run just fine. OTOH, the third
world countries have a hard time getting anything done. People can't
work toward a common goal if they don't trust each other, for example.
IMHO, success depends on culture of the people, not the system.

Brad
</POST>
<POST>
<POSTER> pineapple.l...@yahoo.com </POSTER>
<POSTDATE> 2007-09-14T19:34:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&gt; I can think of socialist countries (like Norway) and
&gt; capitalist countries (like the US) that run just fine. OTOH, the third
&gt; world countries have a hard time getting anything done.
">

This actually happens to be one of my areas of expertise, and I write
articles on it from time to time.

The first two countries you listed (US and Norway) &quot;run just fine&quot;
because they are first world countries.  Third would countries &quot;have a
hard time getting anything done&quot; because they are third world
countries.

The difference between the two (you'll never hear this in the pro-
globalism establishment media) is good jobs.  That is what has always
been the difference.  I am from the US.  I am now living in Thailand -
a third world country.  There are Ph.D.s driving taxis here.  There
are Masters Degreed people all over the place selling coffee in coffee
shops, or selling food out on the streets.  It's the same thing in any
third world country you visit and study.  Plenty of people go and get
higher education, but they don't do it for jobs (there aren't any);
rather, they do it for self-fulfillment or status.  Go to Iran
sometime and you'll see software engineers with 3 other jobs on the
side just to make ends meet (selling shoes out of the trunks of their
cars, raising and selling chickens in the market, etc).

&lt;&lt;Putting programmers out of work for lack of a paying market, as
unpleasant as
that may be, frees them up for other creative endeavors. &gt;&gt;

What I said above exposes this for what it is: faith-based economics.
You hear it all the time, chiefly from the free-market types.  It's
hogwash.  There are plenty of people &quot;freed up for other creative
endeavors&quot; in the third world.  Unfortunately, those creative
endeavors (selling food on the side of the road) don't pay very much.

This is where the west is currently heading.  Massive labor arbitrage
- the wholesale moving of the jobs and economy of the first world to
the third world, with claims that new and better jobs will magically
appear to replace the ones that are gone (faith-based economics).  And
now I learn that, on top of this, there are developers and programmers
who want to add fuel to the fire and help destroy their own jobs even
more - as if that needs any help.

I continue to conclude over and over again that the west entirely
deserves what it gets.  The future isn't pretty.
</POST>
<POST>
<POSTER> Cesar Rabak &lt;csra...@yahoo.com.br&gt; </POSTER>
<POSTDATE> 2007-09-14T20:31:00 </POSTDATE>
pineapple.l ... @yahoo.com escreveu:

<QUOTE PREVIOUSPOST="
&gt;&gt; Why in the Earth should software development continue to be a
&gt;&gt; profession....

&gt; Why shouldn't it?
">

Because technology and widespread of knowledge of the use of computers
could make it part of everyone's habilities, for example?

<QUOTE PREVIOUSPOST="
&gt; Do you also ask why financial planning and
&gt; accounting and lawyering and doctoring should not continue to be a
&gt; profession?  Why should anything continue to be a profession?  What
&gt; about YOUR profession?  What do you do?  Should it continue to remain
&gt; a profession?
">

No, I'm willing to discuss just computer programming.
</POST>
<POST>
<POSTER> Elizabeth D Rather &lt;erather...@forth.com&gt; </POSTER>
<POSTDATE> 2007-09-14T21:44:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Cesar Rabak wrote:
&gt; pineapple.l ... @yahoo.com escreveu:
&gt;&gt;&gt; Why in the Earth should software development continue to be a
&gt;&gt;&gt; profession....

&gt;&gt; Why shouldn't it?

&gt; Because technology and widespread of knowledge of the use of computers
&gt; could make it part of everyone's habilities, for example?
">

In the 60's, some folks invented COBOL in the belief that a COmmon
Business-Oriented Language would enable business people to program their
data processing applications without specialized programmers.

In the early 80's &quot;programmerless programming&quot; packages such as Dbase2
started appearing, and 'everyone' said that in a few years there would
be no jobs for programmers.

Hasn't happened, won't happen.

Although lots of people are now pretty good at *using* computers, they
use them on the level that we use TV, cell phones, and other miraculous
technology, without a clue what goes on inside.  Many are incapable of
understanding them (let alone programming them), even more are simply
uninterested and too busy with their own lives.  The issue isn't
availability of knowledge, it's the motivation to invest the level of
effort necessary to make effective use of it.

<QUOTE PREVIOUSPOST="
&gt;&gt; Do you also ask why financial planning and
&gt;&gt; accounting and lawyering and doctoring should not continue to be a
&gt;&gt; profession?  Why should anything continue to be a profession?  What
&gt;&gt; about YOUR profession?  What do you do?  Should it continue to remain
&gt;&gt; a profession?

&gt; No, I'm willing to discuss just computer programming.
">

That's too bad, because those are good examples of specialized fields of
professional service where the technical information is completely
public, but folks still rely on specialists to acquire and apply it.
They are very relevant to this discussion.

So, there's no point in asking if there will *be* programmers, the issue
is whether they will/should be paid for their work.

Cheers,
Elizabeth

--
==================================================
Elizabeth D. Rather   (US &amp; Canada)   800-55-FORTH
FORTH Inc.                         +1 310-491-3356
5155 W. Rosecrans Ave. #1018  Fax: +1 310-978-9454
Hawthorne, CA 90250
http://www.forth.com

&quot;Forth-based products and Services for real-time
applications since 1973.&quot;
==================================================
</POST>
<POST>
<POSTER> Bruce McFarling &lt;agil...@netscape.net&gt; </POSTER>
<POSTDATE> 2007-09-14T22:12:00 </POSTDATE>
On Sep 14, 9:44 pm, Elizabeth D Rather &lt;erather ... @forth.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; The issue isn't availability of knowledge, it's the motivation to invest the level of effort necessary to make effective use of it.
">

Something which accountants and lawyers do without producing any
commodity for sale.

<QUOTE PREVIOUSPOST="
&gt; That's too bad, because those are good examples of specialized fields of
&gt; professional service where the technical information is completely
&gt; public, but folks still rely on specialists to acquire and apply it.
&gt; They are very relevant to this discussion.
&gt; So, there's no point in asking if there will *be* programmers, the issue
&gt; is whether they will/should be paid for their work.
">

The issue for advocates of free software movement as a movement is
rather whether programmers should be paid for their *work*, as
accountants and lawyers normally are, or have the result of their work
turned into a commodity and be paid based on the sale of that
commodity (as, for example, writers sometimes are).

However, that starts getting into the pros and cons of different
arguments, and infotopia is much simpler.
</POST>
<POST>
<POSTER> Elizabeth D Rather &lt;erather...@forth.com&gt; </POSTER>
<POSTDATE> 2007-09-14T23:41:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Bruce McFarling wrote:
">

...

<QUOTE PREVIOUSPOST="
&gt; The issue for advocates of free software movement as a movement is
&gt; rather whether programmers should be paid for their *work*, as
&gt; accountants and lawyers normally are, or have the result of their work
&gt; turned into a commodity and be paid based on the sale of that
&gt; commodity (as, for example, writers sometimes are).
">

There are good arguments for both models, and both models are valid and
appropriate in the software world, in various circumstances.  What I
object to is the notion that if a company invests its own capital in
paying the salaries of programmers to write software, in hopes of
recovering that investment plus some profit, this is somehow ripping off
the programmers or the public.  The company will be obligated to invest
still further in advertising, promotion, and support of the product, not
the programmer (unless, of course, the company pays him more for support
and improvements). And the company bears all the risk; they might lose
part or all of the investment if the product isn't successful.

I suppose this myth of the poor, exploited programmer is based on a
sweatshop model of exploited third-world seamstresses toiling to produce
pricy designer-label fashions (and I could explore that one a bit, too,
if it weren't so OT).  But, at least in the US, a good programmer or
engineer can pretty much call the shots, commanding at least a 6-figure
salary plus insurance, bonuses, and various perks.  (I'm speaking here
of highly skilled professionals, not low-level code monkeys, because I
have no experience with them -- most of the professional programmers I
know have extensive engineering knowledge and usually considerable
expertise in one or more application domains).

Worse yet is the theory that the company in question, having risked its
own capital on the project, should then be expected to give the product
away for free because to not do so is somehow withholding &quot;information&quot;
that the public is &quot;entitled to&quot;.

None of this, by the way, has anything whatsoever to do with love.  Many
programmers I know who work for salary love their jobs, and most
successful companies love both their employees and their customers.  The
presence of money in the equation neither prevents nor subverts love.
Love is earned or not based on other things.

Cheers,
Elizabeth

--
==================================================
Elizabeth D. Rather   (US &amp; Canada)   800-55-FORTH
FORTH Inc.                         +1 310-491-3356
5155 W. Rosecrans Ave. #1018  Fax: +1 310-978-9454
Hawthorne, CA 90250
http://www.forth.com

&quot;Forth-based products and Services for real-time
applications since 1973.&quot;
==================================================
</POST>
<POST>
<POSTER> pineapple.l...@yahoo.com </POSTER>
<POSTDATE> 2007-09-15T04:11:00 </POSTDATE>
&lt;&lt;I suppose this myth of the poor, exploited programmer is based on a
sweatshop model of exploited third-world seamstresses...&gt;&gt;

Elizabeth, which is it, the exploited programmer, or the exploiting
programmer?  The way I was reading (and responding) to the discussion
before, it seemed to me they were worried about programmers being too
fat and happy.  Thus give away software for free and attack
programming as a profession (those fat cat programmers have a monopoly
on information, and need to be taken down a notch!).  Are you saying
that their issue is that programmers are imperiled, exploited, etc,
and that somehow the free software movement will help them?  I could
certainly go along with the second philosophy more easily than the
first (not that I think that giving away software helps programmers or
the programming field).

&lt;&lt;But, at least in the US, a good programmer or
engineer can pretty much call the shots, commanding at least a 6-
figure
salary plus insurance, bonuses, and various perks.&gt;&gt;

Not anymore.  I used to be one of those 6-figure salary guys.  With
outsourcing, and now &quot;insourcing&quot; (bringing in Indians under H1-B
visas, with so-called &quot;immigration reform&quot; waiting in the wings which
will allow more), it's all gone.  Thus my amazement that programmers
would seemingly want to add more fuel to the fire (if I had the whole
discussion pegged right - probably not).

Regards.
</POST>
<POST>
<POSTER> Jean-François Michaud &lt;come...@comcast.net&gt; </POSTER>
<POSTDATE> 2007-09-15T06:52:00 </POSTDATE>
On Sep 14, 8:41 pm, Elizabeth D Rather &lt;erather ... @forth.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Bruce McFarling wrote:

&gt; ...

&gt; &gt; The issue for advocates of free software movement as a movement is
&gt; &gt; rather whether programmers should be paid for their *work*, as
&gt; &gt; accountants and lawyers normally are, or have the result of their work
&gt; &gt; turned into a commodity and be paid based on the sale of that
&gt; &gt; commodity (as, for example, writers sometimes are).

&gt; There are good arguments for both models, and both models are valid and
&gt; appropriate in the software world, in various circumstances.  What I
&gt; object to is the notion that if a company invests its own capital in
&gt; paying the salaries of programmers to write software, in hopes of
&gt; recovering that investment plus some profit, this is somehow ripping off
&gt; the programmers or the public.  The company will be obligated to invest
&gt; still further in advertising, promotion, and support of the product, not
&gt; the programmer (unless, of course, the company pays him more for support
&gt; and improvements). And the company bears all the risk; they might lose
&gt; part or all of the investment if the product isn't successful.

&gt; I suppose this myth of the poor, exploited programmer is based on a
&gt; sweatshop model of exploited third-world seamstresses toiling to produce
&gt; pricy designer-label fashions (and I could explore that one a bit, too,
&gt; if it weren't so OT).  But, at least in the US, a good programmer or
&gt; engineer can pretty much call the shots, commanding at least a 6-figure
&gt; salary plus insurance, bonuses, and various perks.  (I'm speaking here
&gt; of highly skilled professionals, not low-level code monkeys, because I
&gt; have no experience with them -- most of the professional programmers I
&gt; know have extensive engineering knowledge and usually considerable
&gt; expertise in one or more application domains).

&gt; Worse yet is the theory that the company in question, having risked its
&gt; own capital on the project, should then be expected to give the product
">

I'm afraid that the open source model is being observed while standing
on the older business model perspective here.

The idea behind open source is to propel everybody forward instead of
witholding information in closed circles for the benefit of only a few
(which results in silly lawsuits and &quot;persnicketyish&quot; backstabing
centered around who &quot;owns&quot; a particular conceptual piece). The returns
on open source software come in a different form. The whole economy is
then based on integration of parts (packaging) and services in general
instead of on commodities.

Older business models work fine for physical commodities; any object
produced in the physical world, but in the digital world, this old
thought pattern doesn't hold. Knowledge is fundamentally different in
nature and can not be treated the same way.

Google, for example, is offering its search engine freely to everybody
who can access the internet even though they spent money to develop
it. They reap a good chunk of their benefit from companies wanting
their name bumped up in the searches. The rewards are centered around
the service instead of the product; and in the meantime, everybody
benefits from the technology and so everybody is propelled forwards.
Although the code isn't open source, the idea is.

Ad-aware, a pretty good spyware buster software let you use their
software for free; if you want a more advanced version with premium
benefits (service oriented business), you pay extra. In this context,
everybody uses their software and benefits from the technology; we
advance forward.

Linux is the north star on this one. Whole businesses are centered
around services on Linux bundles/packages but the software itself is
free for anybody who wants to use it; everybody moves forward. And on
this one, we have the added benefit of being open source which means
that anything is possible. Wherever we want to go, there we are.

In general, in stores, when you purchase a version of linux, you are
purchasing a service package/assembly of software parts, not a piece
of software (not completely, but mostly). Everybody can push ideas
forward instead of tugging the blanket their way. Otherwise, some
packages are available for free also, or a bit of work is required to
tweak a particular configuration to one's computer.

Some big company develops a bleeding edge piece of software and owns
it; only the company benefits from the product and whoever wants to
push related ideas/software further has to tread lightly to ensure
they are not stepping on some owned piece of knowledge. The end result
is that we stall. Progress stops. Explored ideas can't benefit from
everybody eyeballing them to push them further.

I would much rather see everybody moving forward than seeing a select
few doing the same. Because in the end, that's what we need to be
doing anyways isn't it?

[snip]
</POST>
<POST>
<POSTER> Jean-François Michaud &lt;come...@comcast.net&gt; </POSTER>
<POSTDATE> 2007-09-15T07:11:00 </POSTDATE>
On Sep 14, 8:05 am, astrobe &lt;fduboi ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On 13 sep, 19:23, pineapple.l ... @yahoo.com wrote:

&gt; &gt; &lt;&lt;That's not freedom. That's a new kind of internal
&gt; &gt; feudalism. &gt;&gt;

&gt; &gt; I couldn't agree more.  As a developer I never understood why other
&gt; &gt; developers thought they should give away their work for free.

&gt; Indeed, you didn't get the concept; they don't give away their work
&gt; for free.
&gt; I use free software, so I feel I have to give something back to the
&gt; free software community in return.
&gt; It is kind of a barter.

&gt;  Amicalement,
&gt;   Astrobe
">

Indeed, we are encouraged to &quot;donate&quot; if we can, but the service is
there and can be used for almost nothing. The idea is that if somebody
likes a product/service, they will contribute in their own way at some
point in time, effectively propelling everybody forward instead of a
select few. Communities form around useful bits and those communities
have a tendency to maintain a service if it is worthy of being
sustained.

Heck, usenet/c.l.f can be considered to be such a free service.
Information flows freely and anybody can come and ask for advice/bits
of code, for free. Everybody benefits from such a model.

It's a fantastic revolution of ideas and I strongly suspect that this
will bring prices down through the floor very soon.

Regards
Jean-Francois Michaud
</POST>
<POST>
<POSTER> John Passaniti &lt;put-my-first-name-h...@JapanIsShinto.com&gt; </POSTER>
<POSTDATE> 2007-09-15T15:20:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
pineapple.l ... @yahoo.com wrote:
&gt; Not anymore.  I used to be one of those 6-figure salary guys.  With
&gt; outsourcing, and now &quot;insourcing&quot; (bringing in Indians under H1-B
&gt; visas, with so-called &quot;immigration reform&quot; waiting in the wings which
&gt; will allow more), it's all gone.  Thus my amazement that programmers
&gt; would seemingly want to add more fuel to the fire (if I had the whole
&gt; discussion pegged right - probably not).
">

Any profession that doesn't adapt to change is doomed.  You can choose
to lament about how modern practice (open source, out/in-sourcing, etc.)
has changed things, or you can be on the cutting edge and come up with
new models to exploit modern practice.

Nobody who is involved in open source is giving away software for free.
What they are doing is exchanging one kind of currency for another.
The new currency is found in things like reputation, support,
customization, and integration of software.  In a sense, open source is
really just another form of advertising.  Except instead of &quot;we've done
software for big names like X and Y and you can trust us that our
quality is high&quot; it's &quot;here is the software for X and Y that we did--
inspect it, see the quality of our work, and consider hiring us.&quot;

The programmers who are making the 6-figure salaries today are those who
have adapted or are learning to adapt.  They are the ones who have found
ways to blend cooperation with competition.  Sorry if the old models are
dying, but hey, survival of the fittest and all that.
</POST>
<POST>
<POSTER> hel...@gmail.com </POSTER>
<POSTDATE> 2007-09-15T16:00:00 </POSTDATE>
On Sep 15, 1:11 pm, Jean-François Michaud &lt;come ... @comcast.net&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Sep 14, 8:05 am, astrobe &lt;fduboi ... @gmail.com&gt; wrote:

&gt; &gt; On 13 sep, 19:23, pineapple.l ... @yahoo.com wrote:

&gt; &gt; &gt; &lt;&lt;That's not freedom. That's a new kind of internal
&gt; &gt; &gt; feudalism. &gt;&gt;

&gt; &gt; &gt; I couldn't agree more.  As a developer I never understood why other
&gt; &gt; &gt; developers thought they should give away their work for free.

&gt; &gt; Indeed, you didn't get the concept; they don't give away their work
&gt; &gt; for free.
&gt; &gt; I use free software, so I feel I have to give something back to the
&gt; &gt; free software community in return.
&gt; &gt; It is kind of a barter.

&gt; &gt;  Amicalement,
&gt; &gt;   Astrobe

&gt; Indeed, we are encouraged to &quot;donate&quot; if we can, but the service is
&gt; there and can be used for almost nothing.
">

Indeed, that remembers me on musicians.

<QUOTE PREVIOUSPOST="
&gt; The idea is that if somebody
&gt; likes a product/service, they will contribute in their own way at some
&gt; point in time, effectively propelling everybody forward instead of a
&gt; select few.
">

Your premises are wrong. Also commercial software brings people
forward. They would not buy it if it would not bring themselves
forward. You are very dogmatic at this point imho.

<QUOTE PREVIOUSPOST="
&gt; Communities form around useful bits and those communities
&gt; have a tendency to maintain a service if it is worthy of being
&gt; sustained.
">

Many of the most useful software is sponsored by big players in
computer business. SUN for example pays a lot of developers.

<QUOTE PREVIOUSPOST="
&gt; Heck, usenet/c.l.f can be considered to be such a free service.
">

It's also a free service for commercial software.

<QUOTE PREVIOUSPOST="
&gt; Information flows freely and anybody can come and ask for advice/bits
&gt; of code, for free. Everybody benefits from such a model.
">

No. Only in partial. If I fix your problem I dont get money. Maybe
I've the time and want to fix your problem. But usually I dont have
the time until you pay me. I'm a bad guy because of this?!

<QUOTE PREVIOUSPOST="
&gt; It's a fantastic revolution of ideas and I strongly suspect that this
&gt; will bring prices down through the floor very soon.
">

This will bring business down to the floor very soon. Why can't open
source and business live together? Is it that complicated? You'll
always have software where you find only five customers in the world
that need it. Such software can not be a gift from the encouraged
developer. I'm not talking about a word processor btw....

What you miss in your argumentation is to take a point of view that
respects the others. Your intention is world revolution or something.
It is not true that in an environment of &quot;free/open/...&quot; (what you
call it) soultions the best solutions will survive. It is imho more
like that not China will reach the moon but some astronauts (or how
they call it) will reach it. Not every task is scalable to the
pressure of consuments that don't want to pay anything for their work
as the fundamentalists in open source are. I'm strongly suggest not to
be too dogmatic. Open source and commercial software - as contrary
they are - are two sides of the same market that fit together. Nobody
wins if the other fails fundamentally.

Kind Regards,
-Helmar
</POST>
<POST>
<POSTER> hel...@gmail.com </POSTER>
<POSTDATE> 2007-09-15T16:37:00 </POSTDATE>
On Sep 15, 10:00 pm, hel ... @gmail.com wrote:

<QUOTE PREVIOUSPOST="
&gt; It is imho more
&gt; like that not China will reach the moon but some astronauts (or how
&gt; they call it) will reach it. Not every task is scalable to the
&gt; pressure of consuments
&gt; that don't want to pay anything for their work
">

That's probably misunderstandable: I really mean to &quot;pay for the work
of the chinese astronauts&quot; if you asked this yourself. This is a multi
stage problem, you please solve this for yourself, since we are all
consuments of such an probable event, the world has made a step
forward then (also chinese people are able to go to the moon) and
indeed it's made with mainly non-open-source technologies or better it
could not be made with such things that fast without the things being
the way as they are.

<QUOTE PREVIOUSPOST="
&gt; as the fundamentalists in open source are. I'm strongly suggest not to
&gt; be too dogmatic.
">

Kind Regards,
-Helmar
</POST>
<POST>
<POSTER> Bruce McFarling &lt;agil...@netscape.net&gt; </POSTER>
<POSTDATE> 2007-09-15T16:42:00 </POSTDATE>
On Sep 14, 11:41 pm, Elizabeth D Rather &lt;erather ... @forth.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Bruce McFarling wrote:
&gt; &gt; The issue for advocates of free software movement as a movement is
&gt; &gt; rather whether programmers should be paid for their *work*, as
&gt; &gt; accountants and lawyers normally are, or have the result of their work
&gt; &gt; turned into a commodity and be paid based on the sale of that
&gt; &gt; commodity (as, for example, writers sometimes are).
&gt; There are good arguments for both models, and both models are valid and
&gt; appropriate in the software world, in various circumstances.  What I
&gt; object to is the notion that if a company invests its own capital in
&gt; paying the salaries of programmers to write software, in hopes of
&gt; recovering that investment plus some profit, this is somehow ripping off
&gt; the programmers or the public.  The company will be obligated to invest
&gt; still further in advertising, promotion, and support of the product, not
&gt; the programmer (unless, of course, the company pays him more for support
&gt; and improvements). And the company bears all the risk; they might lose
&gt; part or all of the investment if the product isn't successful.
">

The investment made predicated upon the existence of the government
grant of monopoly rights happens in knowledge of the government
grant ... so the prior question is whether that grant of monopoly
rights is in the public interest.

There are arguments pro and con, but the question is not whether the
company behaved that way in expectation of being able to sell software
as a commodity, but whether on balance companies behaving in that way
are in the public interest.

It might be an interesting project to consider the most substantial
arguments pro and con and argue for which way the balance lies, but I
haven't done that, so I could not say for sure which side of the
question I would come down on.

And if I did that, it would be in pursuit of a refereed publication,
so it would be neither for love nor, directly, for money, but for
professional status.
</POST>
<POST>
<POSTER> Cesar Rabak &lt;csra...@yahoo.com.br&gt; </POSTER>
<POSTDATE> 2007-09-15T20:33:00 </POSTDATE>
Elizabeth D Rather escreveu:

<QUOTE PREVIOUSPOST="
&gt; Cesar Rabak wrote:
&gt;&gt; pineapple.l ... @yahoo.com escreveu:
&gt;&gt;&gt;&gt; Why in the Earth should software development continue to be a
&gt;&gt;&gt;&gt; profession....

&gt;&gt;&gt; Why shouldn't it?

&gt;&gt; Because technology and widespread of knowledge of the use of computers
&gt;&gt; could make it part of everyone's habilities, for example?

&gt; In the 60's, some folks invented COBOL in the belief that a COmmon
&gt; Business-Oriented Language would enable business people to program their
&gt; data processing applications without specialized programmers.
">

Yes, but the fact that COBOL did not fulfilled its promise on &quot;data
processing&quot; does not deny that a lot of chores that in past had to go to
the 'DP' dept. now are ordinarily done by not only business people but
clerical staff as well.

*It happened* we just don't notice anymore!

<QUOTE PREVIOUSPOST="
&gt; In the early 80's &quot;programmerless programming&quot; packages such as Dbase2
&gt; started appearing, and 'everyone' said that in a few years there would
&gt; be no jobs for programmers.

&gt; Hasn't happened, won't happen.
">

You'd surprised by the number of applications done in Access and similar
environments that survived DBase II today. . .

Again, you don't see them and perhaps some small business you interact
in your town uses it, and we don't see.

It got person hours of 'programmers' in the same way Internet banking
has taken thousand of hours of bank clerks. As it becomes a way of life,
we forget about how life was earlier.

Elizabeth, look around and you'll see it already happened!

<QUOTE PREVIOUSPOST="
&gt; Although lots of people are now pretty good at *using* computers, they
&gt; use them on the level that we use TV, cell phones, and other miraculous
&gt; technology, without a clue what goes on inside.  Many are incapable of
&gt; understanding them (let alone programming them), even more are simply
&gt; uninterested and too busy with their own lives.  The issue isn't
&gt; availability of knowledge, it's the motivation to invest the level of
&gt; effort necessary to make effective use of it.
">

Yes, however a few people invest their own time and do become 'hackers',
power users and other names for those more knowledgeable persons and
they produce a lot of functionality with the tools put at their disposition.

<QUOTE PREVIOUSPOST="
&gt;&gt;&gt; Do you also ask why financial planning and
&gt;&gt;&gt; accounting and lawyering and doctoring should not continue to be a
&gt;&gt;&gt; profession?  Why should anything continue to be a profession?  What
&gt;&gt;&gt; about YOUR profession?  What do you do?  Should it continue to remain
&gt;&gt;&gt; a profession?

&gt;&gt; No, I'm willing to discuss just computer programming.

&gt; That's too bad, because those are good examples of specialized fields of
&gt; professional service where the technical information is completely
&gt; public, but folks still rely on specialists to acquire and apply it.
&gt; They are very relevant to this discussion.
">

I see, but then we'll fork to a lot of specialized professions and the
discussion will be diluted.

<QUOTE PREVIOUSPOST="
&gt; So, there's no point in asking if there will *be* programmers, the issue
&gt; is whether they will/should be paid for their work.
">

I disagree with the 'issue', if you want someone do a job for you,
you'll have to find means of compensating that person.

Regards,

--
Cesar Rabak
</POST>
<POST>
<POSTER> Cesar Rabak &lt;csra...@yahoo.com.br&gt; </POSTER>
<POSTDATE> 2007-09-15T20:35:00 </POSTDATE>
Bruce McFarling escreveu:

<QUOTE PREVIOUSPOST="
&gt; On Sep 14, 9:44 pm, Elizabeth D Rather &lt;erather ... @forth.com&gt; wrote:
&gt;&gt; The issue isn't availability of knowledge, it's the motivation to invest the level of effort necessary to make effective use of it.

&gt; Something which accountants and lawyers do without producing any
&gt; commodity for sale.
">

I think you got a good example.

<QUOTE PREVIOUSPOST="
&gt;&gt; That's too bad, because those are good examples of specialized fields of
&gt;&gt; professional service where the technical information is completely
&gt;&gt; public, but folks still rely on specialists to acquire and apply it.
&gt;&gt; They are very relevant to this discussion.

&gt;&gt; So, there's no point in asking if there will *be* programmers, the issue
&gt;&gt; is whether they will/should be paid for their work.

&gt; The issue for advocates of free software movement as a movement is
&gt; rather whether programmers should be paid for their *work*, as
&gt; accountants and lawyers normally are, or have the result of their work
&gt; turned into a commodity and be paid based on the sale of that
&gt; commodity (as, for example, writers sometimes are).
">

Yes, I think this is the main point.

<QUOTE PREVIOUSPOST="
&gt; However, that starts getting into the pros and cons of different
&gt; arguments, and infotopia is much simpler.
">

Worse, we mix a lot of cats in the same bag, including politics, which
turn the discussion less clear.
</POST>
<POST>
<POSTER> Bernd Paysan &lt;bernd.pay...@gmx.de&gt; </POSTER>
<POSTDATE> 2007-09-17T05:13:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
sl ... @jedit.org wrote:
&gt; You hit the nail on the head. The &quot;free software&quot; advocates want to
&gt; take away people's freedom to make money by selling software.
">

No, they only object to monopolist prices for selling software. Novell and
RedHat sell Linux, even Microsoft sells Linux (actually subscription
certificates for SuSE, but they sell them for real money). If you believe
in free market, you should also believe in competition, and copying is part
of competition. If you can't compete with the Chinese pirate CD press, you
just can't compete. Close you shop, game over. That's how a free market
ought to work.

Now, you tell me &quot;software development costs money, software copying is for
free&quot;. Yes, that's true. That's why Novell and RedHat don't sell what
already has been developed (that's available for download and is free),
they sell promises to continue development (it's called &quot;support&quot;). A lot
of companies won't use software without such a promise, and they are
willing to pay money for that promise, because this promise apparently is
worth it.

I'll assure you, you can't become the richest man of the world by selling
free software. It's not the point. The point of a free market system is
that you can't - if a significant number of people gets extremely rich,
there's something wrong. There are monopolies building up, and monopolies
are the opposite of a free market. And if you look at reality, things are
even worse than the copyright regime suggests. Under copyright, you have a
monopoly for your software - but that shouldn't impact competing software.
If you look however at Microsoft, you see that they have a real market
monopoly, abuse their monopoly, and they indeed drive competing software
out of the market. They have been fined, but even that fine was worth the
money for them.

--
Bernd Paysan
&quot;If you want it done right, you have to do it yourself&quot;
http://www.jwdt.com/~paysan/
</POST>
<POST>
<POSTER> Bernd Paysan &lt;bernd.pay...@gmx.de&gt; </POSTER>
<POSTDATE> 2007-09-17T05:38:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Elizabeth D Rather wrote:
&gt; In the early 80's &quot;programmerless programming&quot; packages such as Dbase2
&gt; started appearing, and 'everyone' said that in a few years there would
&gt; be no jobs for programmers.

&gt; Hasn't happened, won't happen.
">

This is always exaggerated. Programmers today aren't needed to do Excel
sheets or Access tables - people can do that for themselves. It's
not &quot;real&quot; programming, but when you think what COBOL was about,
Excel+Access really deliver 99% of that promise. A lot of the things I'm
currently doing in Forth is also done in Excel and Matlab by my coworkers,
and it works sufficiently well.

It doesn't make programmers obsolete, but it makes sure that they aren't
overloaded.

--
Bernd Paysan
&quot;If you want it done right, you have to do it yourself&quot;
http://www.jwdt.com/~paysan/
</POST>
<POST>
<POSTER> Brad Eckert &lt;nospaambr...@tinyboot.com&gt; </POSTER>
<POSTDATE> 2007-09-17T11:09:00 </POSTDATE>
On Sep 14, 8:41 pm, Elizabeth D Rather &lt;erather ... @forth.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; None of this, by the way, has anything whatsoever to do with love.  Many
&gt; programmers I know who work for salary love their jobs, and most
&gt; successful companies love both their employees and their customers.  The
&gt; presence of money in the equation neither prevents nor subverts love.
&gt; Love is earned or not based on other things.
">

Yes. I regret the English language's shortcomings in this department.
Having one word for love is like the eskimos having one word for snow.
But it's a moot point anyway -- Hippy Dippy doesn't pay the bills.

It seems to me you're in the Forth application business. By that, I
mean the application of Forth expertise to customer problems. You sell
tools too, but you developed them to do your applications. Maybe you
should put out press releases highlighting your application successes
in such a way that the benefits of using Forth are apparent.

Brad
</POST>
</TEXT>
</BODY>
</DOC>
