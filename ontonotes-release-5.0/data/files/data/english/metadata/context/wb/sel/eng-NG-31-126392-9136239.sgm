<DOC>
<DOCID> eng-NG-31-126392-9136239 </DOCID>
<DOCTYPE SOURCE="usenet"> USENET TEXT </DOCTYPE>
<DATETIME> 2007-10-30T09:34:00 </DATETIME>
<BODY>
<HEADLINE>
A Trend Towards Lower Software Maintenance Budgets?
</HEADLINE>
<TEXT>
<POST>
<POSTER> editormt &lt;edi...@methodsandtools.com&gt; </POSTER>
<POSTDATE> 2007-10-30T09:34:00 </POSTDATE>
Software maintenance is an important part of the software development
activity, but it is also the less discussed. A recent poll seems to
show that the part of maintenance in software development budget is
going down. Why?

Question: what percentage of your software development budget is
devoted to maintenance. Maintenance is defined as process of
correcting, enhancing and optimising deployed software.

25% or less of the budget ...........37%
26% to 50% of the budget ............27%
51% to 75% of the budget ............24%
more than 75% of the budget .........12%

Number of participants: 433

The annual maintenance costs in the US are estimated at over $ 70
billion. According to the different studies produced in the last
century, maintenance should cost between 66% and 90% of the total life
cycle costs. We can see in our survey that the majority of the
participants estimate their maintenance budget below the 50%
threshold. If we accept that these numbers are representative of a
modified situation, many hypothesis can be made to explain it.

Go to http://www.methodsandtools.com/dynpoll/oldpoll.php?Maintenance
to see these reasons and get more resources on software maintenance.
</POST>
<POST>
<POSTER> CBFalconer &lt;cbfalco...@yahoo.com&gt; </POSTER>
<POSTDATE> 2007-10-30T16:25:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
editormt wrote:

&gt; Software maintenance is an important part of the software development
&gt; activity, but it is also the less discussed. A recent poll seems to
&gt; show that the part of maintenance in software development budget is
&gt; going down. Why?
">

Because in c.l.c you are accessing the better programmers, who tend
to write perfect software, which anticipate all future
requirements, and have no bugs.  Next question.

--
Chuck F (cbfalconer at maineline dot net)
Available for consulting/temporary embedded and systems.
&lt; http://cbfalconer.home.att.net &gt;

--
Posted via a free Usenet account from http://www.teranews.com
</POST>
<POST>
<POSTER> &quot;Malcolm McLean&quot; &lt;regniz...@btinternet.com&gt; </POSTER>
<POSTDATE> 2007-10-30T18:58:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;editormt&quot; &lt;edi ... @methodsandtools.com&gt; wrote in message
">

news:1193751241.448119.50250@o3g2000hsb.googlegroups.com ...

<QUOTE PREVIOUSPOST="
&gt; Software maintenance is an important part of the software development
&gt; activity, but it is also the less discussed. A recent poll seems to
&gt; show that the part of maintenance in software development budget is
&gt; going down. Why?
">

Extreme programming. It has been recognised that it is easier to write
things from scratch than to try to endlessly patch old code.

--
Free games and programming goodies.
http://www.personal.leeds.ac.uk/~bgy1mm
</POST>
<POST>
<POSTER> jacob navia &lt;ja...@nospam.org&gt; </POSTER>
<POSTDATE> 2007-10-30T18:58:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Malcolm McLean wrote:

&gt; &quot;editormt&quot; &lt;edi ... @methodsandtools.com&gt; wrote in message
&gt; news:1193751241.448119.50250@o3g2000hsb.googlegroups.com ...
&gt;&gt; Software maintenance is an important part of the software development
&gt;&gt; activity, but it is also the less discussed. A recent poll seems to
&gt;&gt; show that the part of maintenance in software development budget is
&gt;&gt; going down. Why?

&gt; Extreme programming. It has been recognised that it is easier to write
&gt; things from scratch than to try to endlessly patch old code.
">

Specially when the salary of programmers goes down and down and down.

--
jacob navia
jacob at jacob point remcomp point fr
logiciels/informatique
http://www.cs.virginia.edu/~lcc-win32
</POST>
<POST>
<POSTER> santosh &lt;santosh....@gmail.com&gt; </POSTER>
<POSTDATE> 2007-10-30T21:01:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
jacob navia wrote:
&gt; Malcolm McLean wrote:

&gt;&gt; &quot;editormt&quot; &lt;edi ... @methodsandtools.com&gt; wrote in message
&gt;&gt; news:1193751241.448119.50250@o3g2000hsb.googlegroups.com ...
&gt;&gt;&gt; Software maintenance is an important part of the software
&gt;&gt;&gt; development activity, but it is also the less discussed. A recent
&gt;&gt;&gt; poll seems to show that the part of maintenance in software
&gt;&gt;&gt; development budget is going down. Why?

&gt;&gt; Extreme programming. It has been recognised that it is easier to
&gt;&gt; write things from scratch than to try to endlessly patch old code.

&gt; Specially when the salary of programmers goes down and down and down.
">

Interesting. Over here it's going up and up and up, at least for a
subset of &quot;programmers&quot;.
</POST>
<POST>
<POSTER> Flash Gordon &lt;s...@flash-gordon.me.uk&gt; </POSTER>
<POSTDATE> 2007-10-31T04:42:00 </POSTDATE>
Malcolm McLean wrote, On 30/10/07 22:58:

<QUOTE PREVIOUSPOST="
&gt; &quot;editormt&quot; &lt;edi ... @methodsandtools.com&gt; wrote in message
&gt; news:1193751241.448119.50250@o3g2000hsb.googlegroups.com ...
&gt;&gt; Software maintenance is an important part of the software development
&gt;&gt; activity, but it is also the less discussed. A recent poll seems to
&gt;&gt; show that the part of maintenance in software development budget is
&gt;&gt; going down. Why?

&gt; Extreme programming. It has been recognised that it is easier to write
&gt; things from scratch than to try to endlessly patch old code.
">

That is a vast oversimplification at the very least. I have 50,000 lines
of code, is it easier to change 10 lines of code to fix an issue or
rewrite the program? I have a 5 line program, is it easier to patch it
for a massive change or rewrite it?
--
Flash Gordon
</POST>
<POST>
<POSTER> Chris Dollin &lt;chris.dol...@hp.com&gt; </POSTER>
<POSTDATE> 2007-10-31T06:00:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Flash Gordon wrote:
&gt; Malcolm McLean wrote, On 30/10/07 22:58:

&gt;&gt; &quot;editormt&quot; &lt;edi ... @methodsandtools.com&gt; wrote in message
&gt;&gt; news:1193751241.448119.50250@o3g2000hsb.googlegroups.com ...
&gt;&gt;&gt; Software maintenance is an important part of the software development
&gt;&gt;&gt; activity, but it is also the less discussed. A recent poll seems to
&gt;&gt;&gt; show that the part of maintenance in software development budget is
&gt;&gt;&gt; going down. Why?

&gt;&gt; Extreme programming. It has been recognised that it is easier to write
&gt;&gt; things from scratch than to try to endlessly patch old code.

&gt; That is a vast oversimplification at the very least.
">

Granting that ...

<QUOTE PREVIOUSPOST="
&gt; I have 50,000 lines
&gt; of code, is it easier to change 10 lines of code to fix an issue or
&gt; rewrite the program? I have a 5 line program, is it easier to patch it
&gt; for a massive change or rewrite it?
">

He said /endlessly/.  One ten-line fix might be cost-effective. A thousand
might not be.

It's all choices of tradeoffs; one needs to know the business value and the
expected costs.

(I don't know what Malcolm meant when he said &quot;extreme programming&quot;, but I
do know that the term as I understand it doesn't mean (only) &quot;rewrite, don't
modify&quot;. If you /have/ a Whole Bunch Of Existing Code, how you deal with
it will Depend On Many Things, whether you're using XP or not.)

--
Chris &quot;not /that/ XP, the /real/ XP&quot; Dollin

Hewlett-Packard Limited                                          registered no:
registered office: Cain Road, Bracknell, Berks RG12 1HN          690597 England
</POST>
<POST>
<POSTER> Flash Gordon &lt;s...@flash-gordon.me.uk&gt; </POSTER>
<POSTDATE> 2007-10-31T14:59:00 </POSTDATE>
Chris Dollin wrote, On 31/10/07 10:00:

<QUOTE PREVIOUSPOST="
&gt; Flash Gordon wrote:

&gt;&gt; Malcolm McLean wrote, On 30/10/07 22:58:
&gt;&gt;&gt; &quot;editormt&quot; &lt;edi ... @methodsandtools.com&gt; wrote in message
&gt;&gt;&gt; news:1193751241.448119.50250@o3g2000hsb.googlegroups.com ...
&gt;&gt;&gt;&gt; Software maintenance is an important part of the software development
&gt;&gt;&gt;&gt; activity, but it is also the less discussed. A recent poll seems to
&gt;&gt;&gt;&gt; show that the part of maintenance in software development budget is
&gt;&gt;&gt;&gt; going down. Why?

&gt;&gt;&gt; Extreme programming. It has been recognised that it is easier to write
&gt;&gt;&gt; things from scratch than to try to endlessly patch old code.
&gt;&gt; That is a vast oversimplification at the very least.

&gt; Granting that ...
">

OK, so you agree with the main point of my post :-)

<QUOTE PREVIOUSPOST="
&gt;&gt; I have 50,000 lines
&gt;&gt; of code, is it easier to change 10 lines of code to fix an issue or
&gt;&gt; rewrite the program? I have a 5 line program, is it easier to patch it
&gt;&gt; for a massive change or rewrite it?

&gt; He said /endlessly/.  One ten-line fix might be cost-effective. A thousand
&gt; might not be.

&gt; It's all choices of tradeoffs; one needs to know the business value and the
&gt; expected costs.

&gt; (I don't know what Malcolm meant when he said &quot;extreme programming&quot;, but I
&gt;  do know that the term as I understand it doesn't mean (only) &quot;rewrite, don't
&gt;  modify&quot;. If you /have/ a Whole Bunch Of Existing Code, how you deal with
&gt;  it will Depend On Many Things, whether you're using XP or not.)
">

Yes, which was my point. Sometimes code needs to be scrapped and
rewritten, sometimes it needs to be modified. This applies at all scales
(yes, I've been involved in scrapping and rewriting what after the
rewrite was about 50000 LOC). So blanket advice to scrap and rewrite is
bad advice just as blanket advice to always modify what you have is bad.
--
Flash Gordon
</POST>
<POST>
<POSTER> rober...@ibd.nrc-cnrc.gc.ca (Walter Roberson) </POSTER>
<POSTDATE> 2007-10-31T15:33:00 </POSTDATE>
In article &lt;buvmv4x2v9. ... @news.flash-gordon.me.uk&gt;,
Flash Gordon  &lt;s ... @flash-gordon.me.uk&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt;Sometimes code needs to be scrapped and
&gt;rewritten, sometimes it needs to be modified. This applies at all scales
&gt;(yes, I've been involved in scrapping and rewriting what after the
&gt;rewrite was about 50000 LOC). So blanket advice to scrap and rewrite is
&gt;bad advice just as blanket advice to always modify what you have is bad.
">

Our particular development cycle usually involves writing something
in a prototyping language (e.g., MATLAB, maple, Mathematica, IDL)
and hacking on it endlessly for a few years, changing our mind about
what it is supposed to do several times a day. This is the exploratory
research phase, where we often do not know if something is possible
and we often do not know if we have reached the &quot;right&quot; answer.
The sort of code where a bug might happen to produce a better answer
than what we thought we were coding, leaving us to scratch our heads
and re-re-analyze to improve our techniques. Naturally, with so many
changes in purpose and technique going on, the end result is often
a coding mess.

Once we have figured out what works (and what doesn't) and have
a functional implementation, it's time to hand it over to another
group that extracts the good parts and rewrites them cleanly and
efficiently in C++ or C as part of our integrated research framework.

It would not be unfair to say that at that point we are throwing
out several 10's of kLOC and several person-years of coding, to be
rewritten into a completely different form. This isn't a waste of
time: it is the point that seperates the &quot;Research&quot; from the
&quot;Development&quot;.
--
So you found your solution
What will be your last contribution?
-- Supertramp (Fool's Overture)
</POST>
<POST>
<POSTER> Mark McIntyre &lt;markmcint...@spamcop.net&gt; </POSTER>
<POSTDATE> 2007-10-31T19:47:00 </POSTDATE>
On Tue, 30 Oct 2007 22:58:53 -0000, in comp.lang.c , &quot;Malcolm McLean&quot;

<QUOTE PREVIOUSPOST="
&lt;regniz ... @btinternet.com&gt; wrote:

&gt;&quot;editormt&quot; &lt;edi ... @methodsandtools.com&gt; wrote in message
&gt; news:1193751241.448119.50250@o3g2000hsb.googlegroups.com ...
&gt;&gt; Software maintenance is an important part of the software development
&gt;&gt; activity, but it is also the less discussed. A recent poll seems to
&gt;&gt; show that the part of maintenance in software development budget is
&gt;&gt; going down. Why?

&gt;Extreme programming. It has been recognised
">

The word you're looking for is 'postulated'.
And anyway Extreme Programming is just a high-falutin Web 2.0ism for
what most of us have done for decades, ie short-cycle continuous
development to cope with rapidly changing (or inadequately defined!)
business requirements, and a demand for rapid delivery of /something,
anything/....

<QUOTE PREVIOUSPOST="
&gt; that it is easier to write
&gt;things from scratch than to try to endlessly patch old code.
">

IMHO it is /sometimes/ easier to do this, and /sometimes/ more
complicated.

eg If I have a ten-million line accounting programme, I'm not going to
rewrite it from scratch to handle the change from two to zero decimals
for Icelandic Krona.

--
Mark McIntyre

&quot;Debugging is twice as hard as writing the code in the first place.
Therefore, if you write the code as cleverly as possible, you are,
by definition, not smart enough to debug it.&quot;
--Brian Kernighan
</POST>
<POST>
<POSTER> Mark McIntyre &lt;markmcint...@spamcop.net&gt; </POSTER>
<POSTDATE> 2007-10-31T19:50:00 </POSTDATE>
On Wed, 31 Oct 2007 10:00:43 +0000, in comp.lang.c , Chris Dollin

<QUOTE PREVIOUSPOST="
&lt;chris.dol ... @hp.com&gt; wrote:
&gt;He said /endlessly/.  One ten-line fix might be cost-effective. A thousand
&gt;might not be.
">

Define &quot;cost effective&quot;. Within this year's budget?

<QUOTE PREVIOUSPOST="
&gt;It's all choices of tradeoffs; one needs to know the business value and the
&gt;expected costs.
">

Absolutely. Something that often escapes the XP zealots, just as the
virtue of rapid development cycles often escapes the plan-it-to-death
zealots.

--
Mark McIntyre

&quot;Debugging is twice as hard as writing the code in the first place.
Therefore, if you write the code as cleverly as possible, you are,
by definition, not smart enough to debug it.&quot;
--Brian Kernighan
</POST>
<POST>
<POSTER> Ian Collins &lt;ian-n...@hotmail.com&gt; </POSTER>
<POSTDATE> 2007-10-31T21:23:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Mark McIntyre wrote:
&gt; And anyway Extreme Programming is just a high-falutin Web 2.0ism for
&gt; what most of us have done for decades, ie short-cycle continuous
&gt; development to cope with rapidly changing (or inadequately defined!)
&gt; business requirements, and a demand for rapid delivery of /something,
&gt; anything/....
">

That's simply not true, XP predates whatever today's definition of Web 2
is by many years and it encompasses a lot more than short-cycle
continuous development.

--
Ian Collins.
</POST>
<POST>
<POSTER> Chris Dollin &lt;chris.dol...@hp.com&gt; </POSTER>
<POSTDATE> 2007-11-01T04:48:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Mark McIntyre wrote:
&gt; On Wed, 31 Oct 2007 10:00:43 +0000, in comp.lang.c , Chris Dollin
&gt; &lt;chris.dol ... @hp.com&gt; wrote:

&gt;&gt;He said /endlessly/.  One ten-line fix might be cost-effective. A thousand
&gt;&gt;might not be.

&gt; Define &quot;cost effective&quot;. Within this year's budget?
">

Situation-dependant. How could it not be?

<QUOTE PREVIOUSPOST="
&gt;&gt;It's all choices of tradeoffs; one needs to know the business value and the
&gt;&gt;expected costs.

&gt; Absolutely. Something that often escapes the XP zealots,
">

Um ... XP's planning game is /about/ business value and costs. Those must
have been some interesting zealots. I suppose that's how we recognise
zealots of whatever stripe ...

--
Chris &quot;zealously against zealotry&quot; Dollin

Hewlett-Packard Limited registered office:                Cain Road, Bracknell,
registered no: 690597 England                                    Berks RG12 1HN
</POST>
<POST>
<POSTER> Mark McIntyre &lt;markmcint...@spamcop.net&gt; </POSTER>
<POSTDATE> 2007-11-01T09:23:00 </POSTDATE>
On Thu, 01 Nov 2007 08:48:27 +0000, in comp.lang.c , Chris Dollin

<QUOTE PREVIOUSPOST="
&lt;chris.dol ... @hp.com&gt; wrote:
&gt;Um ... XP's planning game is /about/ business value and costs.
">

I wish... I've met some folk who regard XP as about shipping code as
fast as possible, scoring points over the plodders still using trad
methods, and then clearing out quick before the maintenance costs kick
in.

<QUOTE PREVIOUSPOST="
&gt;Those must
&gt;have been some interesting zealots. I suppose that's how we recognise
&gt;zealots of whatever stripe ...
">

indeed !
--
Mark McIntyre

&quot;Debugging is twice as hard as writing the code in the first place.
Therefore, if you write the code as cleverly as possible, you are,
by definition, not smart enough to debug it.&quot;
--Brian Kernighan
</POST>
<POST>
<POSTER> Mark McIntyre &lt;markmcint...@spamcop.net&gt; </POSTER>
<POSTDATE> 2007-11-01T09:27:00 </POSTDATE>
On Thu, 01 Nov 2007 14:23:11 +1300, in comp.lang.c , Ian Collins

<QUOTE PREVIOUSPOST="
&lt;ian-n ... @hotmail.com&gt; wrote:
&gt;XP predates whatever today's definition of Web 2
&gt;is by many years and it encompasses a lot more than short-cycle
&gt;continuous development.
">

XP as nametag in popular use is very recent. Sure, Kent dreamed it up
in the mid nineties, but it wasn't popularised till much later, and
the principles which XP embodies have been around for many decades.
--
Mark McIntyre

&quot;Debugging is twice as hard as writing the code in the first place.
Therefore, if you write the code as cleverly as possible, you are,
by definition, not smart enough to debug it.&quot;
--Brian Kernighan
</POST>
<POST>
<POSTER> Chris Dollin &lt;chris.dol...@hp.com&gt; </POSTER>
<POSTDATE> 2007-11-01T09:34:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Mark McIntyre wrote:
&gt; On Thu, 01 Nov 2007 08:48:27 +0000, in comp.lang.c , Chris Dollin
&gt; &lt;chris.dol ... @hp.com&gt; wrote:

&gt;&gt;Um ... XP's planning game is /about/ business value and costs.

&gt; I wish...
">

Well, it is.

<QUOTE PREVIOUSPOST="
&gt; I've met some folk who regard XP as about shipping code as
&gt; fast as possible, scoring points over the plodders still using trad
&gt; methods, and then clearing out quick before the maintenance costs kick
&gt; in.
">

There is no method, however good, that can't be misused or abused by
sufficiently determined/ignorant/naive/malicious persons. I think the
&quot;clearing out quick&quot; is pretty obviously not in accordance with XP
as I have seen it expressed in the core books &amp; mailing list (although
one wonders what the contractual situation was).

I think I've done enough atopical writing for the moment.

--
Chris &quot;someone ask an interesting C question&quot; Dollin

Hewlett-Packard Limited     Cain Road, Bracknell,                registered no:
registered office:          Berks RG12 1HN                       690597 England
</POST>
<POST>
<POSTER> Ian Collins &lt;ian-n...@hotmail.com&gt; </POSTER>
<POSTDATE> 2007-11-01T14:33:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Mark McIntyre wrote:
&gt; On Thu, 01 Nov 2007 08:48:27 +0000, in comp.lang.c , Chris Dollin
&gt; &lt;chris.dol ... @hp.com&gt; wrote:

&gt;&gt; Um ... XP's planning game is /about/ business value and costs.

&gt; I wish... I've met some folk who regard XP as about shipping code as
&gt; fast as possible, scoring points over the plodders still using trad
&gt; methods, and then clearing out quick before the maintenance costs kick
&gt; in.
">

Then they are using then name without applying the practices.  Such
people give whatever they claim to be doing a bad name.  Don't judge
something until you have seen how it should be done.

--
Ian Collins.
</POST>
<POST>
<POSTER> Ian Collins &lt;ian-n...@hotmail.com&gt; </POSTER>
<POSTDATE> 2007-11-01T14:38:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Mark McIntyre wrote:
&gt; On Thu, 01 Nov 2007 14:23:11 +1300, in comp.lang.c , Ian Collins
&gt; &lt;ian-n ... @hotmail.com&gt; wrote:

&gt;&gt; XP predates whatever today's definition of Web 2
&gt;&gt; is by many years and it encompasses a lot more than short-cycle
&gt;&gt; continuous development.

&gt; XP as nametag in popular use is very recent. Sure, Kent dreamed it up
&gt; in the mid nineties, but it wasn't popularised till much later, and
&gt; the principles which XP embodies have been around for many decades.
">

It was polularised (at least here) in the late nineties, I adopted it
for my shop in 2000.

The principles of XP have been around for ages, but Kent's light bulb
moment was pull them all together to build a people centric development
process.

--
Ian Collins.
</POST>
<POST>
<POSTER> Flash Gordon &lt;s...@flash-gordon.me.uk&gt; </POSTER>
<POSTDATE> 2007-11-01T15:12:00 </POSTDATE>
Walter Roberson wrote, On 31/10/07 19:33:

<QUOTE PREVIOUSPOST="
&gt; In article &lt;buvmv4x2v9. ... @news.flash-gordon.me.uk&gt;,
&gt; Flash Gordon  &lt;s ... @flash-gordon.me.uk&gt; wrote:

&gt;&gt; Sometimes code needs to be scrapped and
&gt;&gt; rewritten, sometimes it needs to be modified. This applies at all scales
&gt;&gt; (yes, I've been involved in scrapping and rewriting what after the
&gt;&gt; rewrite was about 50000 LOC). So blanket advice to scrap and rewrite is
&gt;&gt; bad advice just as blanket advice to always modify what you have is bad.

&gt; Our particular development cycle usually involves writing something
&gt; in a prototyping language (e.g., MATLAB, maple, Mathematica, IDL)
">

&lt;snip&gt;

<QUOTE PREVIOUSPOST="
&gt; group that extracts the good parts and rewrites them cleanly and
&gt; efficiently in C++ or C as part of our integrated research framework.

&gt; It would not be unfair to say that at that point we are throwing
&gt; out several 10's of kLOC and several person-years of coding, to be
&gt; rewritten into a completely different form. This isn't a waste of
&gt; time: it is the point that seperates the &quot;Research&quot; from the
&gt; &quot;Development&quot;.
">

None of which contradicts what I said. I'm sure you do not go throwing
away 10's of kLOC on every change prior to passing it over for the
re-implementation, and I'm sure it does not get thrown away every time
it needs a change after that point. I would also be surprised if each
time you need to change a module within that code base you threw it
away, or each time you changed a function within the module.

Throw away code when it needs throwing away, modify it when it needs
modifying.
--
Flash Gordon
</POST>
<POST>
<POSTER> &quot;Malcolm McLean&quot; &lt;regniz...@btinternet.com&gt; </POSTER>
<POSTDATE> 2007-11-01T17:29:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Flash Gordon&quot; &lt;s ... @flash-gordon.me.uk&gt; wrote in message

&gt; None of which contradicts what I said. I'm sure you do not go throwing
&gt; away 10's of kLOC on every change prior to passing it over for the
&gt; re-implementation, and I'm sure it does not get thrown away every time it
&gt; needs a change after that point. I would also be surprised if each time
&gt; you need to change a module within that code base you threw it away, or
&gt; each time you changed a function within the module.

&gt; Throw away code when it needs throwing away, modify it when it needs
&gt; modifying.
">

Generally it is reckoned that you need to start over if you end up modifying
more than 20%. That's a much lower threshold than was previously accepted.

XP tends to look at existing practises, and instead of saying &quot;here's an
inefficiency we must stamp out&quot; it says &quot;why is this practise current?&quot;.
Then it formalises it by incorporating it into the method. So partly it is
just political, things we've always done - had to do - are now part of &quot;the
method&quot; so there's no time wasted apologising for them or disguising them.
Rewriting code is a case in point. It is given a fancy name - &quot;refactoring&quot;
to get it past the men in suits.

--
Free games and programming goodies.
http://www.personal.leeds.ac.uk/~bgy1mm
</POST>
<POST>
<POSTER> Richard &lt;rgr...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-11-01T18:07:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Malcolm McLean&quot; &lt;regniz ... @btinternet.com&gt; writes:
&gt; &quot;Flash Gordon&quot; &lt;s ... @flash-gordon.me.uk&gt; wrote in message

&gt;&gt; None of which contradicts what I said. I'm sure you do not go
&gt;&gt; throwing away 10's of kLOC on every change prior to passing it over
&gt;&gt; for the re-implementation, and I'm sure it does not get thrown away
&gt;&gt; every time it needs a change after that point. I would also be
&gt;&gt; surprised if each time you need to change a module within that code
&gt;&gt; base you threw it away, or each time you changed a function within
&gt;&gt; the module.

&gt;&gt; Throw away code when it needs throwing away, modify it when it needs
&gt;&gt; modifying.

&gt; Generally it is reckoned that you need to start over if you end up
&gt; modifying more than 20%. That's a much lower threshold than was
&gt; previously accepted.
">

Can you cite a report stating that? It depends very much on the
application structure and how it was coded.

It could well be that a suite of modules all bridge into the rest of the
application through a well defined API. These modules could be, say,
50%, of the entire app. But rewriting these doesn't mean touching the
rest.

<QUOTE PREVIOUSPOST="
- Hide quoted text - - Show quoted text -
">

<QUOTE PREVIOUSPOST="
&gt; XP tends to look at existing practises, and instead of saying &quot;here's
&gt; an inefficiency we must stamp out&quot; it says &quot;why is this practise
&gt; current?&quot;. Then it formalises it by incorporating it into the
&gt; method. So partly it is just political, things we've always done - had
&gt; to do - are now part of &quot;the method&quot; so there's no time wasted
&gt; apologising for them or disguising them. Rewriting code is a case in
&gt; point. It is given a fancy name - &quot;refactoring&quot; to get it past the men
&gt; in suits.
">
</POST>
<POST>
<POSTER> &quot;Malcolm McLean&quot; &lt;regniz...@btinternet.com&gt; </POSTER>
<POSTDATE> 2007-11-01T19:10:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Richard&quot; &lt;rgr ... @gmail.com&gt; wrote in message
">

news:u9vpv4-10a.ln1@news.individual.net ...

<QUOTE PREVIOUSPOST="
&gt; &quot;Malcolm McLean&quot; &lt;regniz ... @btinternet.com&gt; writes:

&gt;&gt; &quot;Flash Gordon&quot; &lt;s ... @flash-gordon.me.uk&gt; wrote in message

&gt;&gt;&gt; None of which contradicts what I said. I'm sure you do not go
&gt;&gt;&gt; throwing away 10's of kLOC on every change prior to passing it over
&gt;&gt;&gt; for the re-implementation, and I'm sure it does not get thrown away
&gt;&gt;&gt; every time it needs a change after that point. I would also be
&gt;&gt;&gt; surprised if each time you need to change a module within that code
&gt;&gt;&gt; base you threw it away, or each time you changed a function within
&gt;&gt;&gt; the module.

&gt;&gt;&gt; Throw away code when it needs throwing away, modify it when it needs
&gt;&gt;&gt; modifying.

&gt;&gt; Generally it is reckoned that you need to start over if you end up
&gt;&gt; modifying more than 20%. That's a much lower threshold than was
&gt;&gt; previously accepted.

&gt; Can you cite a report stating that? It depends very much on the
&gt; application structure and how it was coded.

&gt; It could well be that a suite of modules all bridge into the rest of the
&gt; application through a well defined API. These modules could be, say,
&gt; 50%, of the entire app. But rewriting these doesn't mean touching the
&gt; rest.
">

That's part of the skill. Knowing where the boundaries are so you know what
to &quot;refactor&quot;.
The 20% figure is bandied about quite a bit. However it is not very
scientific. In practise &quot;refactoring&quot; doesn't usually keep the external
interfaces the same, so in fact it is not distinguished from &quot;rewriting&quot;.
The insight is that generally it is cheaper to scrap code and start over
than to try to modify.

--
Free games and programming goodies.
http://www.personal.leeds.ac.uk/~bgy1mm
</POST>
<POST>
<POSTER> Richard &lt;rgr...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-11-01T19:33:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Malcolm McLean&quot; &lt;regniz ... @btinternet.com&gt; writes:
&gt; &quot;Richard&quot; &lt;rgr ... @gmail.com&gt; wrote in message
&gt; news:u9vpv4-10a.ln1@news.individual.net ...
&gt;&gt; &quot;Malcolm McLean&quot; &lt;regniz ... @btinternet.com&gt; writes:

&gt;&gt;&gt; &quot;Flash Gordon&quot; &lt;s ... @flash-gordon.me.uk&gt; wrote in message

&gt;&gt;&gt;&gt; None of which contradicts what I said. I'm sure you do not go
&gt;&gt;&gt;&gt; throwing away 10's of kLOC on every change prior to passing it over
&gt;&gt;&gt;&gt; for the re-implementation, and I'm sure it does not get thrown away
&gt;&gt;&gt;&gt; every time it needs a change after that point. I would also be
&gt;&gt;&gt;&gt; surprised if each time you need to change a module within that code
&gt;&gt;&gt;&gt; base you threw it away, or each time you changed a function within
&gt;&gt;&gt;&gt; the module.

&gt;&gt;&gt;&gt; Throw away code when it needs throwing away, modify it when it needs
&gt;&gt;&gt;&gt; modifying.

&gt;&gt;&gt; Generally it is reckoned that you need to start over if you end up
&gt;&gt;&gt; modifying more than 20%. That's a much lower threshold than was
&gt;&gt;&gt; previously accepted.

&gt;&gt; Can you cite a report stating that? It depends very much on the
&gt;&gt; application structure and how it was coded.

&gt;&gt; It could well be that a suite of modules all bridge into the rest of the
&gt;&gt; application through a well defined API. These modules could be, say,
&gt;&gt; 50%, of the entire app. But rewriting these doesn't mean touching the
&gt;&gt; rest.

&gt; That's part of the skill. Knowing where the boundaries are so you know
&gt; what to &quot;refactor&quot;.
&gt; The 20% figure is bandied about quite a bit. However it is not very
&gt; scientific. In practise &quot;refactoring&quot; doesn't usually keep the
&gt; external interfaces the same, so in fact it is not distinguished from
">

This might be your experiences and can be the case in poorly designed
systems.

<QUOTE PREVIOUSPOST="
&gt; &quot;rewriting&quot;. The insight is that generally it is cheaper to scrap code
&gt; and start over than to try to modify.
">

Its a case by case thing and there are no hard and fast rules. Sometimes
it is impractical to rewrite since there is no suitable design
documents from the original documenting each and every data state and
which ones are important to keep in order to correctly process the
legacy data.

My main point is this : it is certainly not true that if 20% of the code
base must be modified then its better to rewrite the entire system in
all cases. In fact, I suspect its only valid in a very small %.
</POST>
<POST>
<POSTER> &quot;Malcolm McLean&quot; &lt;regniz...@btinternet.com&gt; </POSTER>
<POSTDATE> 2007-11-01T19:53:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Richard&quot; &lt;rgr ... @gmail.com&gt; wrote in message
&gt; Its a case by case thing and there are no hard and fast rules. Sometimes
&gt; it is impractical to rewrite since there is no suitable design
&gt; documents from the original documenting each and every data state and
&gt; which ones are important to keep in order to correctly process the
&gt; legacy data.
">

Document each and every data state? Wouldn't it be easier just to say that
the code documents each and every possible state of the algorithm?

The snags with a lot of formal methods are mind-crashingly simple. Instead
of wrting correct code first time, we write a correct design first time, and
then get a low skilled person to code it up.
</POST>
<POST>
<POSTER> Richard &lt;rgr...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-11-01T20:05:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Malcolm McLean&quot; &lt;regniz ... @btinternet.com&gt; writes:
&gt; &quot;Richard&quot; &lt;rgr ... @gmail.com&gt; wrote in message
&gt;&gt; Its a case by case thing and there are no hard and fast rules. Sometimes
&gt;&gt; it is impractical to rewrite since there is no suitable design
&gt;&gt; documents from the original documenting each and every data state and
&gt;&gt; which ones are important to keep in order to correctly process the
&gt;&gt; legacy data.

&gt; Document each and every data state? Wouldn't it be easier just to say
&gt; that the code documents each and every possible state of the
&gt; algorithm?
">

Yes. it would be easier to say that. But in the real world code often
does a lot more than people think....

<QUOTE PREVIOUSPOST="
&gt; The snags with a lot of formal methods are mind-crashingly
&gt; simple. Instead of wrting correct code first time, we write a correct
&gt; design first time, and then get a low skilled person to code it up.
">

low skilled people can not code anything up in C.
</POST>
<POST>
<POSTER> James Kuyper &lt;jameskuy...@verizon.net&gt; </POSTER>
<POSTDATE> 2007-11-01T23:16:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Richard wrote:
&gt; &quot;Malcolm McLean&quot; &lt;regniz ... @btinternet.com&gt; writes:
...
&gt;&gt; The snags with a lot of formal methods are mind-crashingly
&gt;&gt; simple. Instead of wrting correct code first time, we write a correct
&gt;&gt; design first time, and then get a low skilled person to code it up.

&gt; low skilled people can not code anything up in C.
">

Sure they can. Low skilled people have done most of the coding for the
programs I'm responsible for. Highly skilled people do the detailed
design, participate in code reviews, and sign off on the test results. I
won't claim this was ideal; I'd love to have a team of people who were
all at my own skill level or higher. However, we do produce working code
of acceptable quality, and we cost the company a whole lot less than my
ideal team would cost. I doubt that my company is the only one that's
chosen this trade-off, regardless of whether or not it was a wise one.
</POST>
<POST>
<POSTER> Richard &lt;rgr...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-11-01T23:25:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
James Kuyper &lt;jameskuy ... @verizon.net&gt; writes:
&gt; Richard wrote:
&gt;&gt; &quot;Malcolm McLean&quot; &lt;regniz ... @btinternet.com&gt; writes:
&gt; ...
&gt;&gt;&gt; The snags with a lot of formal methods are mind-crashingly
&gt;&gt;&gt; simple. Instead of wrting correct code first time, we write a correct
&gt;&gt;&gt; design first time, and then get a low skilled person to code it
&gt;&gt;&gt; up.

&gt;&gt; low skilled people can not code anything up in C.

&gt; Sure they can. Low skilled people have done most of the coding for the
&gt; programs I'm responsible for. Highly skilled people do the detailed
&gt; design, participate in code reviews, and sign off on the test
">

Highly skilled people code too. Low skilled people will turn out poor
code.

<QUOTE PREVIOUSPOST="
&gt; results. I won't claim this was ideal; I'd love to have a team of
&gt; people who were all at my own skill level or higher. However, we do
">

Is higher possible? :-;

<QUOTE PREVIOUSPOST="
&gt; produce working code of acceptable quality, and we cost the company a
&gt; whole lot less than my ideal team would cost. I doubt that my company
&gt; is the only one that's chosen this trade-off, regardless of whether or
&gt; not it was a wise one.
">

Low skilled people can produce code. Yes. When I said &quot;anything&quot; above I
was being a little too extreme I suppose.
</POST>
<POST>
<POSTER> James Kuyper &lt;jameskuy...@verizon.net&gt; </POSTER>
<POSTDATE> 2007-11-01T23:49:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Richard wrote:
&gt; James Kuyper &lt;jameskuy ... @verizon.net&gt; writes:
...
&gt;&gt; Sure they can. Low skilled people have done most of the coding for the
&gt;&gt; programs I'm responsible for. Highly skilled people do the detailed
&gt;&gt; design, participate in code reviews, and sign off on the test

&gt; Highly skilled people code too.
">

Yes, that too. There aren't enough people in my group for anyone to be a
non-coding specialist.

&gt; Low skilled people will turn out poor code.

Yes, but with supervision that poor code can be caught and corrected.

<QUOTE PREVIOUSPOST="
&gt;&gt; results. I won't claim this was ideal; I'd love to have a team of
&gt;&gt; people who were all at my own skill level or higher. However, we do

&gt; Is higher possible? :-;
">

Thanks for the vote of confidence!
</POST>
<POST>
<POSTER> Ian Collins &lt;ian-n...@hotmail.com&gt; </POSTER>
<POSTDATE> 2007-11-02T01:45:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Malcolm McLean wrote:

&gt; That's part of the skill. Knowing where the boundaries are so you know
&gt; what to &quot;refactor&quot;.
&gt; The 20% figure is bandied about quite a bit. However it is not very
&gt; scientific. In practise &quot;refactoring&quot; doesn't usually keep the external
&gt; interfaces the same, so in fact it is not distinguished from
&gt; &quot;rewriting&quot;. The insight is that generally it is cheaper to scrap code
&gt; and start over than to try to modify.
">

Nonsense, refactoring does not change the behaviour of the code, which
includes its public interfaces.  The term is abused all to often when
that is being done is a rewrite.

--
Ian Collins.
</POST>
<POST>
<POSTER> Ian Collins &lt;ian-n...@hotmail.com&gt; </POSTER>
<POSTDATE> 2007-11-02T01:47:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Malcolm McLean wrote:

&gt; &quot;Flash Gordon&quot; &lt;s ... @flash-gordon.me.uk&gt; wrote in message

&gt;&gt; None of which contradicts what I said. I'm sure you do not go throwing
&gt;&gt; away 10's of kLOC on every change prior to passing it over for the
&gt;&gt; re-implementation, and I'm sure it does not get thrown away every time
&gt;&gt; it needs a change after that point. I would also be surprised if each
&gt;&gt; time you need to change a module within that code base you threw it
&gt;&gt; away, or each time you changed a function within the module.

&gt;&gt; Throw away code when it needs throwing away, modify it when it needs
&gt;&gt; modifying.

&gt; Generally it is reckoned that you need to start over if you end up
&gt; modifying more than 20%. That's a much lower threshold than was
&gt; previously accepted.

&gt; XP tends to look at existing practises, and instead of saying &quot;here's an
&gt; inefficiency we must stamp out&quot; it says &quot;why is this practise current?&quot;.
">

No it does not.

<QUOTE PREVIOUSPOST="
&gt; Then it formalises it by incorporating it into the method. So partly it
&gt; is just political, things we've always done - had to do - are now part
&gt; of &quot;the method&quot; so there's no time wasted apologising for them or
&gt; disguising them. Rewriting code is a case in point. It is given a fancy
&gt; name - &quot;refactoring&quot; to get it past the men in suits.
">

You should read a decent book on refactoring, you obviously don't know
what you are talking about.

--
Ian Collins.
</POST>
<POST>
<POSTER> r...@hoekstra-uitgeverij.nl (Richard Bos) </POSTER>
<POSTDATE> 2007-11-02T03:26:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Ian Collins &lt;ian-n ... @hotmail.com&gt; wrote:
&gt; people centric development process.
">

Bucket, please.

Richard
</POST>
<POST>
<POSTER> Chris Dollin &lt;chris.dol...@hp.com&gt; </POSTER>
<POSTDATE> 2007-11-02T04:57:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Malcolm McLean wrote:
&gt; XP tends to look at existing practises, and instead of saying &quot;here's an
&gt; inefficiency we must stamp out&quot; it says &quot;why is this practise current?&quot;.
&gt; Then it formalises it by incorporating it into the method. So partly it is
&gt; just political, things we've always done - had to do - are now part of &quot;the
&gt; method&quot; so there's no time wasted apologising for them or disguising them.
&gt; Rewriting code is a case in point. It is given a fancy name - &quot;refactoring&quot;
&gt; to get it past the men in suits.
">

Refactoring isn't just &quot;rewriting code&quot;. It's making meaning-preserving (in
context) transformations to the code to improve the design (where &quot;improve&quot;
is along whatever metrics are important in the context), often followed by
value-adding changes to the code that are enabled or assisted by the
refactoring.

Refactoring also implies ways of showing that the refactoring hasn't broken
the code; by implication (the refactoring is performed by a reliable tool
that doesn't make silly mistakes) or by testing (running the relevant [1]
test suites, doing manual testing if there's no other way).

Claiming that refactorings are just the rewritings we've always done -- which
it my reading of Malcolm's paragraph above -- seems to me to be a dreadful
misrepresentation.

[1] Which is all of them, eventually.

--
Chris &quot;see Martin Fowler's book for extended (but not C) discussion&quot; Dollin

Hewlett-Packard Limited registered office:                Cain Road, Bracknell,
registered no: 690597 England                                    Berks RG12 1HN
</POST>
<POST>
<POSTER> Flash Gordon &lt;s...@flash-gordon.me.uk&gt; </POSTER>
<POSTDATE> 2007-11-02T04:40:00 </POSTDATE>
Ian Collins wrote, On 02/11/07 05:45:

<QUOTE PREVIOUSPOST="
&gt; Malcolm McLean wrote:
&gt;&gt; That's part of the skill. Knowing where the boundaries are so you know
&gt;&gt; what to &quot;refactor&quot;.
&gt;&gt; The 20% figure is bandied about quite a bit. However it is not very
&gt;&gt; scientific. In practise &quot;refactoring&quot; doesn't usually keep the external
&gt;&gt; interfaces the same, so in fact it is not distinguished from
&gt;&gt; &quot;rewriting&quot;. The insight is that generally it is cheaper to scrap code
&gt;&gt; and start over than to try to modify.
">

Well, at least you have gone from a blanket scrap and rewrite to
&quot;generally&quot;, i.e. not always.

<QUOTE PREVIOUSPOST="
&gt; Nonsense, refactoring does not change the behaviour of the code, which
&gt; includes its public interfaces.  The term is abused all to often when
&gt; that is being done is a rewrite.
">

Also refactoring in at least some cases does not involve rewriting the
code being refactored. On one occasion when I was refactoring a project
I had to rename some functions, move a few bits about, and change under
1% of the code to go from what I considered to be a terrible structure
to a really nice structure.

Re-factoring can be as simple as pulling a block of code out of one
function in to a separate function and calling it from the first
function. Or it can involve a lot more change and major rewrites.

Finally, there are some problem domains where if you know the domain
well you can predict extremely accurately where requirements will change
over time and in general what sort of changes will occur and design your
SW specifically to allow those changes. Sometimes you will be wrong, and
sometimes it is simply not possible to guess what is likely, but in some
domains it is.
--
Flash Gordon
Who rarely thinks that one solution fits all situations
</POST>
<POST>
<POSTER> Mark McIntyre &lt;markmcint...@spamcop.net&gt; </POSTER>
<POSTDATE> 2007-11-02T10:44:00 </POSTDATE>
On Fri, 02 Nov 2007 07:26:41 GMT, in comp.lang.c ,

<QUOTE PREVIOUSPOST="
r ... @hoekstra-uitgeverij.nl (Richard Bos) wrote:
&gt;Ian Collins &lt;ian-n ... @hotmail.com&gt; wrote:

&gt;&gt; people centric development process.

&gt;Bucket, please.
">

Here, use the one I just used after reading that hideous
managementspeak .. :-)
--
Mark McIntyre

&quot;Debugging is twice as hard as writing the code in the first place.
Therefore, if you write the code as cleverly as possible, you are,
by definition, not smart enough to debug it.&quot;
--Brian Kernighan
</POST>
<POST>
<POSTER> Mark McIntyre &lt;markmcint...@spamcop.net&gt; </POSTER>
<POSTDATE> 2007-11-02T10:49:00 </POSTDATE>
On Fri, 02 Nov 2007 07:33:13 +1300, in comp.lang.c , Ian Collins

<QUOTE PREVIOUSPOST="
&lt;ian-n ... @hotmail.com&gt; wrote:
&gt;Don't judge
&gt;something until you have seen how it should be done.
">

Ive never said I was judging it. I've been using the technique since
when people thought digital watches were cool.  What I'm judging is
the ludicrous name. There's nothing extreme about it, and adding
hideous acronym-ready names to methodologies makes me reach for the
pointed stick.

Also lets remember there ain't no silver bullet, and zealots of all
sorts must be burned at the stake, ere they infect everyone with their
heretical ways, their filthy fingers are not fit to sully the
keyboards of the righteous, froth, rant...

I'll get me coat.
--
Mark McIntyre

&quot;Debugging is twice as hard as writing the code in the first place.
Therefore, if you write the code as cleverly as possible, you are,
by definition, not smart enough to debug it.&quot;
--Brian Kernighan
</POST>
<POST>
<POSTER> Chris Dollin &lt;chris.dol...@hp.com&gt; </POSTER>
<POSTDATE> 2007-11-02T10:59:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Mark McIntyre wrote:
&gt; On Fri, 02 Nov 2007 07:33:13 +1300, in comp.lang.c , Ian Collins
&gt; &lt;ian-n ... @hotmail.com&gt; wrote:

&gt;&gt;Don't judge
&gt;&gt;something until you have seen how it should be done.

&gt; Ive never said I was judging it. I've been using the technique
">

Which is &quot;the&quot; technique here? XP isn't &quot;a technique&quot;, its a bunch of
practices and an attitude. Do you mean you're an XP-er, or not?

<QUOTE PREVIOUSPOST="
&gt; since when people thought digital watches were cool.  What I'm judging is
&gt; the ludicrous name. There's nothing extreme about it,
">

Push the practices to their limit -- as TDD and pair-programming do,
for example -- /is/ extreme.

<QUOTE PREVIOUSPOST="
&gt; and adding hideous acronym-ready names to methodologies
">

I'm finding it hard to imagine a /non/-acronymready name. As acronyms
go, XP doesn't seem to be particularly extreme.

[Whether it's a good name or not I shall carefully not have an opinion on.]

<QUOTE PREVIOUSPOST="
&gt; makes me reach for the pointed stick.
">

Methodologies are not vampires. I don't know whether that's a good thing
or not.

<QUOTE PREVIOUSPOST="
&gt; Also lets remember there ain't no silver bullet, and zealots of all
&gt; sorts must be burned at the stake, ere they infect everyone with their
&gt; heretical ways, their filthy fingers are not fit to sully the
&gt; keyboards of the righteous, froth, rant...
">

Brother! No, hand on a mo --

<QUOTE PREVIOUSPOST="
&gt; I'll get me coat.
">

Pub?

--
Chris &quot;Buffy, the methodology slayer&quot; Dollin

Hewlett-Packard Limited     Cain Road, Bracknell,                registered no:
registered office:          Berks RG12 1HN                       690597 England
</POST>
<POST>
<POSTER> &quot;Malcolm McLean&quot; &lt;regniz...@btinternet.com&gt; </POSTER>
<POSTDATE> 2007-11-03T03:03:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Ian Collins&quot; &lt;ian-n ... @hotmail.com&gt; wrote in message
&gt; Malcolm McLean wrote:

&gt;&gt; That's part of the skill. Knowing where the boundaries are so you know
&gt;&gt; what to &quot;refactor&quot;.
&gt;&gt; The 20% figure is bandied about quite a bit. However it is not very
&gt;&gt; scientific. In practise &quot;refactoring&quot; doesn't usually keep the external
&gt;&gt; interfaces the same, so in fact it is not distinguished from
&gt;&gt; &quot;rewriting&quot;. The insight is that generally it is cheaper to scrap code
&gt;&gt; and start over than to try to modify.

&gt; Nonsense, refactoring does not change the behaviour of the code, which
&gt; includes its public interfaces.  The term is abused all to often when
&gt; that is being done is a rewrite.
">

I've heard enough people abuse the term to realise that it is largely a
euphemism for rewriting. Normally code is rewritten because it is buggy, or
because someone wants to extend functionality. However there is a strong
case for rewriting working code that is a mess. The other reason is
optimisation. That's where the problems come in. Very commonly you optimise
by saving intermediate calculations so they don't need to be repeated. So
you cannot actually keep the public interface the same, although the
underlying functionality is the same.

However it is a good thing to have a buzzy term for &quot;rewrite&quot;. &quot;Rewrite&quot;
carries too many negative connotations. Appearances matter. It shouldn't be
that way, but it is.

--
Free games and programming goodies.
http://www.personal.leeds.ac.uk/~bgy1mm
</POST>
<POST>
<POSTER> Ian Collins &lt;ian-n...@hotmail.com&gt; </POSTER>
<POSTDATE> 2007-11-03T03:33:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Malcolm McLean wrote:

&gt; However it is a good thing to have a buzzy term for &quot;rewrite&quot;. &quot;Rewrite&quot;
&gt; carries too many negative connotations. Appearances matter. It shouldn't
&gt; be that way, but it is.
">

No, you should call a spade a spade.  If you have to hide behind buzz
words, either your organisation and/or process is broken.

--
Ian Collins.
</POST>
<POST>
<POSTER> CBFalconer &lt;cbfalco...@yahoo.com&gt; </POSTER>
<POSTDATE> 2007-11-03T03:23:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Malcolm McLean wrote:
&gt; &quot;Ian Collins&quot; &lt;ian-n ... @hotmail.com&gt; wrote in message

... snip ...

&gt;&gt; Nonsense, refactoring does not change the behaviour of the code,
&gt;&gt; which includes its public interfaces.  The term is abused all to
&gt;&gt; often when that is being done is a rewrite.

&gt; I've heard enough people abuse the term to realise that it is
&gt; largely a euphemism for rewriting. Normally code is rewritten
&gt; because it is buggy, or because someone wants to extend
&gt; functionality. However there is a strong case for rewriting
&gt; working code that is a mess. The other reason is optimisation.
&gt; That's where the problems come in. Very commonly you optimise
&gt; by saving intermediate calculations so they don't need to be
&gt; repeated. So you cannot actually keep the public interface the
&gt; same, although the underlying functionality is the same.

&gt; However it is a good thing to have a buzzy term for &quot;rewrite&quot;.
&gt; &quot;Rewrite&quot; carries too many negative connotations. Appearances
&gt; matter. It shouldn't be that way, but it is.
">

I have been known to 'rewrite' the code just to familiarize myself
with the original.  In this case the first rewrite consists of
proper (to me) formatting.

--
Chuck F (cbfalconer at maineline dot net)
Available for consulting/temporary embedded and systems.
&lt; http://cbfalconer.home.att.net &gt;

--
Posted via a free Usenet account from http://www.teranews.com
</POST>
<POST>
<POSTER> Mark McIntyre &lt;markmcint...@spamcop.net&gt; </POSTER>
<POSTDATE> 2007-11-04T09:56:00 </POSTDATE>
On Fri, 02 Nov 2007 14:59:59 +0000, in comp.lang.c , Chris Dollin

<QUOTE PREVIOUSPOST="
&lt;chris.dol ... @hp.com&gt; wrote:
&gt;Do you mean you're an XP-er, or not?
">

I hotly deny that I'm any kind of anything-er.

<QUOTE PREVIOUSPOST="
&gt;&gt; since when people thought digital watches were cool.  What I'm judging is
&gt;&gt; the ludicrous name. There's nothing extreme about it,

&gt;Push the practices to their limit -- as TDD and pair-programming do,
&gt;for example -- /is/ extreme.
">

We can agree to disagree, I'm sure.

<QUOTE PREVIOUSPOST="
&gt;&gt; makes me reach for the pointed stick.

&gt;Methodologies are not vampires. I don't know whether that's a good thing
&gt;or not.
">

Its for poking practitioners with, to see if they're alive or zombie
followers.

<QUOTE PREVIOUSPOST="
&gt;&gt; I'll get me coat.

&gt;Pub?
">

Works for me...

--
Mark McIntyre

&quot;Debugging is twice as hard as writing the code in the first place.
Therefore, if you write the code as cleverly as possible, you are,
by definition, not smart enough to debug it.&quot;
--Brian Kernighan
</POST>
<POST>
<POSTER> Mark McIntyre &lt;markmcint...@spamcop.net&gt; </POSTER>
<POSTDATE> 2007-11-04T09:57:00 </POSTDATE>
On Sat, 03 Nov 2007 20:33:27 +1300, in comp.lang.c , Ian Collins

<QUOTE PREVIOUSPOST="
&lt;ian-n ... @hotmail.com&gt; wrote:
&gt;Malcolm McLean wrote:

&gt;&gt; However it is a good thing to have a buzzy term for &quot;rewrite&quot;. &quot;Rewrite&quot;
&gt;&gt; carries too many negative connotations. Appearances matter. It shouldn't
&gt;&gt; be that way, but it is.

&gt;No, you should call a spade a spade.  If you have to hide behind buzz
&gt;words, either your organisation and/or process is broken.
">

Welcome to Fantasy island. :-)

Show me a senior manager who prefers &quot;rewrite&quot; to &quot;refactor&quot;, or
&quot;sack&quot; to &quot;downsize&quot; for that matter.
--
Mark McIntyre

&quot;Debugging is twice as hard as writing the code in the first place.
Therefore, if you write the code as cleverly as possible, you are,
by definition, not smart enough to debug it.&quot;
--Brian Kernighan
</POST>
<POST>
<POSTER> Ian Collins &lt;ian-n...@hotmail.com&gt; </POSTER>
<POSTDATE> 2007-11-04T13:26:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Mark McIntyre wrote:
&gt; On Sat, 03 Nov 2007 20:33:27 +1300, in comp.lang.c , Ian Collins
&gt; &lt;ian-n ... @hotmail.com&gt; wrote:

&gt;&gt; Malcolm McLean wrote:
&gt;&gt;&gt; However it is a good thing to have a buzzy term for &quot;rewrite&quot;. &quot;Rewrite&quot;
&gt;&gt;&gt; carries too many negative connotations. Appearances matter. It shouldn't
&gt;&gt;&gt; be that way, but it is.

&gt;&gt; No, you should call a spade a spade.  If you have to hide behind buzz
&gt;&gt; words, either your organisation and/or process is broken.

&gt; Welcome to Fantasy island. :-)

&gt; Show me a senior manager who prefers &quot;rewrite&quot; to &quot;refactor&quot;, or
&gt; &quot;sack&quot; to &quot;downsize&quot; for that matter.
">

Me?

--
Ian Collins.
</POST>
<POST>
<POSTER> &quot;Malcolm McLean&quot; &lt;regniz...@btinternet.com&gt; </POSTER>
<POSTDATE> 2007-11-04T15:52:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Ian Collins&quot; &lt;ian-n ... @hotmail.com&gt; wrote in message
&gt; Mark McIntyre wrote:

&gt;&gt; Show me a senior manager who prefers &quot;rewrite&quot; to &quot;refactor&quot;, or
&gt;&gt; &quot;sack&quot; to &quot;downsize&quot; for that matter.

&gt; Me?
">

Social manipulation works.
Most people, if you do a straw poll, will say that what you call the beer,
soap powder, or whatever has no impact on their purchasing decison. However
manufacturers spend large sums of money on brand management.

Similarly if you ask a manager, upfront, &quot;do you prefer people to speak
honestly or do you like buzzwords?&quot;, they will usually say that they believe
in plain English. Sometimes it is true, but generally the situation is that,
like the consumers, they have little insight into their own behaviour.
XP works very largely because it reChristens existing practise, such as
rewriting code, patch and fix, and feature creep, instead of trying to force
a alien mould onto the programmer. There's more it than that, of course, but
the marketing aspect shouldn't be downplayed.

--
Free games and programming goodies.
http://www.personal.leeds.ac.uk/~bgy1mm
</POST>
<POST>
<POSTER> Ian Collins &lt;ian-n...@hotmail.com&gt; </POSTER>
<POSTDATE> 2007-11-04T23:58:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Malcolm McLean wrote:
&gt; &quot;Ian Collins&quot; &lt;ian-n ... @hotmail.com&gt; wrote in message
&gt;&gt; Mark McIntyre wrote:

&gt;&gt;&gt; Show me a senior manager who prefers &quot;rewrite&quot; to &quot;refactor&quot;, or
&gt;&gt;&gt; &quot;sack&quot; to &quot;downsize&quot; for that matter.

&gt;&gt; Me?

&gt; Social manipulation works.
&gt; Most people, if you do a straw poll, will say that what you call the
&gt; beer, soap powder, or whatever has no impact on their purchasing
&gt; decison. However manufacturers spend large sums of money on brand
&gt; management.

&gt; Similarly if you ask a manager, upfront, &quot;do you prefer people to speak
&gt; honestly or do you like buzzwords?&quot;, they will usually say that they
&gt; believe in plain English. Sometimes it is true, but generally the
&gt; situation is that, like the consumers, they have little insight into
&gt; their own behaviour.
">

That's one way that Kiwis differ from us Poms, a lot more straight
talking goes on down here!

<QUOTE PREVIOUSPOST="
&gt; XP works very largely because it reChristens existing practise, such as
&gt; rewriting code, patch and fix, and feature creep, instead of trying to
&gt; force a alien mould onto the programmer. There's more it than that, of
&gt; course, but the marketing aspect shouldn't be downplayed.
">

There's a lot more to it than that.

--
Ian Collins.
</POST>
<POST>
<POSTER> Chris Dollin &lt;chris.dol...@hp.com&gt; </POSTER>
<POSTDATE> 2007-11-05T05:06:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Malcolm McLean wrote:
&gt; &quot;Ian Collins&quot; &lt;ian-n ... @hotmail.com&gt; wrote in message
&gt;&gt; Malcolm McLean wrote:

&gt;&gt;&gt; That's part of the skill. Knowing where the boundaries are so you know
&gt;&gt;&gt; what to &quot;refactor&quot;.
&gt;&gt;&gt; The 20% figure is bandied about quite a bit. However it is not very
&gt;&gt;&gt; scientific. In practise &quot;refactoring&quot; doesn't usually keep the external
&gt;&gt;&gt; interfaces the same, so in fact it is not distinguished from
&gt;&gt;&gt; &quot;rewriting&quot;. The insight is that generally it is cheaper to scrap code
&gt;&gt;&gt; and start over than to try to modify.

&gt;&gt; Nonsense, refactoring does not change the behaviour of the code, which
&gt;&gt; includes its public interfaces.  The term is abused all to often when
&gt;&gt; that is being done is a rewrite.

&gt; I've heard enough people abuse the term to realise that
">

/for them/

<QUOTE PREVIOUSPOST="
&gt; it is largely a euphemism for rewriting.
">

You don't have to perpetuate their abuse.

--
Chris &quot;sheesh&quot; Dollin

Hewlett-Packard Limited                                          registered no:
registered office: Cain Road, Bracknell, Berks RG12 1HN          690597 England
</POST>
<POST>
<POSTER> Chris Dollin &lt;chris.dol...@hp.com&gt; </POSTER>
<POSTDATE> 2007-11-05T05:51:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Ian Collins wrote:
&gt; Malcolm McLean wrote:
&gt;&gt; XP works very largely because it reChristens existing practise, such as
&gt;&gt; rewriting code, patch and fix, and feature creep, instead of trying to
&gt;&gt; force a alien mould onto the programmer. There's more it than that, of
&gt;&gt; course, but the marketing aspect shouldn't be downplayed.

&gt; There's a lot more to it than that.
">

And less of the rechristening than Malcolm implies.

--
Chris &quot;chris again&quot; Dollin

Hewlett-Packard Limited registered office:                Cain Road, Bracknell,
registered no: 690597 England                                    Berks RG12 1HN
</POST>
<POST>
<POSTER> &quot;Malcolm McLean&quot; &lt;regniz...@btinternet.com&gt; </POSTER>
<POSTDATE> 2007-11-05T16:47:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Ian Collins&quot; &lt;ian-n ... @hotmail.com&gt; wrote in message
&gt; Malcolm McLean wrote:
&gt;&gt; XP works very largely because it reChristens existing practise, such as
&gt;&gt; rewriting code, patch and fix, and feature creep, instead of trying to
&gt;&gt; force a alien mould onto the programmer. There's more it than that, of
&gt;&gt; course, but the marketing aspect shouldn't be downplayed.

&gt; There's a lot more to it than that.
">

Option 1:
&quot;We use some fairly simple techniques to increase productivity. Nothing that
an averagely competent programmer couldn't pick up and see the sense of in a
few days&quot;.
Option 2:
&quot;We use a very advanced and sophisticated methodology in which I am an
expert.&quot;

Which is more likely to advance the interests of the project? Which is
likely to advance the interests of the manager?

--
Free games and programming goodies.
http://www.personal.leeds.ac.uk/~bgy1mm
</POST>
<POST>
<POSTER> Mark McIntyre &lt;markmcint...@spamcop.net&gt; </POSTER>
<POSTDATE> 2007-11-05T18:11:00 </POSTDATE>
On Mon, 05 Nov 2007 07:26:43 +1300, in comp.lang.c , Ian Collins

<QUOTE PREVIOUSPOST="
&lt;ian-n ... @hotmail.com&gt; wrote:
&gt;Mark McIntyre wrote:
&gt;&gt; On Sat, 03 Nov 2007 20:33:27 +1300, in comp.lang.c , Ian Collins
&gt;&gt; &lt;ian-n ... @hotmail.com&gt; wrote:

&gt;&gt;&gt; Malcolm McLean wrote:
&gt;&gt;&gt;&gt; However it is a good thing to have a buzzy term for &quot;rewrite&quot;. &quot;Rewrite&quot;
&gt;&gt;&gt;&gt; carries too many negative connotations. Appearances matter. It shouldn't
&gt;&gt;&gt;&gt; be that way, but it is.

&gt;&gt;&gt; No, you should call a spade a spade.  If you have to hide behind buzz
&gt;&gt;&gt; words, either your organisation and/or process is broken.

&gt;&gt; Welcome to Fantasy island. :-)

&gt;&gt; Show me a senior manager who prefers &quot;rewrite&quot; to &quot;refactor&quot;, or
&gt;&gt; &quot;sack&quot; to &quot;downsize&quot; for that matter.

&gt;Me?
">

IME you're in a minority of two.

And I've yet to meet any board member who would use the word &quot;fire&quot;
when another more user-friendly word was available.
--
Mark McIntyre

&quot;Debugging is twice as hard as writing the code in the first place.
Therefore, if you write the code as cleverly as possible, you are,
by definition, not smart enough to debug it.&quot;
--Brian Kernighan
</POST>
<POST>
<POSTER> Mark McIntyre &lt;markmcint...@spamcop.net&gt; </POSTER>
<POSTDATE> 2007-11-05T18:12:00 </POSTDATE>
On Mon, 05 Nov 2007 10:51:11 +0000, in comp.lang.c , Chris Dollin

<QUOTE PREVIOUSPOST="
&lt;chris.dol ... @hp.com&gt; wrote:
&gt;Ian Collins wrote:

&gt;&gt; Malcolm McLean wrote:

&gt;&gt;&gt; XP works very largely because it reChristens existing practise, such as
&gt;&gt;&gt; rewriting code, patch and fix, and feature creep, instead of trying to
&gt;&gt;&gt; force a alien mould onto the programmer. There's more it than that, of
&gt;&gt;&gt; course, but the marketing aspect shouldn't be downplayed.

&gt;&gt; There's a lot more to it than that.

&gt;And less of the rechristening than Malcolm implies.
">

Well, I can see you two have bought the marketing spiel... :-)

gd&amp;r.
--
Mark McIntyre

&quot;Debugging is twice as hard as writing the code in the first place.
Therefore, if you write the code as cleverly as possible, you are,
by definition, not smart enough to debug it.&quot;
--Brian Kernighan
</POST>
<POST>
<POSTER> Ian Collins &lt;ian-n...@hotmail.com&gt; </POSTER>
<POSTDATE> 2007-11-05T21:50:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Mark McIntyre wrote:
&gt; On Mon, 05 Nov 2007 10:51:11 +0000, in comp.lang.c , Chris Dollin
&gt; &lt;chris.dol ... @hp.com&gt; wrote:

&gt;&gt; Ian Collins wrote:

&gt;&gt;&gt; Malcolm McLean wrote:
&gt;&gt;&gt;&gt; XP works very largely because it reChristens existing practise, such as
&gt;&gt;&gt;&gt; rewriting code, patch and fix, and feature creep, instead of trying to
&gt;&gt;&gt;&gt; force a alien mould onto the programmer. There's more it than that, of
&gt;&gt;&gt;&gt; course, but the marketing aspect shouldn't be downplayed.

&gt;&gt;&gt; There's a lot more to it than that.
&gt;&gt; And less of the rechristening than Malcolm implies.

&gt; Well, I can see you two have bought the marketing spiel... :-)

&gt;    gd&amp;r.
">

Nope, just spent time with the originators and some early adopters of XP
and converted a company over to it with very successful results.  No
marketing in sight.

--
Ian Collins.
</POST>
</TEXT>
</BODY>
</DOC>
