<DOC>
<DOCID> eng-NG-31-135590-9751616 </DOCID>
<DOCTYPE SOURCE="usenet"> USENET TEXT </DOCTYPE>
<DATETIME> 2007-09-27T12:04:00 </DATETIME>
<BODY>
<HEADLINE>
Recommendations for JavaScript drop-down menu code
</HEADLINE>
<TEXT>
<POST>
<POSTER> Brian Adkins &lt;lojicdot...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-27T12:04:00 </POSTDATE>
I would appreciate recommendations for JavaScript code that implements
drop-down, hierarchical menus. Are there high quality libraries for
this, or is it more typical for people to roll their own?

My preference is for open source code, but royalty-free commercial
code would be acceptable as well.

Ideally, the code would:
* Allow configuring horizontal or vertical menus
* Allow configuring the delay for closing the menu after mousing out
of the menu
* Provide a mechanism for playing well with existing code and other
libraries
* Be well designed &amp; documented
* Be highly portable among browsers in common use
* Allow styling via css

Thanks,
Brian Adkins
</POST>
<POST>
<POSTER> David Mark &lt;dmark.cins...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-27T12:53:00 </POSTDATE>
On Sep 27, 12:04 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; I would appreciate recommendations for JavaScript code that implements
&gt; drop-down, hierarchical menus. Are there high quality libraries for
&gt; this, or is it more typical for people to roll their own?
">

I don't know if there are any good ones out there, but there are lots
of bad ones.

<QUOTE PREVIOUSPOST="
&gt; My preference is for open source code, but royalty-free commercial
&gt; code would be acceptable as well.

&gt; Ideally, the code would:
&gt; * Allow configuring horizontal or vertical menus
">

That is a function of CSS, not script.

<QUOTE PREVIOUSPOST="
&gt; * Allow configuring the delay for closing the menu after mousing out
&gt; of the menu
">

That doesn't make sense to me for a hierarchical menu.

<QUOTE PREVIOUSPOST="
&gt; * Provide a mechanism for playing well with existing code and other
&gt; libraries
&gt; * Be well designed &amp; documented
&gt; * Be highly portable among browsers in common use
">

Your expectations of freebie menu scripts are likely too high.

<QUOTE PREVIOUSPOST="
&gt; * Allow styling via css
">

You'd be hard-pressed to disallow CSS with script.

Anyway, craate your hierarchy with nested lists, style it with CSS and
then look for a script that initially hides all but the parent list
and then displays child lists in response to mouse or keyboard input
(you'll find that most ignore the keyboard.)
</POST>
<POST>
<POSTER> Brian Adkins &lt;lojicdot...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-28T13:49:00 </POSTDATE>
On Sep 27, 12:53 pm, David Mark &lt;dmark.cins ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Sep 27, 12:04 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:
&gt; &gt; My preference is for open source code, but royalty-free commercial
&gt; &gt; code would be acceptable as well.

&gt; &gt; Ideally, the code would:
&gt; &gt; * Allow configuring horizontal or vertical menus

&gt; That is a function of CSS, not script.
">

There are a number of ways of accomplishing this. CSS is one way, but
the JavaScript code can make CSS styling less difficult or more
difficult.

<QUOTE PREVIOUSPOST="
&gt; &gt; * Allow configuring the delay for closing the menu after mousing out
&gt; &gt; of the menu

&gt; That doesn't make sense to me for a hierarchical menu.
">

It makes even more sense for a hierarchical menu. Consider navigating
through a complicated menu structure via hovering, then right before
you click the appropriate entry, you accidentally move the mouse too
far and the whole menu closes. That's the scenario (typically found on
CSS-only menus) I want to avoid, so I'd like a &quot;grace period&quot; if you
will.

<QUOTE PREVIOUSPOST="
&gt; &gt; * Provide a mechanism for playing well with existing code and other
&gt; &gt; libraries
&gt; &gt; * Be well designed &amp; documented
&gt; &gt; * Be highly portable among browsers in common use

&gt; Your expectations of freebie menu scripts are likely too high.
">

If so, then a commercial solution would seem to make sense. Do you
know of good commercial menus?

<QUOTE PREVIOUSPOST="
&gt; &gt; * Allow styling via css

&gt; You'd be hard-pressed to disallow CSS with script.

&gt; Anyway, craate your hierarchy with nested lists, style it with CSS and
&gt; then look for a script that initially hides all but the parent list
&gt; and then displays child lists in response to mouse or keyboard input
&gt; (you'll find that most ignore the keyboard.)
">

If I was only looking for that, I'd just write it myself, but I'm not
big on reinventing wheels.
</POST>
<POST>
<POSTER> David Mark &lt;dmark.cins...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-28T13:56:00 </POSTDATE>
On Sep 28, 1:49 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Sep 27, 12:53 pm, David Mark &lt;dmark.cins ... @gmail.com&gt; wrote:

&gt; &gt; On Sep 27, 12:04 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:
&gt; &gt; &gt; My preference is for open source code, but royalty-free commercial
&gt; &gt; &gt; code would be acceptable as well.

&gt; &gt; &gt; Ideally, the code would:
&gt; &gt; &gt; * Allow configuring horizontal or vertical menus

&gt; &gt; That is a function of CSS, not script.

&gt; There are a number of ways of accomplishing this. CSS is one way, but
&gt; the JavaScript code can make CSS styling less difficult or more
&gt; difficult.
">

How so?  Your app must not break down when either or both is disabled.

<QUOTE PREVIOUSPOST="
&gt; &gt; &gt; * Allow configuring the delay for closing the menu after mousing out
&gt; &gt; &gt; of the menu

&gt; &gt; That doesn't make sense to me for a hierarchical menu.

&gt; It makes even more sense for a hierarchical menu. Consider navigating
&gt; through a complicated menu structure via hovering, then right before
&gt; you click the appropriate entry, you accidentally move the mouse too
&gt; far and the whole menu closes. That's the scenario (typically found on
&gt; CSS-only menus) I want to avoid, so I'd like a &quot;grace period&quot; if you
&gt; will.
">

I didn't mean the delay made no sense, but the usual rollover-only
functionality of canned menu scripts.

<QUOTE PREVIOUSPOST="
&gt; &gt; &gt; * Provide a mechanism for playing well with existing code and other
&gt; &gt; &gt; libraries
&gt; &gt; &gt; * Be well designed &amp; documented
&gt; &gt; &gt; * Be highly portable among browsers in common use

&gt; &gt; Your expectations of freebie menu scripts are likely too high.

&gt; If so, then a commercial solution would seem to make sense. Do you
&gt; know of good commercial menus?

&gt; &gt; &gt; * Allow styling via css

&gt; &gt; You'd be hard-pressed to disallow CSS with script.

&gt; &gt; Anyway, craate your hierarchy with nested lists, style it with CSS and
&gt; &gt; then look for a script that initially hides all but the parent list
&gt; &gt; and then displays child lists in response to mouse or keyboard input
&gt; &gt; (you'll find that most ignore the keyboard.)

&gt; If I was only looking for that, I'd just write it myself, but I'm not
&gt; big on reinventing wheels.
">

If you aren't looking for what I described, then what are you looking
for?
</POST>
<POST>
<POSTER> Brian Adkins &lt;lojicdot...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-28T14:12:00 </POSTDATE>
On Sep 28, 1:56 pm, David Mark &lt;dmark.cins ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Sep 28, 1:49 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:
&gt; &gt; On Sep 27, 12:53 pm, David Mark &lt;dmark.cins ... @gmail.com&gt; wrote:
&gt; &gt; &gt; On Sep 27, 12:04 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:
&gt; &gt; &gt; &gt; Ideally, the code would:
&gt; &gt; &gt; &gt; * Allow configuring horizontal or vertical menus

&gt; &gt; &gt; That is a function of CSS, not script.

&gt; &gt; There are a number of ways of accomplishing this. CSS is one way, but
&gt; &gt; the JavaScript code can make CSS styling less difficult or more
&gt; &gt; difficult.

&gt; How so?  Your app must not break down when either or both is disabled.
">

&quot;Must not&quot; ? I'm surprised you think you know enough about the
requirements for my application to be able to make this statement. The
title of this post has to do with recommending JavaScript menus. If
you're not going to make a recommendation, please don't also make such
ridiculous statements. Combining arrogance and ignorance is
inadvisable.

Before you reply with some ridiculous retort, please identify at least
3 major web applications that would practically fall apart if users
disabled both JavaScript &amp; CSS and reconcile that with your statement
above.

<QUOTE PREVIOUSPOST="
&gt; &gt; &gt; &gt; * Allow configuring the delay for closing the menu after mousing out
&gt; &gt; &gt; &gt; of the menu

&gt; &gt; &gt; That doesn't make sense to me for a hierarchical menu.

&gt; &gt; It makes even more sense for a hierarchical menu. Consider navigating
&gt; &gt; through a complicated menu structure via hovering, then right before
&gt; &gt; you click the appropriate entry, you accidentally move the mouse too
&gt; &gt; far and the whole menu closes. That's the scenario (typically found on
&gt; &gt; CSS-only menus) I want to avoid, so I'd like a &quot;grace period&quot; if you
&gt; &gt; will.

&gt; I didn't mean the delay made no sense, but the usual rollover-only
&gt; functionality of canned menu scripts.
">

I can see you have many opinions. It's a pity none of them have to do
with the original request.
</POST>
<POST>
<POSTER> David Mark &lt;dmark.cins...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-28T14:40:00 </POSTDATE>
On Sep 28, 2:12 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Sep 28, 1:56 pm, David Mark &lt;dmark.cins ... @gmail.com&gt; wrote:

&gt; &gt; On Sep 28, 1:49 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:
&gt; &gt; &gt; On Sep 27, 12:53 pm, David Mark &lt;dmark.cins ... @gmail.com&gt; wrote:
&gt; &gt; &gt; &gt; On Sep 27, 12:04 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:
&gt; &gt; &gt; &gt; &gt; Ideally, the code would:
&gt; &gt; &gt; &gt; &gt; * Allow configuring horizontal or vertical menus

&gt; &gt; &gt; &gt; That is a function of CSS, not script.

&gt; &gt; &gt; There are a number of ways of accomplishing this. CSS is one way, but
&gt; &gt; &gt; the JavaScript code can make CSS styling less difficult or more
&gt; &gt; &gt; difficult.

&gt; &gt; How so?  Your app must not break down when either or both is disabled.

&gt; &quot;Must not&quot; ? I'm surprised you think you know enough about the
&gt; requirements for my application to be able to make this statement. The
">

It has nothing to do with the requirements of your application.
That's a general rule for any competent Web page or application.

<QUOTE PREVIOUSPOST="
&gt; title of this post has to do with recommending JavaScript menus. If
&gt; you're not going to make a recommendation, please don't also make such
&gt; ridiculous statements. Combining arrogance and ignorance is
&gt; inadvisable.
">

The specific response was to your assertion that JS and CSS are
somehow intertwined.  It should be intuitively obvious that if you
disable one but not the other, then any reliance on JS to prop up CSS
will be exposed.  It is inadvisable to argue a point that you clearly
don't understand.

<QUOTE PREVIOUSPOST="
&gt; Before you reply with some ridiculous retort, please identify at least
&gt; 3 major web applications that would practically fall apart if users
&gt; disabled both JavaScript &amp; CSS and reconcile that with your statement
&gt; above.
">

As I suspected, you didn't get the point at all.  Regardless, most Web
applications (and many simple Web pages) fall apart when both JS and
CSS are disabled.  Name three &quot;major Web applications&quot; that don't.

<QUOTE PREVIOUSPOST="
- Hide quoted text - - Show quoted text -
">

<QUOTE PREVIOUSPOST="
&gt; &gt; &gt; &gt; &gt; * Allow configuring the delay for closing the menu after mousing out
&gt; &gt; &gt; &gt; &gt; of the menu

&gt; &gt; &gt; &gt; That doesn't make sense to me for a hierarchical menu.

&gt; &gt; &gt; It makes even more sense for a hierarchical menu. Consider navigating
&gt; &gt; &gt; through a complicated menu structure via hovering, then right before
&gt; &gt; &gt; you click the appropriate entry, you accidentally move the mouse too
&gt; &gt; &gt; far and the whole menu closes. That's the scenario (typically found on
&gt; &gt; &gt; CSS-only menus) I want to avoid, so I'd like a &quot;grace period&quot; if you
&gt; &gt; &gt; will.

&gt; &gt; I didn't mean the delay made no sense, but the usual rollover-only
&gt; &gt; functionality of canned menu scripts.

&gt; I can see you have many opinions. It's a pity none of them have to do
&gt; with the original request.
">

The original request matters little at this point.  As I mentioned a
few posts back, I have no recommendation for you, other than a few
general rules to follow when evaluating canned menu scripts.
</POST>
<POST>
<POSTER> Thomas &#39;PointedEars&#39; Lahn &lt;PointedE...@web.de&gt; </POSTER>
<POSTDATE> 2007-09-28T15:48:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Brian Adkins wrote:
&gt; I would appreciate recommendations for JavaScript code that implements
&gt; drop-down, hierarchical menus. Are there high quality libraries for
&gt; this, or is it more typical for people to roll their own?
">

Let JScript(!) code add to the functionality of CSS where required.  Don't
attempt to replace HTML and the latter by a client-side script that
generates the content; the result would be inevitably inaccessible.

PointedEars
--
&quot;Use any version of Microsoft Frontpage to create your site. (This won't
prevent people from viewing your source, but no one will want to steal it.)&quot;
-- from &lt; http://www.vortex-webdesign.com/help/hidesource.htm &gt;
</POST>
<POST>
<POSTER> Peter Michaux &lt;petermich...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-28T20:35:00 </POSTDATE>
On Sep 28, 11:40 am, David Mark &lt;dmark.cins ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Sep 28, 2:12 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:

&gt; &gt; On Sep 28, 1:56 pm, David Mark &lt;dmark.cins ... @gmail.com&gt; wrote:

&gt; &gt; &gt; On Sep 28, 1:49 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:
&gt; &gt; &gt; &gt; On Sep 27, 12:53 pm, David Mark &lt;dmark.cins ... @gmail.com&gt; wrote:
&gt; &gt; &gt; &gt; &gt; On Sep 27, 12:04 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:
&gt; &gt; &gt; &gt; &gt; &gt; Ideally, the code would:
&gt; &gt; &gt; &gt; &gt; &gt; * Allow configuring horizontal or vertical menus

&gt; &gt; &gt; &gt; &gt; That is a function of CSS, not script.

&gt; &gt; &gt; &gt; There are a number of ways of accomplishing this. CSS is one way, but
&gt; &gt; &gt; &gt; the JavaScript code can make CSS styling less difficult or more
&gt; &gt; &gt; &gt; difficult.

&gt; &gt; &gt; How so?  Your app must not break down when either or both is disabled.

&gt; &gt; &quot;Must not&quot; ? I'm surprised you think you know enough about the
&gt; &gt; requirements for my application to be able to make this statement. The

&gt; It has nothing to do with the requirements of your application.
&gt; That's a general rule for any competent Web page or application.
">

It does have to do with the specific requirements. Not all web pages
are for general web consumption. Some are for back-end pages where the
user logs in and is known to have a certain set of prerequisite
capabilities. In these cases, spending the extra time to make the page
degrade gracefully or otherwise may not be considered a wise use of
development dollars.

Another option is a gateway page that branches to two versions of the
application. This is like GMail. One branch is for JavaScript enabled
(and sufficiently capable JavaScript) and the other branch is for
anyone not capable of the &quot;full&quot; version. So in this case the fancy
drop down menus would not have to degrade either.

Peter
</POST>
<POST>
<POSTER> Brian Adkins &lt;lojicdot...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-29T12:51:00 </POSTDATE>
Here are a few I've found. Any good/bad experiences with any of them?

Yahoo! UI Library: Menu
http://developer.yahoo.com/yui/menu/

Son of Suckerfish - Nice, but menu collapses unforgivingly
http://www.htmldog.com/articles/suckerfish/dropdowns/

FreeStyle Menu - Angus Turnbull
http://www.twinhelix.com/dhtml/fsmenu/demo/

jdMenu plugin for JQuery
http://jdsharp.us/jQuery/plugins/jdMenu/

I also forgot to list one requirement. I'm using XHTML 1.0 Strict, so
the menu would need to be compatible with that.

At this point, I'm leaning toward starting with Son of Suckerfish and
adding JavaScript to make the collapsing more forgiving. It seems like
the simplest and I like the idea of building something onto a simple
foundation versus trying to understand someone else's monstrosity.

I would be curious about experiences with Yahoo's menu or other
libraries with significant developer acceptance.
</POST>
<POST>
<POSTER> Randy Webb &lt;HikksNotAtH...@aol.com&gt; </POSTER>
<POSTDATE> 2007-09-29T16:07:00 </POSTDATE>
Brian Adkins said the following on 9/29/2007 12:51 PM:

&lt;snip&gt;

<QUOTE PREVIOUSPOST="
&gt; I also forgot to list one requirement. I'm using XHTML 1.0 Strict, so
&gt; the menu would need to be compatible with that.
">

Why are you using something that isn't understood by 90% of the web and
would end up being processed as soup tag HTML and thus a true XHTML
script wouldn't work with it?

--
Randy
Chance Favors The Prepared Mind
comp.lang.javascript FAQ - http://jibbering.com/faq/index.html
Javascript Best Practices - http://www.JavascriptToolbox.com/bestpractices/
</POST>
<POST>
<POSTER> Brian Adkins &lt;lojicdot...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-29T16:34:00 </POSTDATE>
On Sep 29, 4:07 pm, Randy Webb &lt;HikksNotAtH ... @aol.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Brian Adkins said the following on 9/29/2007 12:51 PM:
&gt; &gt; I also forgot to list one requirement. I'm using XHTML 1.0 Strict, so
&gt; &gt; the menu would need to be compatible with that.

&gt; Why are you using something that isn't understood by 90% of the web and
&gt; would end up being processed as soup tag HTML and thus a true XHTML
&gt; script wouldn't work with it?
">

I wasn't aware that &quot;90% of the web&quot; doesn't understand it. Can you
provide documentation for that statistic? I have to admit being
skeptical since my testing has uncovered no issues and there are a
number of major sites using the same doctype, but I'd like to keep an
open mind.

I'm not familiar with the phrase &quot;soup tag HTML&quot;, but it doesn't sound
good. Which browsers process XHTML as &quot;soup tag HTML&quot; ? I also don't
know what you mean by a &quot;true XHTML script&quot; - is this different than a
regular old JavaScript script? Are you saying that many browsers will
populate the DOM differently from XHTML input than from HTML? If you
can provide examples of input that validates against XHTML 1.0 Strict
that turns into &quot;soup tag HTML&quot; and thus won't work with a valid
JavaScript program I would appreciate it.

Just out of curiosity, which doctype do you prefer?
</POST>
<POST>
<POSTER> Brian Adkins &lt;lojicdot...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-29T16:47:00 </POSTDATE>
On Sep 29, 4:34 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Sep 29, 4:07 pm, Randy Webb &lt;HikksNotAtH ... @aol.com&gt; wrote:

&gt; &gt; Brian Adkins said the following on 9/29/2007 12:51 PM:
&gt; &gt; &gt; I also forgot to list one requirement. I'm using XHTML 1.0 Strict, so
&gt; &gt; &gt; the menu would need to be compatible with that.

&gt; &gt; Why are you using something that isn't understood by 90% of the web and
&gt; &gt; would end up being processed as soup tag HTML and thus a true XHTML
&gt; &gt; script wouldn't work with it?

&gt; I wasn't aware that &quot;90% of the web&quot; doesn't understand it. Can you
&gt; provide documentation for that statistic? I have to admit being
&gt; skeptical since my testing has uncovered no issues and there are a
&gt; number of major sites using the same doctype, but I'd like to keep an
&gt; open mind.

&gt; I'm not familiar with the phrase &quot;soup tag HTML&quot;, but it doesn't sound
&gt; good. Which browsers process XHTML as &quot;soup tag HTML&quot; ? I also don't
&gt; know what you mean by a &quot;true XHTML script&quot; - is this different than a
&gt; regular old JavaScript script? Are you saying that many browsers will
&gt; populate the DOM differently from XHTML input than from HTML? If you
&gt; can provide examples of input that validates against XHTML 1.0 Strict
&gt; that turns into &quot;soup tag HTML&quot; and thus won't work with a valid
&gt; JavaScript program I would appreciate it.

&gt; Just out of curiosity, which doctype do you prefer?
">

Just in case we're talking about two different things, here's the
doctype &amp; other stuff I'm using:

&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;
&quot; http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd &quot;&gt;
&lt;html xmlns=&quot; http://www.w3.org/1999/xhtml &quot; lang=&quot;en&quot; xml:lang=&quot;en&quot;&gt;
&lt;head&gt;
...
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;
charset=utf-8&quot; /&gt;
...
</POST>
<POST>
<POSTER> Thomas &#39;PointedEars&#39; Lahn &lt;PointedE...@web.de&gt; </POSTER>
<POSTDATE> 2007-09-29T16:52:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Brian Adkins wrote:
&gt; On Sep 29, 4:07 pm, Randy Webb &lt;HikksNotAtH ... @aol.com&gt; wrote:
&gt;&gt; Brian Adkins said the following on 9/29/2007 12:51 PM:
&gt;&gt;&gt; I also forgot to list one requirement. I'm using XHTML 1.0 Strict, so
&gt;&gt;&gt; the menu would need to be compatible with that.
&gt;&gt; Why are you using something that isn't understood by 90% of the web and
&gt;&gt; would end up being processed as soup tag HTML and thus a true XHTML
&gt;&gt; script wouldn't work with it?

&gt; I wasn't aware that &quot;90% of the web&quot; doesn't understand it. Can you
&gt; provide documentation for that statistic?
">

He is referring to Microsoft Internet Explorer not using a built-in XML
parser for XHTML by default, and not supporting the proper media type for
XHTML, application/xhtml+xml, to date (version 7.0).  Whether or not it
still has a 90% market share or not (142% of all Web statistics are flawed)
is irrelevant; it is a sad fact that its flawed layout engine (Trident) is
still the most used one, and that the advantages XHTML undoubtedly has over
HTML must still be carefully weighted against the disadvantage of the
former's being not widely supported.

http://en.wikipedia.org/wiki/Internet_Explorer
http://en.wikipedia.org/wiki/Internet_Explorer#Standards_support

PointedEars
</POST>
<POST>
<POSTER> Thomas &#39;PointedEars&#39; Lahn &lt;PointedE...@web.de&gt; </POSTER>
<POSTDATE> 2007-09-29T17:12:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Brian Adkins wrote:
&gt; On Sep 29, 4:34 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:
&gt;&gt; On Sep 29, 4:07 pm, Randy Webb &lt;HikksNotAtH ... @aol.com&gt; wrote:
&gt;&gt;&gt; Brian Adkins said the following on 9/29/2007 12:51 PM:
&gt;&gt; [...]
&gt;&gt; I'm not familiar with the phrase &quot;soup tag HTML&quot;, but it doesn't sound
&gt;&gt; good. Which browsers process XHTML as &quot;soup tag HTML&quot; ?
">

The correct term is &quot;tag soup HTML&quot; which is the way most (if not all)
parsers in browsers work.  If they do no support a HTML feature or encounter
not Valid code, they do error correction.  That is a behavior not allowed
for XML documents such as XHTML documents; they have to be well-formed (they
need not to be Valid, although due to the definition of validating parsers
that is strongly recommended).

http://www.hixie.ch/advocacy/xhtml
http://hsivonen.iki.fi/xhtml-the-point/

<QUOTE PREVIOUSPOST="
&gt;&gt; I also don't know what you mean by a &quot;true XHTML script&quot; - is this
&gt;&gt; different than a regular old JavaScript script?
">

Did you even know that there is no such thing as a &quot;regular old JavaScript
script&quot; as every different UA uses a different script engine and DOM?

<QUOTE PREVIOUSPOST="
&gt;&gt; Are you saying that many browsers will populate the DOM differently from
&gt;&gt; XHTML input than from HTML?
">

Yes, they do.  Although that is not supported by Web standards.  For
example, document.write() doesn't work (i.e. throws an exception) in the
XHTML Gecko DOM with the excuse of its being capable of creating not
well-formed markup.

http://www.w3.org/TR/DOM-Level-2-HTML/

<QUOTE PREVIOUSPOST="
&gt;&gt; If you can provide examples of input that validates against XHTML 1.0 Strict
&gt;&gt; that turns into &quot;soup tag HTML&quot; and thus won't work with a valid
&gt;&gt; JavaScript program I would appreciate it.
">

YMMD.

<QUOTE PREVIOUSPOST="
&gt;&gt; Just out of curiosity, which doctype do you prefer?
">

HTML 4.01 Strict, unless XHTML is absolutely required.  If the latter, XHTML
1.0 Strict or XHTML 1.1.

<QUOTE PREVIOUSPOST="
&gt; Just in case we're talking about two different things, here's the
&gt; doctype &amp; other stuff I'm using:

&gt; &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;
&gt;   &quot; http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd &quot;&gt;
&gt; &lt;html xmlns=&quot; http://www.w3.org/1999/xhtml &quot; lang=&quot;en&quot; xml:lang=&quot;en&quot;&gt;
&gt;   &lt;head&gt;
&gt;     ...
&gt;     &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;
&gt; charset=utf-8&quot; /&gt;
">

This is strongly recommended against if you serve it as text/html:

http://www.w3.org/TR/xhtml-media-types/#summary

And, in fact, if the XHTML was parsed by an XML parser as it should be, that
declaration would be far too late.  An XML document has to be well-formed
*before* parsing starts.  That is facilitated by declaring the encoding in
the HTTP header or in an XML processing instruction before the root element
of the document (PI):

&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;

As for scripting, there are more things to care about when using XHTML.

http://www.w3.org/TR/xhtml1/#diffs

PointedEars
--
&quot;Use any version of Microsoft Frontpage to create your site. (This won't
prevent people from viewing your source, but no one will want to steal it.)&quot;
-- from &lt; http://www.vortex-webdesign.com/help/hidesource.htm &gt;
</POST>
<POST>
<POSTER> Brian Adkins &lt;lojicdot...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-29T17:19:00 </POSTDATE>
On Sep 29, 4:52 pm, Thomas 'PointedEars' Lahn &lt;PointedE ... @web.de&gt;
wrote:

<QUOTE PREVIOUSPOST="
&gt; Brian Adkins wrote:
&gt; &gt; On Sep 29, 4:07 pm, Randy Webb &lt;HikksNotAtH ... @aol.com&gt; wrote:
&gt; &gt;&gt; Brian Adkins said the following on 9/29/2007 12:51 PM:
&gt; &gt;&gt;&gt; I also forgot to list one requirement. I'm using XHTML 1.0 Strict, so
&gt; &gt;&gt;&gt; the menu would need to be compatible with that.
&gt; &gt;&gt; Why are you using something that isn't understood by 90% of the web and
&gt; &gt;&gt; would end up being processed as soup tag HTML and thus a true XHTML
&gt; &gt;&gt; script wouldn't work with it?

&gt; &gt; I wasn't aware that &quot;90% of the web&quot; doesn't understand it. Can you
&gt; &gt; provide documentation for that statistic?

&gt; He is referring to Microsoft Internet Explorer not using a built-in XML
&gt; parser for XHTML by default, and not supporting the proper media type for
&gt; XHTML, application/xhtml+xml, ...
">

I see. I'm not serving it as 'application/xhtml+xml', and haven't had
any issues with IE so far. I guess the 'text/html' vs. 'application/
xhtml+xml' accounts for the discrepancy between &quot;90% of the web
doesn't understand it&quot; and what I'm seeing.
</POST>
<POST>
<POSTER> Thomas &#39;PointedEars&#39; Lahn &lt;PointedE...@web.de&gt; </POSTER>
<POSTDATE> 2007-09-29T17:51:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Brian Adkins wrote:
&gt; [...] Thomas 'PointedEars' Lahn [...] wrote:
&gt;&gt; Brian Adkins wrote:
&gt;&gt;&gt; On Sep 29, 4:07 pm, Randy Webb &lt;HikksNotAtH ... @aol.com&gt; wrote:
&gt;&gt;&gt;&gt; Brian Adkins said the following on 9/29/2007 12:51 PM:
&gt;&gt;&gt;&gt;&gt; I also forgot to list one requirement. I'm using XHTML 1.0 Strict, so
&gt;&gt;&gt;&gt;&gt; the menu would need to be compatible with that.
&gt;&gt;&gt;&gt; Why are you using something that isn't understood by 90% of the web and
&gt;&gt;&gt;&gt; would end up being processed as soup tag HTML and thus a true XHTML
&gt;&gt;&gt;&gt; script wouldn't work with it?
&gt;&gt;&gt; I wasn't aware that &quot;90% of the web&quot; doesn't understand it. Can you
&gt;&gt;&gt; provide documentation for that statistic?
&gt;&gt; He is referring to Microsoft Internet Explorer not using a built-in XML
&gt;&gt; parser for XHTML by default, and not supporting the proper media type for
&gt;&gt; XHTML, application/xhtml+xml, ...

&gt; I see. I'm not serving it as 'application/xhtml+xml',
">

But as what?

<QUOTE PREVIOUSPOST="
&gt; and haven't had any issues with IE so far. I guess the 'text/html' vs.
&gt; 'application/xhtml+xml' accounts for the discrepancy between &quot;90% of
&gt; the web doesn't understand it&quot; and what I'm seeing.
">

It merely accounts for the possibility of your not understanding
what you are doing, see &lt;46FEBFAE.4010 ... @PointedEars.de&gt;.

PointedEars
--
Prototype.js was written by people who don't know javascript for people
who don't know javascript. People who don't know javascript are not
the best source of advice on designing systems that use javascript.
-- Richard Cornford, cljs, &lt;f806at$ail$1$8300d ... @news.demon.co.uk&gt;
</POST>
<POST>
<POSTER> Peter Michaux &lt;petermich...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-29T17:56:00 </POSTDATE>
On Sep 29, 1:34 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Sep 29, 4:07 pm, Randy Webb &lt;HikksNotAtH ... @aol.com&gt; wrote:

&gt; &gt; Brian Adkins said the following on 9/29/2007 12:51 PM:
&gt; &gt; &gt; I also forgot to list one requirement. I'm using XHTML 1.0 Strict, so
&gt; &gt; &gt; the menu would need to be compatible with that.

&gt; &gt; Why are you using something that isn't understood by 90% of the web and
&gt; &gt; would end up being processed as soup tag HTML and thus a true XHTML
&gt; &gt; script wouldn't work with it?

&gt; I wasn't aware that &quot;90% of the web&quot; doesn't understand it. Can you
&gt; provide documentation for that statistic? I have to admit being
&gt; skeptical since my testing has uncovered no issues and there are a
&gt; number of major sites using the same doctype, but I'd like to keep an
&gt; open mind.

&gt; I'm not familiar with the phrase &quot;soup tag HTML&quot;, but it doesn't sound
&gt; good. Which browsers process XHTML as &quot;soup tag HTML&quot; ? I also don't
&gt; know what you mean by a &quot;true XHTML script&quot; - is this different than a
&gt; regular old JavaScript script? Are you saying that many browsers will
&gt; populate the DOM differently from XHTML input than from HTML? If you
&gt; can provide examples of input that validates against XHTML 1.0 Strict
&gt; that turns into &quot;soup tag HTML&quot; and thus won't work with a valid
&gt; JavaScript program I would appreciate it.
">

See

http://www.thewebcreator.net/2007/04/16/why-you-should-be-using-html-...

http://www.webdevout.net/articles/beware-of-xhtml

<QUOTE PREVIOUSPOST="
&gt; Just out of curiosity, which doctype do you prefer?
">

HTML Transitional is the most useful to me because of iframe hacks
(hidden file upload, iframe shim for IE select element hiding).

Peter
</POST>
<POST>
<POSTER> Brian Adkins &lt;lojicdot...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-29T18:25:00 </POSTDATE>
On Sep 29, 5:12 pm, Thomas 'PointedEars' Lahn &lt;PointedE ... @web.de&gt;
wrote:

<QUOTE PREVIOUSPOST="
&gt; Brian Adkins wrote:
&gt; &gt; On Sep 29, 4:34 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:
&gt; &gt;&gt; On Sep 29, 4:07 pm, Randy Webb &lt;HikksNotAtH ... @aol.com&gt; wrote:
&gt; &gt;&gt;&gt; Brian Adkins said the following on 9/29/2007 12:51 PM:
&gt; &gt;&gt; [...]
&gt; &gt;&gt; I'm not familiar with the phrase &quot;soup tag HTML&quot;, but it doesn't sound
&gt; &gt;&gt; good. Which browsers process XHTML as &quot;soup tag HTML&quot; ?

&gt; The correct term is &quot;tag soup HTML&quot; which is the way most (if not all)
&gt; parsers in browsers work.  If they do no support a HTML feature or encounter
&gt; not Valid code, they do error correction.  That is a behavior not allowed
&gt; for XML documents such as XHTML documents; they have to be well-formed (they
&gt; need not to be Valid, although due to the definition of validating parsers
&gt; that is strongly recommended).

&gt; http://www.hixie.ch/advocacy/xhtml
">

Interesting information. I do validate my pages, and I'm not planning
on sending as 'application/xhtml+xml' anytime soon, but it certainly
may be that I assumed there were advantages to XHMTL 1.0 Strict after
reading various information sources (i.e. jumped on a bandwagon). Some
of the proposed benefits of XHTML I've heard are:

* future proofing web pages
* allowing aural screen readers to more easily consume it
* it's becoming the language of choice for mobile devices
* existing data is more easily transformed into XHTML than HTML
* there's not going to be an HTML 5, the new standard is XHTML 1.0
* &lt;br&gt; seems wrong compared to &lt;br /&gt;
* etc.

For what it's worth, here are the doctypes of 49 sites that I checked
in mid July:

http://lojic.com/blog/2007/07/12/which-doctypes-are-being-used/

Summary is: none = 10, html = 20, xhtml = 19 (only 1 using XHTML 1.1)

You've given me some things to think about. If anyone is aware of
advantages of XHTML 1.1 Strict over HTML 4.01 Strict, feel free to
chime in.

<QUOTE PREVIOUSPOST="
- Hide quoted text - - Show quoted text -
">

<QUOTE PREVIOUSPOST="
&gt; &gt;&gt; Just out of curiosity, which doctype do you prefer?

&gt; HTML 4.01 Strict, unless XHTML is absolutely required.  If the latter, XHTML
&gt; 1.0 Strict or XHTML 1.1.
">
</POST>
<POST>
<POSTER> Brian Adkins &lt;lojicdot...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-29T18:44:00 </POSTDATE>
On Sep 29, 5:51 pm, Thomas 'PointedEars' Lahn &lt;PointedE ... @web.de&gt;
wrote:

<QUOTE PREVIOUSPOST="
&gt; Brian Adkins wrote:
&gt; &gt; [...] Thomas 'PointedEars' Lahn [...] wrote:
&gt; &gt;&gt; Brian Adkins wrote:
&gt; &gt;&gt;&gt; On Sep 29, 4:07 pm, Randy Webb &lt;HikksNotAtH ... @aol.com&gt; wrote:
&gt; &gt;&gt;&gt;&gt; Brian Adkins said the following on 9/29/2007 12:51 PM:
&gt; &gt;&gt;&gt;&gt;&gt; I also forgot to list one requirement. I'm using XHTML 1.0 Strict, so
&gt; &gt;&gt;&gt;&gt;&gt; the menu would need to be compatible with that.
&gt; &gt;&gt;&gt;&gt; Why are you using something that isn't understood by 90% of the web and
&gt; &gt;&gt;&gt;&gt; would end up being processed as soup tag HTML and thus a true XHTML
&gt; &gt;&gt;&gt;&gt; script wouldn't work with it?
&gt; &gt;&gt;&gt; I wasn't aware that &quot;90% of the web&quot; doesn't understand it. Can you
&gt; &gt;&gt;&gt; provide documentation for that statistic?
&gt; &gt;&gt; He is referring to Microsoft Internet Explorer not using a built-in XML
&gt; &gt;&gt; parser for XHTML by default, and not supporting the proper media type for
&gt; &gt;&gt; XHTML, application/xhtml+xml, ...

&gt; &gt; I see. I'm not serving it as 'application/xhtml+xml',

&gt; But as what?

&gt; &gt; and haven't had any issues with IE so far. I guess the 'text/html' vs.
&gt; &gt; 'application/xhtml+xml' accounts for the discrepancy between &quot;90% of
&gt; &gt; the web doesn't understand it&quot; and what I'm seeing.

&gt; It merely accounts for the possibility of your not understanding
&gt; what you are doing, see &lt;46FEBFAE.4010 ... @PointedEars.de&gt;.
">

You could be right. I should probably hear your perspective on the
discrepancy between someone's statement that XHTML 1.0 Strict won't
work on &quot;90% of the web&quot;, and the fact that I haven't uncovered any
problems (except for losing the target attribute on &lt;a&gt;) on 5 browsers
running on 3 operating systems covering well over 90% market share.

I've heard someone say that the difference between theory and practice
is much greater in practice than in theory ;)
</POST>
<POST>
<POSTER> Thomas &#39;PointedEars&#39; Lahn &lt;PointedE...@web.de&gt; </POSTER>
<POSTDATE> 2007-09-29T18:52:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Brian Adkins wrote:
&gt; [...] Thomas 'PointedEars' Lahn [...] wrote:
&gt;&gt; Brian Adkins wrote:
&gt;&gt;&gt; On Sep 29, 4:34 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:
&gt;&gt;&gt;&gt; On Sep 29, 4:07 pm, Randy Webb &lt;HikksNotAtH ... @aol.com&gt; wrote:
&gt;&gt;&gt;&gt;&gt; Brian Adkins said the following on 9/29/2007 12:51 PM:
&gt;&gt;&gt;&gt; [...]
&gt;&gt;&gt;&gt; I'm not familiar with the phrase &quot;soup tag HTML&quot;, but it doesn't sound
&gt;&gt;&gt;&gt; good. Which browsers process XHTML as &quot;soup tag HTML&quot; ?
&gt;&gt; The correct term is &quot;tag soup HTML&quot; which is the way most (if not all)
&gt;&gt; parsers in browsers work.  If they do no support a HTML feature or encounter
&gt;&gt; not Valid code, they do error correction.  That is a behavior not allowed
&gt;&gt; for XML documents such as XHTML documents; they have to be well-formed (they
&gt;&gt; need not to be Valid, although due to the definition of validating parsers
&gt;&gt; that is strongly recommended).

&gt;&gt; http://www.hixie.ch/advocacy/xhtml

&gt; Interesting information. I do validate my pages, and I'm not planning
&gt; on sending as 'application/xhtml+xml' anytime soon,
">

Why not if the UA supports it?  Gecko-based UAs do, and they use an XML
parser then.

<QUOTE PREVIOUSPOST="
&gt; but it certainly may be that I assumed there were advantages to XHMTL 1.0 Strict
&gt; after reading various information sources (i.e. jumped on a bandwagon). Some
&gt; of the proposed benefits of XHTML I've heard are:

&gt; * future proofing web pages
">

HTML support is not going to disappear.  Whether or not XHTML will
evolve into a viable alternative for HTML remains to be seen.

<QUOTE PREVIOUSPOST="
&gt; * allowing aural screen readers to more easily consume it
">

NAK.  Please explain why you think that would be so.

<QUOTE PREVIOUSPOST="
&gt; * it's becoming the language of choice for mobile devices
">

Because of the short-lived WAP hype using WML?

<QUOTE PREVIOUSPOST="
&gt; * existing data is more easily transformed into XHTML than HTML
">

Again, an explanation would be appreciated.

<QUOTE PREVIOUSPOST="
&gt; * there's not going to be an HTML 5, the new standard is XHTML 1.0
">

The WHATWG is developing its HTML 5 now.  While I debate that proprietary
approach, it remains to be seen whether or not it will be used more than
XHTML 1.0.

http://www.whatwg.org/specs/web-apps/current-work/

<QUOTE PREVIOUSPOST="
&gt; * &lt;br&gt; seems wrong compared to &lt;br /&gt;
">

On what grounds?

<QUOTE PREVIOUSPOST="
&gt; * etc.

&gt; For what it's worth, here are the doctypes of 49 sites that I checked
&gt; in mid July:

&gt; http://lojic.com/blog/2007/07/12/which-doctypes-are-being-used/

&gt; Summary is: none = 10, html = 20, xhtml = 19 (only 1 using XHTML 1.1)
">

And probably most of the sites that use XHTML them serve it inefficient and
error-prone as text/html without a real need for XHTML in the first place.
Yuck.

<QUOTE PREVIOUSPOST="
&gt; You've given me some things to think about. If anyone is aware of
&gt; advantages of XHTML 1.1 Strict over HTML 4.01 Strict, feel free to
&gt; chime in.
">

But please do that only where it is on-topic.

F'up2 comp.infosystems. www.authoring.html

PointedEars
--
realism:    HTML 4.01 Strict
evangelism: XHTML 1.0 Strict
madness:    XHTML 1.1 as application/xhtml+xml
-- Bjoern Hoehrmann
</POST>
<POST>
<POSTER> David Mark &lt;dmark.cins...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-29T19:37:00 </POSTDATE>
On Sep 28, 8:35 pm, Peter Michaux &lt;petermich ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Sep 28, 11:40 am, David Mark &lt;dmark.cins ... @gmail.com&gt; wrote:

&gt; &gt; On Sep 28, 2:12 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:

&gt; &gt; &gt; On Sep 28, 1:56 pm, David Mark &lt;dmark.cins ... @gmail.com&gt; wrote:

&gt; &gt; &gt; &gt; On Sep 28, 1:49 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:
&gt; &gt; &gt; &gt; &gt; On Sep 27, 12:53 pm, David Mark &lt;dmark.cins ... @gmail.com&gt; wrote:
&gt; &gt; &gt; &gt; &gt; &gt; On Sep 27, 12:04 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:
&gt; &gt; &gt; &gt; &gt; &gt; &gt; Ideally, the code would:
&gt; &gt; &gt; &gt; &gt; &gt; &gt; * Allow configuring horizontal or vertical menus

&gt; &gt; &gt; &gt; &gt; &gt; That is a function of CSS, not script.

&gt; &gt; &gt; &gt; &gt; There are a number of ways of accomplishing this. CSS is one way, but
&gt; &gt; &gt; &gt; &gt; the JavaScript code can make CSS styling less difficult or more
&gt; &gt; &gt; &gt; &gt; difficult.

&gt; &gt; &gt; &gt; How so?  Your app must not break down when either or both is disabled.

&gt; &gt; &gt; &quot;Must not&quot; ? I'm surprised you think you know enough about the
&gt; &gt; &gt; requirements for my application to be able to make this statement. The

&gt; &gt; It has nothing to do with the requirements of your application.
&gt; &gt; That's a general rule for any competent Web page or application.

&gt; It does have to do with the specific requirements. Not all web pages
&gt; are for general web consumption. Some are for back-end pages where the
&gt; user logs in and is known to have a certain set of prerequisite
&gt; capabilities. In these cases, spending the extra time to make the page
&gt; degrade gracefully or otherwise may not be considered a wise use of
&gt; development dollars.
">

Correct, but popup menus are simple enough that you would just do them
right in the first place.

<QUOTE PREVIOUSPOST="
&gt; Another option is a gateway page that branches to two versions of the
&gt; application. This is like GMail. One branch is for JavaScript enabled
">

Please don't use Google as an example.  Google throws JS errors at me
constantly.  But I get the idea.  I don't like it, but I get it.

<QUOTE PREVIOUSPOST="
&gt; (and sufficiently capable JavaScript) and the other branch is for
&gt; anyone not capable of the &quot;full&quot; version. So in this case the fancy
&gt; drop down menus would not have to degrade either.
">

Fancy dropdown menus?  Granted they aren't really necessary for most
Web pages/applications, but they are fairly trivial widgets, which is
one reason they are so prevalent.

Hierarchies of menus would seem an unwieldy choice for site
navigation, but it is apparently the preferred UI for most Web
developers.  Unfortunately, most implementations have lousy usability
and/or accessibility.  It's as if the developers had never used menus
in software applications.  Of course, if they were paying attention to
their desktops, they would have noticed that navigation is done with a
tree, not a series of cascading menus.

Here is an example of how I think menus should work.  The code is a
little slapdash, but in my brief testing it functioned flawlessly.
The default behavior does not popup top-level menus on rollovers (I
hate that), but there is a global option to change this.  And they
don't vanish just because you move the mouse away (click to hide all
active menus.)  And yes, there is a configurable delay for hiding sub-
menus when it makes sense to hide them.  As for accessibility,
keyboard users will have no problem and I think most screen readers/
aural browsers will work as well.  I tested in IE7, the latest Mozilla
and Netscape, Opera 9 and Windows Safari beta.  IE7 in quirks mode had
a weird issue with adding space between listitems when sub-menus open,
but I haven't investigated that (you shouldn't use quirks mode
anyway.)  It should be okay in IE6 in standards mode.

The example has three menus with identical content: one styled as a
horizontal menubar, one vertical and the other as a popup menu.  The
orientations are determined solely by CSS.  The instantiation of the
popup menu and positioning of child popups are functions of the
script.

Use something like this and you won't need a branch page as the menus
degrade gracefully without script as well as without script and
style.  As usual, the hardest case to get perfect is where script is
enabled but style is not.  The specific examples I used are admittedly
lousy in this case as only the leaf nodes navigate, despite the fact
that all nodes have perfectly good href's.  So if you must use
cascading menus for navigation (as opposed to commands), it is a good
idea to relegate links to leaf nodes.

&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot; http://www.w3.org/
TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
&lt;title&gt;Menus&lt;/title&gt;
&lt;style type=&quot;text/css&quot; media=&quot;all&quot;&gt;
ul.menubar { list-style-type:none;padding:0;margin:0 }
ul.menubar a, ul.menuPopup a { padding: 0 .25em 0 .25em }
ul.menubar li { margin:0;padding:0;display:inline}
ul.menubar li a:link, ul.menubar li a:visited { text-decoration:none }
ul.menubar li a:hover { background-color:#0000DD;color:white }
ul.menuPopup { list-style-type:none;padding:0;margin:0;border:outset
2px;background-color:threedface;color:windowtext;z-index:1 }
ul.menuPopup li { white-space:nowrap;display:block }
ul.menuPopup li a:link, ul.menuPopup li a:visited { text-
decoration:none;display:block }
ul.menuPopup li a:hover { background-
color:#0000DD;color:white;display:block }
ul.menuPopup li a.popup:after { content: &quot;\0020\00BB&quot;; }

#myMenubarVertical.menubar { width:5em;margin-bottom:1em }
#myMenubarVertical.menubar li, #myMenubarVertical.menubar li a
{ display:block }
#testPopupMenu { display:block; margin-top:1em }

body {font-family:sans-serif;background-color:threedface}
&lt;/style&gt;
&lt;!--[if IE]&gt;
&lt;style type=&quot;text/css&quot; media=&quot;all&quot;&gt;
ul.menubar { display:inline-block } /* Adds layout to fix IE relative
positioning bug
&lt;/style&gt;
&lt;![endif]--&gt;
&lt;style type=&quot;text/css&quot; media=&quot;handheld&quot;&gt;
body { margin:4px }
&lt;/style&gt;
&lt;style type=&quot;text/css&quot; media=&quot;print&quot;&gt;
body {font-family:serif}
ul.menubar, ul.menuPopup { list-style-type:disc;padding:0 0 0 1em }
ul.menuPopup { border:none;background-
color:white;color:black;position:static !important;display:block !
important }
ul.menuPopup li a {color:black;background-color:inherit}
ul.menuPopup li a.popup:after { content: &quot;&quot;; }
#testPopupMenu { display:none }
&lt;/style&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
var global = this;
if (this.document &amp;&amp; this.document.getElementsByTagName &amp;&amp;
this.document.getElementById) {
(function() {
var html = global.document.getElementsByTagName('html');
if (html &amp;&amp; html[0] &amp;&amp; html[0].style &amp;&amp;
typeof(html[0].style.visibility) == 'string')
{ global.document.write('&lt;style type=&quot;text/css&quot;
media=&quot;all&quot;&gt;#myMenubar, #myMenubarVertical, #myPopupMenu,
#testPopupMenu { visibility:hidden }&lt;\/style&gt;'); }
})();

this.onload = function() {
// Global options
var menuPause = 500;            // Delay before hiding/showing sub-menu
var startWithRollover = false;  // Default requires click to show
initial top-level item (second click hides)
// Set to true to allow rollover to show top-level menus (click
navigates)

var doc = global.document;
var el, elButton;

var activeMenu, timer, hrefTypeUnknown;

function nodeName(el) {
var n = (el.tagName || el.nodeName);
return n &amp;&amp; n.toLowerCase();
}

function cancelPropagation(e) {
e = e || global.event;
if (e.stopPropagation) { e.stopPropagation(); }
e.cancelBubble = true;
}

function setStatus(s) {
// Firefox unload/mouseover bug requires typeof check here
if (typeof(global) != 'undefined') { global.setTimeout(function()
{ if (typeof(global) != 'undefined') { global.status = s; } }, 0); }
return true;
}

function menuRoot(list) {
var root;

if (!list.parentNode || nodeName(list.parentNode) != 'li') { return
null; }
while (list.parentNode) {
list = list.parentNode;
if (list &amp;&amp; nodeName(list) == 'ul') { root = list; }
}
return (root._isRootless)?null:root;
}

function isAncestor(listChild, listParent) {
while (listChild.parentNode &amp;&amp; listChild.parentNode != document) {
if (listChild.parentNode == listParent) { return true; }
listChild = listChild.parentNode;
}
}

function hideActiveMenu(branch, root) {
if (timer) { global.clearTimeout(timer); timer = null; }
activeMenu.style.display = 'none';
var parentMenuItem = activeMenu.parentNode;
if (parentMenuItem &amp;&amp; nodeName(parentMenuItem) == 'li' &amp;&amp;
parentMenuItem.parentNode &amp;&amp; parentMenuItem.parentNode != branch &amp;&amp;
parentMenuItem.parentNode != root) {
activeMenu = parentMenuItem.parentNode;
hideActiveMenu(branch, root);
}
activeMenu = branch || null;
}

function showMenu(el, branch, side, pos) {
if (timer) { global.clearTimeout(timer); timer = null; }
var elOffset, elParent, tag, a;

side = side || 'bottom';
elParent = el.parentNode;

el.style.visibility = 'hidden';
el.style.display = 'block';

if (!pos &amp;&amp; elParent &amp;&amp; nodeName(elParent) == 'li') {
pos = [0, 0];
if (elParent != branch) {
elOffset = elParent;
do {
pos[0] += elOffset.offsetTop || 0;
pos[1] += elOffset.offsetLeft || 0;
if (elParent != elOffset) {
pos[0] += elOffset.clientTop || 0;
pos[1] += elOffset.clientLeft || 0;
}
elOffset = elOffset.offsetParent;
if (elOffset) {
tag = nodeName(elOffset);
if (tag != 'li' &amp;&amp; tag != 'ul') { break; }
}
}
while (elOffset &amp;&amp; elOffset != branch);
}
if (side == 'right') { pos[1] += elParent.offsetWidth || 0; } else
{ pos[0] += elParent.offsetHeight || 0; }
}
if (pos) {
el.style.top = pos[0] + 'px';
el.style.left = pos[1] + 'px';
}
el.style.visibility = 'visible';

if (activeMenu &amp;&amp; !isAncestor(el, activeMenu) &amp;&amp; activeMenu != el)
{
var root = menuRoot(activeMenu);
hideActiveMenu((branch == root)?null:branch, root);
}

activeMenu = el;

a = el.getElementsByTagName('a');
if (a[0] &amp;&amp; a[0].focus) { a[0].focus(); }
}

function showMenuPopup(el) {
...
read more »
</POST>
<POST>
<POSTER> Brian Adkins &lt;lojicdot...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-29T19:44:00 </POSTDATE>
On Sep 29, 6:52 pm, Thomas 'PointedEars' Lahn &lt;PointedE ... @web.de&gt;
wrote:

<QUOTE PREVIOUSPOST="
&gt; But please do that only where it is on-topic.
">

That is appropriate, but I find it humorous nonetheless considering
very little of this thread has been on topic. Who knows, maybe someone
will show up with some useful info regarding JavaScript menus after
all.
</POST>
<POST>
<POSTER> David Mark &lt;dmark.cins...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-29T19:52:00 </POSTDATE>
On Sep 29, 6:25 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Sep 29, 5:12 pm, Thomas 'PointedEars' Lahn &lt;PointedE ... @web.de&gt;
&gt; wrote:

&gt; &gt; Brian Adkins wrote:
&gt; &gt; &gt; On Sep 29, 4:34 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:
&gt; &gt; &gt;&gt; On Sep 29, 4:07 pm, Randy Webb &lt;HikksNotAtH ... @aol.com&gt; wrote:
&gt; &gt; &gt;&gt;&gt; Brian Adkins said the following on 9/29/2007 12:51 PM:
&gt; &gt; &gt;&gt; [...]
&gt; &gt; &gt;&gt; I'm not familiar with the phrase &quot;soup tag HTML&quot;, but it doesn't sound
&gt; &gt; &gt;&gt; good. Which browsers process XHTML as &quot;soup tag HTML&quot; ?

&gt; &gt; The correct term is &quot;tag soup HTML&quot; which is the way most (if not all)
&gt; &gt; parsers in browsers work.  If they do no support a HTML feature or encounter
&gt; &gt; not Valid code, they do error correction.  That is a behavior not allowed
&gt; &gt; for XML documents such as XHTML documents; they have to be well-formed (they
&gt; &gt; need not to be Valid, although due to the definition of validating parsers
&gt; &gt; that is strongly recommended).

&gt; &gt; http://www.hixie.ch/advocacy/xhtml

&gt; Interesting information. I do validate my pages, and I'm not planning
&gt; on sending as 'application/xhtml+xml' anytime soon, but it certainly
">

Then why are you writing XHTML?

<QUOTE PREVIOUSPOST="
&gt; may be that I assumed there were advantages to XHMTL 1.0 Strict after
&gt; reading various information sources (i.e. jumped on a bandwagon). Some
">

Yep.

<QUOTE PREVIOUSPOST="
&gt; of the proposed benefits of XHTML I've heard are:

&gt; * future proofing web pages
">

Somewhat true, though many will argue that HTML5 is the real future.
But if you are going to serve your pages as HTML, you should write
them as HTML.

<QUOTE PREVIOUSPOST="
&gt; * allowing aural screen readers to more easily consume it
">

Hardly.  Most screen readers rely on browsers to parse your tag soup,
so there is no benefit there.  Moreover, I know of no aural browsers
with XML parsers.

<QUOTE PREVIOUSPOST="
&gt; * it's becoming the language of choice for mobile devices
">

Not really.  I imagine you are thinking of XHTML Basic, but that has
little to do with serving XHTML 1.0 as HTML.

<QUOTE PREVIOUSPOST="
&gt; * existing data is more easily transformed into XHTML than HTML
">

Backwards.  It is easier to retrieve data from XHTML.

<QUOTE PREVIOUSPOST="
&gt; * there's not going to be an HTML 5, the new standard is XHTML 1.0
">

XHTML 1.0 is an old standard and it doesn't look like HTML 5 is going
away.  Regardless, the two are not mutually exclusive.

<QUOTE PREVIOUSPOST="
&gt; * &lt;br&gt; seems wrong compared to &lt;br /&gt;
">

It is wrong for XHTML, but correct for HTML.

<QUOTE PREVIOUSPOST="
&gt; * etc.

&gt; For what it's worth, here are the doctypes of 49 sites that I checked
&gt; in mid July:

&gt; http://lojic.com/blog/2007/07/12/which-doctypes-are-being-used/

&gt; Summary is: none = 10, html = 20, xhtml = 19 (only 1 using XHTML 1.1)
">

That one person using XHTML 1.1 is nuts and I suspect the 19 using
XHTML are doing what you are doing (serving tag soup HTML.)

<QUOTE PREVIOUSPOST="
&gt; You've given me some things to think about. If anyone is aware of
&gt; advantages of XHTML 1.1 Strict over HTML 4.01 Strict, feel free to
&gt; chime in.
">

Zero advantages and lots of pitfalls.  XHTML 1.1 is not appropriate
for public Web sites.
</POST>
<POST>
<POSTER> David Mark &lt;dmark.cins...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-29T20:22:00 </POSTDATE>
On Sep 29, 7:37 pm, David Mark &lt;dmark.cins ... @gmail.com&gt; wrote:

Oops.  The instantiation should look more like this:

var displayCheck;
el = doc.getElementById('myMenubar');
if (el) {
el.style.visibility = 'visible';
displayCheck = el.style &amp;&amp; typeof(el.style.display) == 'string' &amp;&amp;
typeof(el.style.position) == 'string';
if (el.parentNode &amp;&amp; displayCheck) {
initializeMenu(el);
}
}
el = doc.getElementById('myMenubarVertical');
if (el &amp;&amp; el.style) { el.style.visibility = 'visible'; }
if (el &amp;&amp; el.parentNode &amp;&amp; displayCheck) {
initializeMenu(el, null, 'right');
}
el = doc.getElementById('myPopupMenu');
elButton = doc.getElementById('testPopupMenu');
if (el &amp;&amp; el.style) { el.style.visibility = 'visible'; }
if (elButton &amp;&amp; elButton.style) { elButton.style.visibility =
'visible'; }
if (el &amp;&amp; el.parentNode &amp;&amp; displayCheck) {
initializeMenuPopup(el);
if (elButton) {
elButton.disabled = false;
attachPopupActivator(elButton, el);
}
}

I tangled up the visibility/display/positioning detection.  Also, the
two references to document.onclick should technically be doc.onclick.
</POST>
<POST>
<POSTER> David Mark &lt;dmark.cins...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-29T21:33:00 </POSTDATE>
On Sep 29, 8:22 pm, David Mark &lt;dmark.cins ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Sep 29, 7:37 pm, David Mark &lt;dmark.cins ... @gmail.com&gt; wrote:
">

[snip]

One last thought.  It would be nice to allow keyboard users to quickly
close the menus without tabbing back to the root (or the activator for
a popup.)

Add one the first function and modify the other two.

function attachDocumentKeyHandler(list, root) {
if (typeof(root) == 'undefined') { root = list; }
var onkeypressOld = doc.onkeypress;
var onkeypressNew = function(e) { e = e || global.event; var key =
e.which || e.keyCode; if (key == 27 &amp;&amp; activeMenu &amp;&amp;
(isAncestor(activeMenu, list) || activeMenu == list))
{ hideActiveMenu(null, root) } };
doc.onkeypress = (onkeypressOld)?function(e) { onkeypressOld(e);
onkeypressNew(e); }:onkeypressNew;
}

function initializeMenu(list, className, initialSide) {
list.className = className || 'menubar';
list.style.position = 'relative';
initializeChildMenus(list, list, initialSide);
attachDocumentClickHandler(list);
attachDocumentKeyHandler(list);
}

function initializeMenuPopup(list, className) {
list.className = className || 'menuPopup';
list._isRootless = true;
initializeChildMenus(list, null);
list.style.position = 'absolute';
list.style.display = 'none';
attachDocumentClickHandler(list, null);
attachDocumentKeyHandler(list, null);
}
</POST>
<POST>
<POSTER> Randy Webb &lt;HikksNotAtH...@aol.com&gt; </POSTER>
<POSTDATE> 2007-09-29T21:35:00 </POSTDATE>
Brian Adkins said the following on 9/29/2007 6:44 PM:

<QUOTE PREVIOUSPOST="
&gt; On Sep 29, 5:51 pm, Thomas 'PointedEars' Lahn &lt;PointedE ... @web.de&gt;
&gt; wrote:
&gt;&gt; Brian Adkins wrote:
&gt;&gt;&gt; [...] Thomas 'PointedEars' Lahn [...] wrote:
&gt;&gt;&gt;&gt; Brian Adkins wrote:
&gt;&gt;&gt;&gt;&gt; On Sep 29, 4:07 pm, Randy Webb &lt;HikksNotAtH ... @aol.com&gt; wrote:
&gt;&gt;&gt;&gt;&gt;&gt; Brian Adkins said the following on 9/29/2007 12:51 PM:
&gt;&gt;&gt;&gt;&gt;&gt;&gt; I also forgot to list one requirement. I'm using XHTML 1.0 Strict, so
&gt;&gt;&gt;&gt;&gt;&gt;&gt; the menu would need to be compatible with that.
&gt;&gt;&gt;&gt;&gt;&gt; Why are you using something that isn't understood by 90% of the web and
&gt;&gt;&gt;&gt;&gt;&gt; would end up being processed as soup tag HTML and thus a true XHTML
&gt;&gt;&gt;&gt;&gt;&gt; script wouldn't work with it?
&gt;&gt;&gt;&gt;&gt; I wasn't aware that &quot;90% of the web&quot; doesn't understand it. Can you
&gt;&gt;&gt;&gt;&gt; provide documentation for that statistic?
&gt;&gt;&gt;&gt; He is referring to Microsoft Internet Explorer not using a built-in XML
&gt;&gt;&gt;&gt; parser for XHTML by default, and not supporting the proper media type for
&gt;&gt;&gt;&gt; XHTML, application/xhtml+xml, ...
&gt;&gt;&gt; I see. I'm not serving it as 'application/xhtml+xml',
&gt;&gt; But as what?

&gt;&gt;&gt; and haven't had any issues with IE so far. I guess the 'text/html' vs.
&gt;&gt;&gt; 'application/xhtml+xml' accounts for the discrepancy between &quot;90% of
&gt;&gt;&gt; the web doesn't understand it&quot; and what I'm seeing.
&gt;&gt; It merely accounts for the possibility of your not understanding
&gt;&gt; what you are doing, see &lt;46FEBFAE.4010 ... @PointedEars.de&gt;.

&gt; You could be right. I should probably hear your perspective on the
&gt; discrepancy between someone's statement that XHTML 1.0 Strict won't
&gt; work on &quot;90% of the web&quot;, and the fact that I haven't uncovered any
&gt; problems (except for losing the target attribute on &lt;a&gt;) on 5 browsers
&gt; running on 3 operating systems covering well over 90% market share.
">

If you don't serve it as XHTML then it isn't XHTML. And no DTD (or any
other element/tag/code in the page) will make the browser interpret it
as XHTML. Even your Firefox is interpreting it as HTML. Serve it with a
proper MIME type and see what IE does with it.

--
Randy
Chance Favors The Prepared Mind
comp.lang.javascript FAQ - http://jibbering.com/faq/index.html
Javascript Best Practices - http://www.JavascriptToolbox.com/bestpractices/
</POST>
<POST>
<POSTER> Peter Michaux &lt;petermich...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-29T22:12:00 </POSTDATE>
On Sep 29, 6:35 pm, Randy Webb &lt;HikksNotAtH ... @aol.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Brian Adkins said the following on 9/29/2007 6:44 PM:

&gt; &gt; On Sep 29, 5:51 pm, Thomas 'PointedEars' Lahn &lt;PointedE ... @web.de&gt;
&gt; &gt; wrote:
&gt; &gt;&gt; Brian Adkins wrote:
&gt; &gt;&gt;&gt; [...] Thomas 'PointedEars' Lahn [...] wrote:
&gt; &gt;&gt;&gt;&gt; Brian Adkins wrote:
&gt; &gt;&gt;&gt;&gt;&gt; On Sep 29, 4:07 pm, Randy Webb &lt;HikksNotAtH ... @aol.com&gt; wrote:
&gt; &gt;&gt;&gt;&gt;&gt;&gt; Brian Adkins said the following on 9/29/2007 12:51 PM:
&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; I also forgot to list one requirement. I'm using XHTML 1.0 Strict, so
&gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; the menu would need to be compatible with that.
&gt; &gt;&gt;&gt;&gt;&gt;&gt; Why are you using something that isn't understood by 90% of the web and
&gt; &gt;&gt;&gt;&gt;&gt;&gt; would end up being processed as soup tag HTML and thus a true XHTML
&gt; &gt;&gt;&gt;&gt;&gt;&gt; script wouldn't work with it?
&gt; &gt;&gt;&gt;&gt;&gt; I wasn't aware that &quot;90% of the web&quot; doesn't understand it. Can you
&gt; &gt;&gt;&gt;&gt;&gt; provide documentation for that statistic?
&gt; &gt;&gt;&gt;&gt; He is referring to Microsoft Internet Explorer not using a built-in XML
&gt; &gt;&gt;&gt;&gt; parser for XHTML by default, and not supporting the proper media type for
&gt; &gt;&gt;&gt;&gt; XHTML, application/xhtml+xml, ...
&gt; &gt;&gt;&gt; I see. I'm not serving it as 'application/xhtml+xml',
&gt; &gt;&gt; But as what?

&gt; &gt;&gt;&gt; and haven't had any issues with IE so far. I guess the 'text/html' vs.
&gt; &gt;&gt;&gt; 'application/xhtml+xml' accounts for the discrepancy between &quot;90% of
&gt; &gt;&gt;&gt; the web doesn't understand it&quot; and what I'm seeing.
&gt; &gt;&gt; It merely accounts for the possibility of your not understanding
&gt; &gt;&gt; what you are doing, see &lt;46FEBFAE.4010 ... @PointedEars.de&gt;.

&gt; &gt; You could be right. I should probably hear your perspective on the
&gt; &gt; discrepancy between someone's statement that XHTML 1.0 Strict won't
&gt; &gt; work on &quot;90% of the web&quot;, and the fact that I haven't uncovered any
&gt; &gt; problems (except for losing the target attribute on &lt;a&gt;) on 5 browsers
&gt; &gt; running on 3 operating systems covering well over 90% market share.

&gt; If you don't serve it as XHTML then it isn't XHTML. And no DTD (or any
&gt; other element/tag/code in the page) will make the browser interpret it
&gt; as XHTML. Even your Firefox is interpreting it as HTML. Serve it with a
&gt; proper MIME type and see what IE does with it.
">

I'd think these quotations would be justification enough.

http://www.webdevout.net/articles/beware-of-xhtml#quotes

Peter
</POST>
<POST>
<POSTER> Randy Webb &lt;HikksNotAtH...@aol.com&gt; </POSTER>
<POSTDATE> 2007-09-29T22:26:00 </POSTDATE>
Thomas 'PointedEars' Lahn said the following on 9/29/2007 6:52 PM:

<QUOTE PREVIOUSPOST="
&gt; Brian Adkins wrote:
">

&lt;snip&gt;

<QUOTE PREVIOUSPOST="
&gt;&gt; You've given me some things to think about. If anyone is aware of
&gt;&gt; advantages of XHTML 1.1 Strict over HTML 4.01 Strict, feel free to
&gt;&gt; chime in.

&gt; But please do that only where it is on-topic.
">

Agreed. As the advantages/disadvantages of XHTML versus HTML, and the
ability to script the two different DOM'es with one script would be
totally off-topic to clj

<QUOTE PREVIOUSPOST="
&gt; F'up2 comp.infosystems. www.authoring.html
">

F'up set back where I want it set for my post.

--
Randy
Chance Favors The Prepared Mind
comp.lang.javascript FAQ - http://jibbering.com/faq/index.html
Javascript Best Practices - http://www.JavascriptToolbox.com/bestpractices/
</POST>
<POST>
<POSTER> Brian Adkins &lt;lojicdot...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-29T23:40:00 </POSTDATE>
On Sep 29, 10:12 pm, Peter Michaux &lt;petermich ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Sep 29, 6:35 pm, Randy Webb &lt;HikksNotAtH ... @aol.com&gt; wrote:

&gt; &gt; Brian Adkins said the following on 9/29/2007 6:44 PM:

&gt; &gt; &gt; On Sep 29, 5:51 pm, Thomas 'PointedEars' Lahn &lt;PointedE ... @web.de&gt;
&gt; &gt; &gt; wrote:
&gt; &gt; &gt;&gt; Brian Adkins wrote:
&gt; &gt; &gt;&gt;&gt; [...] Thomas 'PointedEars' Lahn [...] wrote:
&gt; &gt; &gt;&gt;&gt;&gt; Brian Adkins wrote:
&gt; &gt; &gt;&gt;&gt;&gt;&gt; On Sep 29, 4:07 pm, Randy Webb &lt;HikksNotAtH ... @aol.com&gt; wrote:
&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt; Brian Adkins said the following on 9/29/2007 12:51 PM:
&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; I also forgot to list one requirement. I'm using XHTML 1.0 Strict, so
&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt;&gt; the menu would need to be compatible with that.
&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt; Why are you using something that isn't understood by 90% of the web and
&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt; would end up being processed as soup tag HTML and thus a true XHTML
&gt; &gt; &gt;&gt;&gt;&gt;&gt;&gt; script wouldn't work with it?
&gt; &gt; &gt;&gt;&gt;&gt;&gt; I wasn't aware that &quot;90% of the web&quot; doesn't understand it. Can you
&gt; &gt; &gt;&gt;&gt;&gt;&gt; provide documentation for that statistic?
&gt; &gt; &gt;&gt;&gt;&gt; He is referring to Microsoft Internet Explorer not using a built-in XML
&gt; &gt; &gt;&gt;&gt;&gt; parser for XHTML by default, and not supporting the proper media type for
&gt; &gt; &gt;&gt;&gt;&gt; XHTML, application/xhtml+xml, ...
&gt; &gt; &gt;&gt;&gt; I see. I'm not serving it as 'application/xhtml+xml',
&gt; &gt; &gt;&gt; But as what?

&gt; &gt; &gt;&gt;&gt; and haven't had any issues with IE so far. I guess the 'text/html' vs.
&gt; &gt; &gt;&gt;&gt; 'application/xhtml+xml' accounts for the discrepancy between &quot;90% of
&gt; &gt; &gt;&gt;&gt; the web doesn't understand it&quot; and what I'm seeing.
&gt; &gt; &gt;&gt; It merely accounts for the possibility of your not understanding
&gt; &gt; &gt;&gt; what you are doing, see &lt;46FEBFAE.4010 ... @PointedEars.de&gt;.

&gt; &gt; &gt; You could be right. I should probably hear your perspective on the
&gt; &gt; &gt; discrepancy between someone's statement that XHTML 1.0 Strict won't
&gt; &gt; &gt; work on &quot;90% of the web&quot;, and the fact that I haven't uncovered any
&gt; &gt; &gt; problems (except for losing the target attribute on &lt;a&gt;) on 5 browsers
&gt; &gt; &gt; running on 3 operating systems covering well over 90% market share.

&gt; &gt; If you don't serve it as XHTML then it isn't XHTML. And no DTD (or any
&gt; &gt; other element/tag/code in the page) will make the browser interpret it
&gt; &gt; as XHTML. Even your Firefox is interpreting it as HTML. Serve it with a
&gt; &gt; proper MIME type and see what IE does with it.

&gt; I'd think these quotations would be justification enough.

&gt; http://www.webdevout.net/articles/beware-of-xhtml#quotes

&gt; Peter
">

Yes, I find those quotes signficant.

I see what Randy was trying to say in his initial post - the subtlety
was lost on me. I was ignorant of the fact that my carefully crafted
XHTML 1.0 Strict code was being handled as as HTML. I think I figured
the 'text/html' content type was simply to placate IE and that the
XHTML capable browsers would obey the doctype. From my research today,
it's clear that this is an all too common misconception. Bad book
authors :)

This is certainly a heavily debated topic, but I've personally been
unable to find enough evidence to justify serving XHTML up as HTML, so
unless I turn up something significant in the next few days, I think
I'll switch to HTML 4.01 Strict and continue to code in an XHTML
style. At least I feel better informed now.

There certainly seems to be a strong trend in moving to XHTML with a
'text/html' content type, so it appears that either a lot of major
site operators are misinformed, or I've yet to get all the relevant
facts about this.
</POST>
<POST>
<POSTER> Peter Michaux &lt;petermich...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-30T00:14:00 </POSTDATE>
On Sep 29, 8:40 pm, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; I think
&gt; I'll switch to HTML 4.01 Strict and continue to code in an XHTML
&gt; style.
">

If you use HTML doctype it would be wise to make sure your markup is
valid HTML (just forget about XHTML all together).

http://validator.w3.org/

Peter
</POST>
<POST>
<POSTER> Randy Webb &lt;HikksNotAtH...@aol.com&gt; </POSTER>
<POSTDATE> 2007-09-30T01:10:00 </POSTDATE>
Brian Adkins said the following on 9/29/2007 11:40 PM:

<QUOTE PREVIOUSPOST="
&gt; On Sep 29, 10:12 pm, Peter Michaux &lt;petermich ... @gmail.com&gt; wrote:
">

&lt;snip&gt;

<QUOTE PREVIOUSPOST="
&gt;&gt; I'd think these quotations would be justification enough.

&gt;&gt; http://www.webdevout.net/articles/beware-of-xhtml#quotes

&gt;&gt; Peter

&gt; Yes, I find those quotes signficant.

&gt; I see what Randy was trying to say in his initial post - the subtlety
&gt; was lost on me. I was ignorant of the fact that my carefully crafted
&gt; XHTML 1.0 Strict code was being handled as as HTML. I think I figured
&gt; the 'text/html' content type was simply to placate IE and that the
&gt; XHTML capable browsers would obey the doctype. From my research today,
&gt; it's clear that this is an all too common misconception. Bad book
&gt; authors :)
">

Yes. Most programming books are not worth the paper they are printed on.

<QUOTE PREVIOUSPOST="
&gt; This is certainly a heavily debated topic, but I've personally been
&gt; unable to find enough evidence to justify serving XHTML up as HTML, so
&gt; unless I turn up something significant in the next few days, I think
&gt; I'll switch to HTML 4.01 Strict and continue to code in an XHTML
&gt; style. At least I feel better informed now.
">

You can save yourself a &quot;few days&quot; of searching and simply forget about
XHTML for anytime in the foreseeable future. Just don't forget that HTML
doesn't have a short tag syntax.

<QUOTE PREVIOUSPOST="
&gt; There certainly seems to be a strong trend in moving to XHTML with a
&gt; 'text/html' content type, so it appears that either a lot of major
&gt; site operators are misinformed, or I've yet to get all the relevant
&gt; facts about this.
">

They are either misinformed, ignorant, or just want to be able to say
&quot;We use XHTML on our AJAX site&quot; or something similar. First bet is on
ignorance though.

--
Randy
Chance Favors The Prepared Mind
comp.lang.javascript FAQ - http://jibbering.com/faq/index.html
Javascript Best Practices - http://www.JavascriptToolbox.com/bestpractices/
</POST>
<POST>
<POSTER> David Mark &lt;dmark.cins...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-30T01:24:00 </POSTDATE>
On Sep 29, 8:22 pm, David Mark &lt;dmark.cins ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Sep 29, 7:37 pm, David Mark &lt;dmark.cins ... @gmail.com&gt; wrote:
">

[snip]

Took a moment to try this in IE6 and it looked a lot like IE7 quirks
mode.  That was surprising as there isn't usually a correlation
between IE6 standards and IE7 quirks.  I had forgotten how
unpredictable lists were in IE.

In short, IE6 requires widths for the list items (which sucks.)  I
gave them all the same widths and tweaked a few other things with
conditional comments.  The result is a lot uglier, but at least there
are no parse-related hacks.  The rendering is the same as before in
everything but IE6.  Other than the fixed widths, IE6 looks the same
as everything else.  Quirks mode is definitely out, but not
necessarily IE5.5 as there are no box model issues.  I suspect Mac IE
will have some some problems, but couldn't care less at this point.

Also note that one of the menus in the original is too wide for 6em.
I didn't bother to add a specific rule to accommodate it, so that menu
will look weird in IE6 unless the captions are shortened.

&lt;style type=&quot;text/css&quot; media=&quot;all&quot;&gt;
ul.menubar { list-style-type:none;padding:0;margin:0 }
ul.menubar a, ul.menuPopup a { padding: 0 .25em 0 .25em }
ul.menubar li { margin:0;padding:0;display:inline}

ul.menubar li a:link, ul.menubar li a:visited { text-decoration:none }
ul.menubar li a:hover { background-color:#0000DD;color:white }
ul.menuPopup { list-style-type:none;padding:0;margin:0;border:outset
2px;background-color:threedface;color:windowtext;z-index:1 }
ul.menuPopup li { white-space:nowrap;display:block;width:auto }
ul.menuPopup li a { width:auto }
ul.menuPopup li a:link, ul.menuPopup li a:visited { text-
decoration:none }
ul.menuPopup li a:hover { background-color:#0000DD;color:white }
ul.menuPopup li a.popup:after { content: &quot;\0020\00BB&quot;; }

#myMenubarVertical.menubar { width:6em;margin-bottom:1em }
#myMenubarVertical.menubar li { display:block;width:auto }
#myMenubarVertical.menubar li a { width:auto }

#testPopupMenu { display:block; margin-top:1em }

body {font-family:sans-serif;background-color:threedface}
&lt;/style&gt;
&lt;!--[if !IE]&gt;--&gt;
&lt;style type=&quot;text/css&quot; media=&quot;all&quot;&gt;
#myMenubarVertical.menubar li a, ul.menuPopup li a { display:block }
&lt;/style&gt;
&lt;!--&lt;![endif]--&gt;
&lt;!--[if IE]&gt;
&lt;style type=&quot;text/css&quot; media=&quot;all&quot;&gt;
ul.menubar { display:inline-block } /* Adds layout to fix IE relative
positioning bug */
&lt;/style&gt;
&lt;![endif]--&gt;
&lt;!--[if gt IE 6]&gt;
&lt;style type=&quot;text/css&quot; media=&quot;all&quot;&gt;
#myMenubarVertical.menubar li a, ul.menuPopup li a { display:block }
&lt;/style&gt;
&lt;![endif]--&gt;
&lt;!--[if lt IE 7]&gt;
&lt;style type=&quot;text/css&quot; media=&quot;all&quot;&gt;
ul.menubar li, ul.menubar li a, ul.menuPopup li, ul.menuPopup li a
{ height:1% }
ul.menuPopup li, ul.menuPopup li a, #myMenubarVertical.menubar li,
#myMenubarVertical.menubar li a { width:6em; zoom:1 }
&lt;/style&gt;
&lt;![endif]--&gt;
</POST>
<POST>
<POSTER> &quot;Richard Cornford&quot; &lt;Rich...@litotes.demon.co.uk&gt; </POSTER>
<POSTDATE> 2007-09-30T14:31:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Brian Adkins wrote:
&gt; On Sep 29, 10:12 pm, Peter Michaux wrote:
&gt;&gt; On Sep 29, 6:35 pm, Randy Webb wrote:
&lt;snip&gt;
&gt;&gt;&gt; If you don't serve it as XHTML then it isn't XHTML. And no
&gt;&gt;&gt; DTD (or any other element/tag/code in the page) will make
&gt;&gt;&gt; the browser interpret it as XHTML. Even your Firefox is
&gt;&gt;&gt; interpreting it as HTML. Serve it with a proper MIME type
&gt;&gt;&gt; and see what IE does with it.

&gt;&gt; I'd think these quotations would be justification enough.

&gt;&gt; http://www.webdevout.net/articles/beware-of-xhtml#quotes

&gt; Yes, I find those quotes signficant.

&gt; I see what Randy was trying to say in his initial post - the
&gt; subtlety was lost on me. I was ignorant of the fact that my
&gt; carefully crafted XHTML 1.0 Strict code was being handled as
&gt; as HTML. I think I figured the 'text/html' content type was
&gt; simply to placate IE and that the XHTML capable browsers would
&gt; obey the doctype.
">

Which means that you were also not aware that there is a distinction
between HTML DOMs and XHTML DOMs. If you are scripting a DOM absolutely
the last thing you would want is to be scripting one type of DOM in one
browser and another type in the next.

<QUOTE PREVIOUSPOST="
&gt; From my research today, it's clear that this is an all too
&gt; common misconception.
">

All too common, and such that sufferers from the misconception are
extremely resistant to being corrected.

<QUOTE PREVIOUSPOST="
&gt; Bad book authors :)
">

Yes, but not only. Bad web page authors (directly, and those writing
pages on writing web pages) are probably more guilty (by weight of
numbers) , along with the participants in small circulation web forums,
mailing lists and other web development 'communities'.

<QUOTE PREVIOUSPOST="
&gt; This is certainly a heavily debated topic, but I've personally
&gt; been unable to find enough evidence to justify serving XHTML
&gt; up as HTML, so unless I turn up something significant in the
&gt; next few days, I think I'll switch to HTML 4.01 Strict and
&gt; continue to code in an XHTML style. At least I feel better
&gt; informed now.
">

While you are judging the 'significance' of what you find consider the
consequence of scripting such a document. Since almost no non-trivial
scripts will operate successfully with both and HTML DOM and an XHTML
DOM and a document served as text/html will result in the browser
exposing an HTML DOM to be scripted, will it ever make sense to be
marking-up a document as XHTML and then scripting with the pre-requisite
that it will _never_ be interpreted as being an XHTML document by a web
browser.

<QUOTE PREVIOUSPOST="
&gt; There certainly seems to be a strong trend in moving to XHTML
&gt; with a 'text/html' content type,
">

There certainly is a strong trend towards seeing increasing quantities
of XHTML-style mark-up in documents (whether they be XHTML or not). It
is most obvious that fundamental miscomputations are driving this trend
when you observe the number of documents where &lt;br&gt; appears alongside
&lt;br /&gt; (or when you see things like &lt;BR /&gt;).

<QUOTE PREVIOUSPOST="
&gt; so it appears that either a lot of major site operators are
&gt; misinformed, or I've yet to get all the relevant facts about
&gt; this.
">

The general standard of technical understanding, even on 'major sites',
is so low that 'misinformed' is probably pushing things too far. To be
misinformed you need to be (in some sense) 'informed' in the first
place. Plain old endemic ignorance is a much better explanation; these
people just don't know why they are doing what they are doing.

Much of the time when we get into this XHTML/HTML discussion here it
quickly obvious that the individuals being asked why they are using
XHTML-style mark-up while scripting an HTML DOM not only don't know that
there is a distinction between the types of DOM, but don't actually know
what an HTTP content-type header is. These is no informed decision
making in what they do, just the random outcome of the aggregation of an
extended sequence of 'learnt' mystical incantations.

The depth, and pervasive nature of, that endemic ignorance is best
illustrated by the current set of 'popular' javascript libraries. Where
people who don't know any better are importing the ignorance of others
into their own projects.

On Monday morning I have been asked to analyse why an 'AJAX' web
application written by one of our subsidiary companies runs so badly on
IE6 as to be non-viable. I have not seen the code yet and the only
things I know about it are that it was written by experienced Java
programmers (so I am expecting them to have made all the mistakes I made
when moving from Java to javascript) and that they have used to
'popular' dojo library. In preparation I thought it would be a good idea
to have a look at the dojo library code, so I spent a few hours
yesterday doing that, to discover (as I expected I would) that its
authors were not particularly knowledgeable about javascript or browser
scripting. To illustrate:-

From a file called &quot;dojo.js&quot; (re-wrapped for newsgroup posting):-

| document.write(&quot;&lt;scr&quot;+&quot;ipt type='text/javascript' src='&quot;+
|                spath+
|                &quot;'&gt;&lt;/scr&quot;+&quot;ipt&gt;&quot;
|               );

In the mark-up string being presented to the - document.write - method
you will see two string concatenation operations being used to
'split-up' the SCRIPT opening and closing tags. This is a mystical
incantation that ignorant script authors chant in the face of a real
issue. The real issues is that when an HTML parser encounters an opening
SCRIPT tag it must determine how much (if any) of the following material
is script code that should be sent to a script engine for processing and
when it should resume processing the input stream as HTML mark-up. The
obvious signal for the end of contents of a SCRIPT element would be the
closing SCRIPT tag. However, the HTML parser has no means of seeing the
characters in the input stream as anything other than characters so if a
javascript string contains the character sequence '&lt;/script&gt;' the HTML
parser is going to see that as the character sequence it is interested
in; the end of the contents of the SCRIPT element. Resulting in an
unterminated string literal error in the javascript source and gibberish
text content in the HTML document.

There is also a formal issue that differs slightly form the real issue.
The HTML specification clearly states that CDATA contents of an element
(SCRIPT element contents are CDATA in HTML) may be terminated by the
first occurrence of the character sequence '&lt;/'. In practice no browsers
are known to follow this aspect of the HTML specification to the letter,
but a knowledgeable HTML author would have no excuse for complaint if a
future browser did terminate CDATA sections at the point of first
encountering the character sequence '&lt;/'.

So the things that make the above code a mystical incantation are:-

1. The string concatenation operation in the opening SCRIPT
tag is a needless runtime overhead to do something that
has no relationship to either the real issue or the formal
issue. It just should never have appeared in any code.
2. The string concatenation operation in the closing SCRIPT
element may deal with the real issue but it does not address
the formal issue. While any approach that did address the
formal issue by breaking up the '&lt;/' sequence would also
break up the '&lt;/script&gt; sequence.
3. A concatenation operation is a poor approach to this issue
as the HTML parser is only able to see the raw source text
characters. Breaking up the problematic character sequences
with escape (backslash) characters would be just as effective
at concealing them form the HTML parser but would do so in a
way that had no consequences beyond the point where the
string literal was converted into a string primitive value
(during the compiling of the script into an executable). That
is, there is no need for the runtime overhead of two (or
four in this case) string concatenation operations. The
recommended approach is to turn the sequence '&lt;/script&gt;' in
string literals into the sequence '&lt;\/script&gt;' and so address
the real and formal issues without any runtime overhead.
4. The code is actually in an external javascript resource and
so will never be presented to an HTML parser for examination.
Neither the real nor the formal issues apply to this code at
all.

Another illustration is to be found in dojo's 'dom.js:-

|   if(
|      elem == null ||
|      ((elem == undefined)&amp;&amp;(typeof elem == &quot;undefined&quot;))
|   ){
|       dojo.raise(&quot;No element given to dojo.dom.setAttributeNS&quot;);
|   }

Using the type-converting equality operator (- == -) there are precisely
two values that are equal to null. They are null (unsurprisingly) and
the undefined value. In the above tests whenever - elem - is null or
undefined the - elem == null - expression is true and the - ((elem ==
undefined)&amp;&amp;(typeof elem == &quot;undefined&quot;)) - expression is not evaluated.
So whenever the - ((elem == undefined)&amp;&amp;(typeof elem == &quot;undefined&quot;)) -
expression is evaluated the value of - elem - must be neither null nor
undefined. But if - elem - must be neither null nor undefined then -
(elem == undefined) - must always be false (as only undefined and null
equal (by type-converting equality) undefined), and as - (elem ==
undefined) - must be false the - (typeof elem == &quot;undefined&quot;) - can
*never* be evaluated.

We are looking at code where the author has written the test
expression - elem == null - without understanding the operation being
performed and made that ignorance self-evident by following it with a
test that can only have one outcome in its context, and a third test
that can never be evaluated (though if it were evaluated the result
would be as predictably false as the - (elem == undefined) -
expression).

The annoying part of this nonsense is that in its normal use, when -
elem - will be a reference to a DOM Element, that - (elem ==
undefined) - is going to be evaluated, and it is going to produce its
predictably false result. Just another avoidable runtime overhead,
included for no reason other than ignorance.

It is ...
read more »
</POST>
<POST>
<POSTER> Peter Michaux &lt;petermich...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-09-30T15:34:00 </POSTDATE>
On Sep 30, 11:31 am, &quot;Richard Cornford&quot; &lt;Rich ... @litotes.demon.co.uk&gt;
wrote:

[snip examples of less than optimal code in dojo]

<QUOTE PREVIOUSPOST="
&gt; So yes we do live in a world where the operators of 'major sites' are
&gt; misinformed, and likely to stay that way because the odds are that the
&gt; next person to 'inform' them will likely be as misinformed themselves.
">

Would you agree that most niches in the programming world are filled
with people that are misinformed and making decision that are randomly
good or bad? I would say mediocrity and satifaction with just enough
information to avoid being fired extends to some fraction of
individuals in every intellectual field with which I have had contact.

N.B. I'm not claiming I'm anything other than average. I have no
justification to do so.

Peter
</POST>
<POST>
<POSTER> &quot;Richard Cornford&quot; &lt;Rich...@litotes.demon.co.uk&gt; </POSTER>
<POSTDATE> 2007-09-30T16:52:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Peter Michaux wrote:
&gt; On Sep 30, 11:31 am, Richard Cornford wrote:

&gt; [snip examples of less than optimal code in dojo]
">

&quot;Less then optimal&quot;? That code was well into the range of b***dy stupid.

<QUOTE PREVIOUSPOST="
&gt;&gt; So yes we do live in a world where the operators of 'major
&gt;&gt; sites' are misinformed, and likely to stay that way because
&gt;&gt; the odds are that the next person to 'inform' them will
&gt;&gt; likely be as misinformed themselves.

&gt; Would you agree that most niches in the programming world are
&gt; filled with people that are misinformed and making decision
&gt; that are randomly good or bad?
">

Not in my experience.

<QUOTE PREVIOUSPOST="
&gt; I would say mediocrity and satifaction with just enough
&gt; information to avoid being fired extends to some fraction of
&gt; individuals in every intellectual field with which I have
&gt; had contact.
">

&lt;snip&gt;

There is a big difference between &quot;most&quot; and &quot;some&quot;.

But what is your point? Does an inept programmer become competent when
the person sitting at the next desk is worse?

Richard.
</POST>
<POST>
<POSTER> Brian Adkins &lt;lojicdot...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-10-01T12:07:00 </POSTDATE>
On Sep 30, 2:31 pm, &quot;Richard Cornford&quot; &lt;Rich ... @litotes.demon.co.uk&gt;
wrote:

<QUOTE PREVIOUSPOST="
&gt; Brian Adkins wrote:
&gt; &gt; On Sep 29, 10:12 pm, Peter Michaux wrote:
&gt; &gt;&gt; On Sep 29, 6:35 pm, Randy Webb wrote:
&gt; &gt; I think I figured the 'text/html' content type was
&gt; &gt; simply to placate IE and that the XHTML capable browsers would
&gt; &gt; obey the doctype.

&gt; Which means that you were also not aware that there is a distinction
&gt; between HTML DOMs and XHTML DOMs.
">

Correct.

<QUOTE PREVIOUSPOST="
&gt; &gt; I think I'll switch to HTML 4.01 Strict and
&gt; &gt; continue to code in an XHTML style. At least I feel better
&gt; &gt; informed now.

&gt; While you are judging the 'significance' of what you find consider the
&gt; consequence of scripting such a document.
">

Just to clarify. What I meant by 'coding in an XHTML style' is things
like using lowercase attribute names with quotations, using closing
tags even if they're optional, etc. such that the markup is valid HTML
resulting in an HTML DOM.

<QUOTE PREVIOUSPOST="
&gt; The depth, and pervasive nature of, that endemic ignorance is best
&gt; illustrated by the current set of 'popular' javascript libraries. Where
&gt; people who don't know any better are importing the ignorance of others
&gt; into their own projects.
">

Could it be that people are simply doing their best to try and find a
library that is the lesser of evils to avoid the disadvantages of
writing everything themselves? In my short time on c.l.j, I have seen
many criticisms of JavaScript libraries but few recommendations. It
could be that they simply got lost in the noise.

Are there any JavaScript libraries that you can recommend over
reinventing wheels? I checked the FAQ and didn't see anything.

I'm also curious if the folks criticizing the 'popular' JavaScript
libraries (or their authors) have attempted to improve the code -
either by direct contribution or via educating the authors. Or are
they beyond hope?
</POST>
<POST>
<POSTER> Thomas &#39;PointedEars&#39; Lahn &lt;PointedE...@web.de&gt; </POSTER>
<POSTDATE> 2007-10-01T12:20:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Brian Adkins wrote:
&gt; On Sep 30, 2:31 pm, &quot;Richard Cornford&quot; &lt;Rich ... @litotes.demon.co.uk&gt;
&gt; wrote:
&gt;&gt; Brian Adkins wrote:
&gt;&gt;&gt; On Sep 29, 10:12 pm, Peter Michaux wrote:
&gt;&gt;&gt;&gt; On Sep 29, 6:35 pm, Randy Webb wrote:
&gt;&gt;&gt; I think I'll switch to HTML 4.01 Strict and
&gt;&gt;&gt; continue to code in an XHTML style. At least I feel better
&gt;&gt;&gt; informed now.
&gt;&gt; While you are judging the 'significance' of what you find consider the
&gt;&gt; consequence of scripting such a document.

&gt; Just to clarify. What I meant by 'coding in an XHTML style' is things
&gt; like using lowercase attribute names with quotations, using closing
&gt; tags even if they're optional, etc. such that the markup is valid HTML
&gt; resulting in an HTML DOM.
">

If you observe more closely, you will see that XHTML cannot be made fully
HTML-compatible this way, at least because IE renders &lt;br&gt;&lt;/br&gt; as *two*
lines.  And XHTML 1.0, Appendix C (which is not normative BTW), fails to
recognize that in a non-tagsoup HTML parser `&lt;br /&gt;' equals `&lt;br&gt;&amp;gt;'.

PointedEars
--
var bugRiddenCrashPronePieceOfJunk = (
navigator.userAgent.indexOf('MSIE 5') != -1
&amp;&amp; navigator.userAgent.indexOf('Mac') != -1
)  // Plone, register_function.js:16
</POST>
<POST>
<POSTER> Peter Michaux &lt;petermich...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-10-01T13:06:00 </POSTDATE>
On Oct 1, 9:07 am, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Sep 30, 2:31 pm, &quot;Richard Cornford&quot; &lt;Rich ... @litotes.demon.co.uk&gt;
&gt; wrote:

&gt; &gt; Brian Adkins wrote:
&gt; &gt; &gt; On Sep 29, 10:12 pm, Peter Michaux wrote:
&gt; &gt; &gt;&gt; On Sep 29, 6:35 pm, Randy Webb wrote:
&gt; &gt; &gt; I think I figured the 'text/html' content type was
&gt; &gt; &gt; simply to placate IE and that the XHTML capable browsers would
&gt; &gt; &gt; obey the doctype.

&gt; &gt; Which means that you were also not aware that there is a distinction
&gt; &gt; between HTML DOMs and XHTML DOMs.

&gt; Correct.

&gt; &gt; &gt; I think I'll switch to HTML 4.01 Strict and
&gt; &gt; &gt; continue to code in an XHTML style. At least I feel better
&gt; &gt; &gt; informed now.

&gt; &gt; While you are judging the 'significance' of what you find consider the
&gt; &gt; consequence of scripting such a document.

&gt; Just to clarify. What I meant by 'coding in an XHTML style' is things
&gt; like using lowercase attribute names with quotations, using closing
&gt; tags even if they're optional, etc. such that the markup is valid HTML
&gt; resulting in an HTML DOM.
">

Lower case attribute names and quoted values are fine ideas. I
certainly find it easiest to read HTML written this way.

<QUOTE PREVIOUSPOST="
&gt; &gt; The depth, and pervasive nature of, that endemic ignorance is best
&gt; &gt; illustrated by the current set of 'popular' javascript libraries. Where
&gt; &gt; people who don't know any better are importing the ignorance of others
&gt; &gt; into their own projects.

&gt; Could it be that people are simply doing their best to try and find a
&gt; library that is the lesser of evils to avoid the disadvantages of
&gt; writing everything themselves?
">

Many developers, particularly server-side developers, don't like UI
work and really hate dealing with browser bugs. They are happy to have
someone else do the work and if it works in the majority of their
target browser market that is good enough. These days the &quot;good
enough&quot; market is usually IE6/IE6/FF2/O9/S2 with JavaScript, ActiveX,
CSS and images all enabled.

I think many times on comp.lang.javascript the business goals of a
project are forgotten in favor of technical perfection. I wouldn't
want c.l.j to be any other way and focusing on business goals and
&quot;good enough&quot; has led to such a heap of released libraries that really
aren't ready for production.

<QUOTE PREVIOUSPOST="
&gt; In my short time on c.l.j, I have seen
&gt; many criticisms of JavaScript libraries but few recommendations. It
&gt; could be that they simply got lost in the noise.
">

Quite a few c.l.j regulars think libraries are a bad idea in general.
They do admit to reusing code of their own so in some sense do use
libraries.

A big issue with libraries is what is considered bloat. For a
particular page, how much library code sent to the browser is never
used? If this code is cached is it used on some other page of the
site? It is a balance of library granularity, page load times and
caching.

<QUOTE PREVIOUSPOST="
&gt; Are there any JavaScript libraries that you can recommend over
&gt; reinventing wheels? I checked the FAQ and didn't see anything.
">

I've never had the opportunity to use a pre-made high-level library
widget component (eg data table, in-window popup, accordion, tabbed
pane, etc). I always need to write custom widgets. These have features
no general purpose library widget would have and are usually something
like a tenth the size of some roughly similar library widget. What I
do find useful are the low-level libraries: Event, Ajax(XHR), DOM
searching/creating. Having most of the low-level browser bugs
normalized with these libraries makes writing custom widgets quite
easy and fast.

<QUOTE PREVIOUSPOST="
&gt; I'm also curious if the folks criticizing the 'popular' JavaScript
&gt; libraries (or their authors) have attempted to improve the code -
&gt; either by direct contribution or via educating the authors. Or are
&gt; they beyond hope?
">

On various lists for the popular libraries and in posts on c.l.j, I've
seen c.l.j regulars offer very good advice. Take the Prototype
developers as an example. They have had advice hurled at them in
various forms for years. The usual response is something along the
lines of &quot;that just isn't cool&quot;; however, a few months or a year down
the road they realize the wisdom of the advice and do make the change.
The Prototype library is big (~3400 lines) but it is small enough that
someone both familiar with the library and a knowledgeable JavaScript
programmer could sit down and rewrite it in under a month and remove a
slew of bugs and poor design decisions. This would require a big API
change which &quot;just isn't cool&quot;...yet.

I think the majority of c.l.j regulars prefer to roll their own. Then
if something needs changing they can just change it without going
through some long political process to have a patch accepted.

Peter
</POST>
<POST>
<POSTER> Brian Adkins &lt;lojicdot...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-10-01T13:25:00 </POSTDATE>
On Oct 1, 12:20 pm, Thomas 'PointedEars' Lahn &lt;PointedE ... @web.de&gt;
wrote:

<QUOTE PREVIOUSPOST="
&gt; Brian Adkins wrote:
&gt; &gt; Just to clarify. What I meant by 'coding in an XHTML style' is things
&gt; &gt; like using lowercase attribute names with quotations, using closing
&gt; &gt; tags even if they're optional, etc. such that the markup is valid HTML
&gt; &gt; resulting in an HTML DOM.

&gt; If you observe more closely, you will see that XHTML cannot be made fully
&gt; HTML-compatible this way, at least because IE renders &lt;br&gt;&lt;/br&gt; as *two*
&gt; lines.  And XHTML 1.0, Appendix C (which is not normative BTW), fails to
&gt; recognize that in a non-tagsoup HTML parser `&lt;br /&gt;' equals `&lt;br&gt;&amp;gt;'.
">

My goal is *not* to make XHTML fully HTML-compatible. I stated &quot;such
that the markup is valid HTML&quot; and referred to &quot;optional&quot; closing
tags, not &quot;forbidden&quot; ones, yet you show &lt;br&gt; with an end tag which is
forbidden (as it is for &lt;img&gt;, &lt;meta&gt;, etc.) according to the spec
here:

http://www.w3.org/TR/html401/index/elements.html

On the other hand, the closing tag for &lt;p&gt; is optional (as is &lt;body&gt;,
&lt;li&gt;, etc.), but in keeping with an XHTML &quot;style&quot; I would choose to
include the closing tag when optional.

I appreciate your enthusiasm, but maybe you could channel this extra
energy into recommending a JavaScript library &quot;that doesn't suck&quot; :)
</POST>
<POST>
<POSTER> Peter Michaux &lt;petermich...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-10-01T13:52:00 </POSTDATE>
On Oct 1, 10:25 am, Brian Adkins &lt;lojicdot ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; recommending a JavaScript library &quot;that doesn't suck&quot; :)
">

You realize how dangerous it is for someone to make such a
recommendation on c.l.j? If the library isn't perfect then it &quot;sucks&quot;.

I'll stick my neck out and say I think mine doesn't suck. I need to
make a few changes which are mostly stylistic.

&lt;URL: http://forkjavascript.org/ &gt;

I've never seen another library tested so widely

&lt;URL: http://forkjavascript.org/welcome/browser_support &gt;

Peter
</POST>
<POST>
<POSTER> Thomas &#39;PointedEars&#39; Lahn &lt;PointedE...@web.de&gt; </POSTER>
<POSTDATE> 2007-10-01T15:50:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Brian Adkins wrote:
&gt; [...] Thomas 'PointedEars' Lahn [...] wrote:
&gt;&gt; Brian Adkins wrote:
&gt;&gt;&gt; Just to clarify. What I meant by 'coding in an XHTML style' is things
&gt;&gt;&gt; like using lowercase attribute names with quotations, using closing
&gt;&gt;&gt; tags even if they're optional, etc. such that the markup is valid HTML
&gt;&gt;&gt; resulting in an HTML DOM.
&gt;&gt; If you observe more closely, you will see that XHTML cannot be made fully
&gt;&gt; HTML-compatible this way, at least because IE renders &lt;br&gt;&lt;/br&gt; as *two*
&gt;&gt; lines.  And XHTML 1.0, Appendix C (which is not normative BTW), fails to
&gt;&gt; recognize that in a non-tagsoup HTML parser `&lt;br /&gt;' equals `&lt;br&gt;&amp;gt;'.

&gt; My goal is *not* to make XHTML fully HTML-compatible.
">

But that has to be your goal or you have neither Valid XHTML nor Valid HTML
markup that can be used to create a document tree in the DOM.

<QUOTE PREVIOUSPOST="
&gt; I stated &quot;such that the markup is valid HTML&quot; and referred to &quot;optional&quot;
&gt; closing tags, not &quot;forbidden&quot; ones, yet you show &lt;br&gt; with an end tag which
&gt; is forbidden (as it is for &lt;img&gt;, &lt;meta&gt;, etc.) according to the spec
&gt; here:

&gt; http://www.w3.org/TR/html401/index/elements.html
">

Utter nonsense.  As you can observe in the specification, all HTML elements
with an empty content model, including the `br', `img' and `meta' elements,
have an *optional* end tag.  That goes for HTML 3.2, HTML 4.01 Transitional,
Frameset, and Strict, and (so) even ISO HTML.  It is that property of HTML
that can make XHTML 1.0 HTML-compatible generally, if it were not for the
faulty Trident.

<QUOTE PREVIOUSPOST="
&gt; On the other hand, the closing tag for &lt;p&gt; is optional
">

As is `&lt;/br&gt;'.

<QUOTE PREVIOUSPOST="
&gt; [...]
&gt; I appreciate your enthusiasm, but maybe you could channel this extra
&gt; energy into recommending a JavaScript library &quot;that doesn't suck&quot; :)
">

Since I never had the need for a library for the feature you are looking for
(as the posted links should have proven already), I can not recommend one.
In fact, any script library that would be required for that (in contrast to
a little behavior-.htc) can safely be recommended against on the Web as it
will not degrade gracefully and so it will not be interoperable and the
outcome will not conform to accessibility guidelines.

PointedEars
--
var bugRiddenCrashPronePieceOfJunk = (
navigator.userAgent.indexOf('MSIE 5') != -1
&amp;&amp; navigator.userAgent.indexOf('Mac') != -1
)  // Plone, register_function.js:16
</POST>
<POST>
<POSTER> Thomas &#39;PointedEars&#39; Lahn &lt;PointedE...@web.de&gt; </POSTER>
<POSTDATE> 2007-10-01T16:37:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Thomas 'PointedEars' Lahn wrote:
&gt; Brian Adkins wrote:
&gt;&gt; I stated &quot;such that the markup is valid HTML&quot; and referred to &quot;optional&quot;
&gt;&gt; closing tags, not &quot;forbidden&quot; ones, yet you show &lt;br&gt; with an end tag which
&gt;&gt; is forbidden (as it is for &lt;img&gt;, &lt;meta&gt;, etc.) according to the spec
&gt;&gt; here:

&gt;&gt; http://www.w3.org/TR/html401/index/elements.html

&gt; Utter nonsense.  As you can observe in the specification, all HTML elements
&gt; with an empty content model, including the `br', `img' and `meta' elements,
&gt; have an *optional* end tag.  [...]
">

I can see now how and why you got the impression that the end tags would be
forbidden.  You will have to ignore that column of this non-normative index
where there is an &quot;F&quot; for &quot;Forbidden&quot; (as you will have to ignore many
non-normative examples in W3C specifications that propose bad practice).
There is exactly nothing in the DTD that forbids to use an/the optional end
tag for those elements (or any other element), nor is there anything in the
corresponding normative sections of the specification that says so.  For
example, the declaration for the HTML `br' element in HTML 4.01 Strict is as
follows:

| &lt;!ELEMENT BR - O EMPTY                 -- forced line break --&gt;
| &lt;!ATTLIST BR
|   %coreattrs;                          -- id, class, style, title --
|   &gt;

You will observe the `-' after the element type identifier `BR' that means
the start tag of the element is _not_ optional.  You will also observe the
following `O' that means the end tag of the element *is indeed* optional
(and not at all forbidden), and the `EMPTY' which says that the content
model of the element is empty, i.e. it must not have any content (e.g.
`&lt;br&gt;foo&lt;/br&gt;' is indeed forbidden).

HTH

PointedEars
--
&quot;Use any version of Microsoft Frontpage to create your site. (This won't
prevent people from viewing your source, but no one will want to steal it.)&quot;
-- from &lt; http://www.vortex-webdesign.com/help/hidesource.htm &gt;
</POST>
<POST>
<POSTER> John G Harris &lt;j...@nospam.demon.co.uk&gt; </POSTER>
<POSTDATE> 2007-10-02T15:45:00 </POSTDATE>
On Mon, 1 Oct 2007 at 22:37:58, in comp.lang.javascript, Thomas

<QUOTE PREVIOUSPOST="
'PointedEars' Lahn wrote:
&gt;Thomas 'PointedEars' Lahn wrote:
&gt;&gt; Brian Adkins wrote:
&gt;&gt;&gt; I stated &quot;such that the markup is valid HTML&quot; and referred to &quot;optional&quot;
&gt;&gt;&gt; closing tags, not &quot;forbidden&quot; ones, yet you show &lt;br&gt; with an end tag which
&gt;&gt;&gt; is forbidden (as it is for &lt;img&gt;, &lt;meta&gt;, etc.) according to the spec
&gt;&gt;&gt; here:

&gt;&gt;&gt; http://www.w3.org/TR/html401/index/elements.html

&gt;&gt; Utter nonsense.  As you can observe in the specification, all HTML elements
&gt;&gt; with an empty content model, including the `br', `img' and `meta' elements,
&gt;&gt; have an *optional* end tag.  [...]

&gt;I can see now how and why you got the impression that the end tags would be
&gt;forbidden.  You will have to ignore that column of this non-normative index
&gt;where there is an &quot;F&quot; for &quot;Forbidden&quot; (as you will have to ignore many
&gt;non-normative examples in W3C specifications that propose bad practice).
&gt;There is exactly nothing in the DTD that forbids to use an/the optional end
&gt;tag for those elements (or any other element), nor is there anything in the
&gt;corresponding normative sections of the specification that says so.  For
&gt;example, the declaration for the HTML `br' element in HTML 4.01 Strict is as
&gt;follows:

&gt;| &lt;!ELEMENT BR - O EMPTY                 -- forced line break --&gt;
&gt;| &lt;!ATTLIST BR
&gt;|   %coreattrs;                          -- id, class, style, title --
&gt;|   &gt;

&gt;You will observe the `-' after the element type identifier `BR' that means
&gt;the start tag of the element is _not_ optional.  You will also observe the
&gt;following `O' that means the end tag of the element *is indeed* optional
&gt;(and not at all forbidden), and the `EMPTY' which says that the content
&gt;model of the element is empty, i.e. it must not have any content (e.g.
&gt;`&lt;br&gt;foo&lt;/br&gt;' is indeed forbidden).
">

I'm afraid you haven't consulted section 3.3.3 of the HTML 4.01
standard. This says that :

- -        means the end tag is compulsory;
- O        means the end tag is optional;
- O EMPTY  means the end tag is forbidden.

(Note the DTD language uses two bits to index three states).

One possibility is that section 3.3.3 is normative (i.e you are required
to obey it). On the other hand it might be non-normative (i.e it's a
serving suggestion), but then it's an accurate translation of a
normative part of the SGML standard. Either way, you'd better believe
it.

John
--
John Harris
</POST>
<POST>
<POSTER> Bart Van der Donck &lt;b...@nijlen.com&gt; </POSTER>
<POSTDATE> 2007-10-10T07:07:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Thomas 'PointedEars' Lahn wrote:
&gt; Whether or not it [MSIE] still has a 90% market share or not (142%
&gt; of all Web statistics are flawed) is irrelevant
">

As with all statistics, they are not irrelevant on condition that the
measuring methods are acceptable.

Statistically every person has one breast.

--
Bart
</POST>
<POST>
<POSTER> Randy Webb &lt;HikksNotAtH...@aol.com&gt; </POSTER>
<POSTDATE> 2007-10-10T10:00:00 </POSTDATE>
Bart Van der Donck said the following on 10/10/2007 7:07 AM:

<QUOTE PREVIOUSPOST="
&gt; Thomas 'PointedEars' Lahn wrote:

&gt;&gt; Whether or not it [MSIE] still has a 90% market share or not (142%
&gt;&gt; of all Web statistics are flawed) is irrelevant

&gt; As with all statistics, they are not irrelevant on condition that the
&gt; measuring methods are acceptable.

&gt; Statistically every person has one breast.
">

The only other condition is that you understand that exactly and
precisely ~92.3847201% of Web Statistics are made up on the spot.

I need you to email me about the FAQ Postings. I have some questions and
last time I tried to email you it sent it back to me undeliverable.

--
Randy
Chance Favors The Prepared Mind
comp.lang.javascript FAQ - http://jibbering.com/faq/index.html
Javascript Best Practices - http://www.JavascriptToolbox.com/bestpractices/
</POST>
<POST>
<POSTER> &quot;Richard Cornford&quot; &lt;Rich...@litotes.demon.co.uk&gt; </POSTER>
<POSTDATE> 2007-10-13T22:01:00 </POSTDATE>
On Oct 1, 5:07 pm, Brian Adkins  wrote:

<QUOTE PREVIOUSPOST="
&gt; On Sep 30, 2:31 pm, Richard Cornford  wrote:
&gt;&gt; Brian Adkins wrote:
&gt;&gt;&gt; On Sep 29, 10:12 pm, Peter Michaux wrote:
&gt;&gt;&gt;&gt; On Sep 29, 6:35 pm, Randy Webb wrote:
&gt;&gt;&gt; I think I figured the 'text/html' content type was
&gt;&gt;&gt; simply to placate IE and that the XHTML capable browsers
&gt;&gt;&gt; would obey the doctype.

&gt;&gt; Which means that you were also not aware that there is a
&gt;&gt; distinction between HTML DOMs and XHTML DOMs.

&gt; Correct.

&gt;&gt;&gt; I think I'll switch to HTML 4.01 Strict and
&gt;&gt;&gt; continue to code in an XHTML style. At least I feel better
&gt;&gt;&gt; informed now.

&gt;&gt; While you are judging the 'significance' of what you find
&gt;&gt; consider the consequence of scripting such a document.

&gt; Just to clarify. What I meant by 'coding in an XHTML style' is
&gt; things like using lowercase attribute names with quotations,
&gt; using closing tags even if they're optional, etc. such that
&gt; the markup is valid HTML resulting in an HTML DOM.
">

Self imposed discipline. That is usually a good idea in the absence of
externally imposed discipline (and perhaps regardless of it).

<QUOTE PREVIOUSPOST="
&gt;&gt; The depth, and pervasive nature of, that endemic ignorance is
&gt;&gt; best illustrated by the current set of 'popular' javascript
&gt;&gt; libraries. Where people who don't know any better are importing
&gt;&gt; the ignorance of others into their own projects.

&gt; Could it be that people are simply doing their best to try and
&gt; find a library that is the lesser of evils to avoid the
&gt; disadvantages of writing everything themselves?
">

What are the &quot;disadvantages&quot; of writing everything yourself? Whatever
they may be on the plus side if you write something yourself you will
(or should) understand it, and there is a great deal to be said for
understanding the scripts that you use.

There a commonly asserted pre-supposition that the only alternatives
available are facilitating code re-use with the creation of large
general purpose libraries or to re-write everything from scratch each
time you do anything new. That polarized perception should be self
evidently nonsense to anyone who has copied an existing function form
one piece of exiting code to a new one, which will be pretty much
everyone who has got past pure copy-n-paste scripting.

Most of the bias in favour of large scale libraries comes with people
approaching javascript form other programming languages where having
large reservoirs of pre-created code always available to the programmer
makes perfect sense. Indeed so much sense that it becomes difficult to
see how that may not be true for all programming tasks. Which even
extends to the point where, when asked for justifications for using
large general purpose libraries some will not even consider answering
the question as a worthwhile exercise, even though articulating the
justifications would help to make it clear why the normal practice in
other programming environments does not necessarily extend well to
javascript.

There is not much thought given to the issues that follow from
broadcasting all the source code to the user and compiling it each time
it is executed. It should be fairly obviously that if it was necessary
to transmit over the internet, and then compile, all of the source code
for all the standard Java libraries, plus anything application
specifies, each time you wanted to execute any Java program then that
would make Java non-viable. But still that is the inevitable end point
of creating ever more capable (and so ever larger) general purpose
javascript libraries.

There also appears to be a tendency with the authors of such libraries
to react to criticism of the download size by seeking out code
compression strategies. This is something Dojo is attempting, and where
DoJo illustrates the folly of the exercise. In the 0.9.0 version the
file for distribution is 'dojo.js', which is 'compressed' (and actively
decompressed after it loads). The same code is available in full and
commented as 'dojo.js.uncompressed.js'. If you consider that HTTP 1.1
UAs tend to support compressed HTTP transmission it is significant to
consider how javascript source files will compress when considering
download size. When I zip compress 'dojo.js' the result is 25,903 bytes,
while if I remove the comments from 'dojo.js.uncompressed.js' and
compress it the result comes out at 25,862 (fractionally smaller). That
means that the 'compression' technique used in Dojo actually hinders zip
compression and so potentially increases download size, while its need
to de-compress on the client (with javascript) means that the total time
before the result is available to the user is increased by the process.

In truth code re-use is facilitated by any rendering of the specific
more general, from actions as simple as replacing inline code with
parameterised function calls. Given a huge spectrum of possible code
re-use strategies, with the large scale, highly capable, interdependent,
monolithic, general purpose javascript library being no more than a
point at one end of the spectrum, it is probably unwise to fixate on
that one strategy as being the only sensible option without being able
to articulate some pretty robust justifications for that position.

One of the issues faced by the author of a general purpose library is
the need to be truly general. This is well illustrated with one of the
much discussed browser scripting problems; the acquisition of accurate
position and dimension information relating to displayed DOM elements. A
general algorithm would take an element as input and determine the page
relative coordinates of its upper left corner and its width and height,
in some sense, as this is a description of some sort of 'containing
box', which does not necessarily have to be any specific box (in the
sense that CSS talks of boxes) but must be the same box for all
elements, and presumably a useful box to know about.

In the simplest case a DOM element will have offseTop/Left/Width/Height
and an offsetParent, and its position is the sum of all the
offsetTop/Lefts for all its offsetParents and its width/height is just
its offsetWidth/Height. But that is for CSS 'block' elements (as opposed
to inline, list-item, run-in, compact, marker, table, inline-table,
table-row-group, table-header-group, table-footer-group, table-row,
table-column-group, table-column, table-cell and table-caption) with no
borders or padding on the element and any of its offset parents, where
none of the offset parents have scrolling overflow, on browsers that
provide those dimension properties, and quite a bit else besides.

The general algorithm has never been worked out, though it is a
possibility and there are at least a few individuals on the planet that
could work it out and implement it. The reason that none of them have is
that they know that the result would be big (2000 plus statements),
complex, and far too slow to be of any practical use.

This leaves the general purpose library with a problem. It should have
element position and location reporting facilities, but if they are to
be truly general they will inevitably be non-viable because of their
performance and seriously contribute to the library's download bulk.

The best the general purpose library can be is proved a faculty that is
'good enough' for some set of common cases; a compromise. Which then
means that it will insufficient for less common cases (leaving anyone
using the library with no choice but add their own code for those tasks)
and at the same time the code is over the top for simplest cases,
risking sub-optimal performance for no good reason.

A less browser related example might be a 'safe' hash table
implementation. A very capable implementation may reproduce, say, all of
the Java HashTable class in javascript, with all of its methods and the
ability to have multiple live Iterators/Enumerators, while the simplest
may just facilitate the storing and retrieval of values using arbitrary
string keys. If a general purpose library is going to include such a
thing then the odds are it will tend toward the more capable end of the
range of possibilities, while the individual using it may only need the
minimum (making the runtime overheads of supporting live Enumerators
actively undesirable).

A third example of how the difference between the general and the
specific impacts on the general purpose library is the question of
framesets, and where any particular code is to be located in any
possible frame structure. You will often code testing - constructor -
properties against built-in constructor functions, or using -
instanceof - with the same subjects. That is all fine if you are working
with a single global object, but as soon as anyone is attempting to pass
objects about in a frameset structure such texts are invalid. There is
also the question of creating new DOM elements, where using the -
createElement - method of the wrong - document - object will be
disastrous in at lest some common browsers (including IE). So your
general purpose library has two choices; either assume a single global
object, and be insufficient for contexts where framesets are employed,
or do all the extra work to keep track of multiple frame contexts and so
be over the top whenever it is used in a single page site.

One of the characteristics of browser scripting is that it has become a
very diverse activity with many contexts of use; Intranet
sites/applications, web applications, e-commerce, promotional web sites,
public information services, entertainment, and so on. Some design
criteria for any one context do not necessarily even come into the
picture in some other contexts. And the starting point for design
decision making should be the purpose of the system being planned,
without any arbitrary a priori restrictions. And this is itself an issue
with general purpose libraries. Dojo, for example, only works (more or
less) with a few versions of half a dozen browsers (and will really fall
apart if exposed to anything else). That is too few for a ...
read more »
</POST>
<POST>
<POSTER> Peter Michaux &lt;petermich...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-10-14T02:03:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Richard Cornford wrote:
&gt; On Oct 1, 5:07 pm, Brian Adkins  wrote:

&gt; &gt; Could it be that people are simply doing their best to try and
&gt; &gt; find a library that is the lesser of evils to avoid the
&gt; &gt; disadvantages of writing everything themselves?

&gt; What are the &quot;disadvantages&quot; of writing everything yourself?
">

Not accounting for certain browser bugs/incompatibilities due to not
having a long enough history working with browsers to know about
particular bugs. Testing would show the bugs but testing in currently
rare browsers (eg. IE4, Sunrise, Lobo) may not be considered a wise
cost by the business. Using a prepackaged library that already works
in all cases would be much cheaper and more attractive to a project
manager even with a certain amount of increased download time. Project
timelines and idealism clash on occasion.

&lt;snip&gt;

<QUOTE PREVIOUSPOST="
&gt; There is not much thought given to the issues that follow from
&gt; broadcasting all the source code to the user and compiling it each time
&gt; it is executed. It should be fairly obviously that if it was necessary
&gt; to transmit over the internet, and then compile, all of the source code
&gt; for all the standard Java libraries, plus anything application
&gt; specifies, each time you wanted to execute any Java program then that
&gt; would make Java non-viable. But still that is the inevitable end point
&gt; of creating ever more capable (and so ever larger) general purpose
&gt; javascript libraries.
">

That may be true of a library like Prototype that is distributed as a
single file. Libraries like Dojo, YUI are distributed in multiple
files so even as the library gains capabilities it doesn't mean the
whole library has to be downloaded for each page.

It seems granularity of a library's distributed source code is a core
source of contention. Should a library be distributed as one file like
Prototype and jQuery or distributed as many files like YUI to be
combined as needed by a developer working on a particular page? If
multiple files how small should each file be. If multiple files, how
should they be combined for a particular page?

&lt;snip&gt;

<QUOTE PREVIOUSPOST="
&gt; This leaves the general purpose library with a problem. It should have
&gt; element position and location reporting facilities, but if they are to
&gt; be truly general they will inevitably be non-viable because of their
&gt; performance and seriously contribute to the library's download bulk.

&gt; The best the general purpose library can be is proved a faculty that is
&gt; 'good enough' for some set of common cases; a compromise. Which then
&gt; means that it will insufficient for less common cases (leaving anyone
&gt; using the library with no choice but add their own code for those tasks)
&gt; and at the same time the code is over the top for simplest cases,
&gt; risking sub-optimal performance for no good reason.
">

I think there is another way to look at what the library is providing
to the user. In the terms you use below, the library is providing an
interface and a base implementation of that interface. In the simple
cases where it is excessively complex, I can see that some developers
would just say &quot;we will never agree how simple the simplest
implementation of this interface should be.&quot; It may make sense to some
people that the simplest interface should at least work in the popular
80% of the browsers and having a simpler version for particular
browsers is just more code to maintain. Although performance and
download times are important it is also necessary to retain a small
code base and so a medium complexity implementation of the interface
as the base implementation may be better to some people than having
many simpler ones kicking around the hard drive.

So the library provides a medium complexity base implementation and
when it is insufficient for a less common case the developer writes
code to handle the less common case. This is very similar/identical to
what you are suggesting below.

&lt;snip&gt;

<QUOTE PREVIOUSPOST="
&gt; A third example of how the difference between the general and the
&gt; specific impacts on the general purpose library is the question of
&gt; framesets, and where any particular code is to be located in any
&gt; possible frame structure. You will often code testing - constructor -
&gt; properties against built-in constructor functions, or using -
&gt; instanceof - with the same subjects. That is all fine if you are working
&gt; with a single global object, but as soon as anyone is attempting to pass
&gt; objects about in a frameset structure such texts are invalid. There is
&gt; also the question of creating new DOM elements, where using the -
&gt; createElement - method of the wrong - document - object will be
&gt; disastrous in at lest some common browsers (including IE). So your
&gt; general purpose library has two choices; either assume a single global
&gt; object, and be insufficient for contexts where framesets are employed,
&gt; or do all the extra work to keep track of multiple frame contexts and so
&gt; be over the top whenever it is used in a single page site.
">

Two implementation of the same library interface. It is not a mistake
to have either or both versions and, at a larger granularity, is
consistent with your ideas below about multiple implementations of a
common interface. Suppose there are two popular libraries and one is
for the single global object and the other is for framesets. The
mistake is that both groups of developers will hype their library as
the one true implementation and create a religious war. And then there
will be backlash against the idea of libraries because of the hype.

&lt;snip&gt;

<QUOTE PREVIOUSPOST="
&gt; So what is wanted is a code re-use strategy (as we will all agree that
&gt; writing everything form scratch for each project is insane) that
&gt; maximises the proportion of code being re-used, produces an easily
&gt; maintainable and reliable end result and is sufficiently flexible to
&gt; produce appropriate code of any given application context without
&gt; pre-imposing arbitrary restrictions on the design process or being over
&gt; the top in the less complex contexts.
">

This would be ideal.

<QUOTE PREVIOUSPOST="
&gt; Inevitably there is some disagreement as to how best to achieve this
&gt; outcome, but it is fairly obvious that larger-scale general purpose
&gt; libraries will not satisfy those considerations (with their overriding
&gt; emphasis on code re-use at the cost of seemingly all else).
">

When you write &quot;larger-scale&quot; what do you mean? Do you mean
distributed in a single file or a low number of multiple files? Or do
you mean just many lines of code?

<QUOTE PREVIOUSPOST="
&gt; My preferred strategy is to build code from a large collection of
&gt; relatively small interchangeable modules designed around interface
&gt; definitions, where any single interface may have numerous
&gt; implementations. The resulting architectures start out with a lowest
&gt; level that is a layer of modules that abstract out the differences
&gt; between browsers by handling them internally. Above that are more layers
&gt; of modules that depend upon the interfaces provided by the previous
&gt; layer and expose their own interfaces for more complex and task specific
&gt; actions, and above that some number of similar layers ending in the
&gt; application specific control logic code that must be unique to each
&gt; specific action.
">

I think this is a great strategy overall. It formalizes the idea of &quot;a
sufficient implementation.&quot;

<QUOTE PREVIOUSPOST="
&gt; The lowest layer includes only items form the collection of interface
&gt; implementations that are employed in the context, sufficient for the
&gt; context and no more, and usually very well tested.
">

Why adhere so strictly to this &quot;and no more&quot; requirement? It is ok
performance-wise or more profitable overall (development dollars vs
net income) in many situations to send 5-10% unused code to the
browser.

<QUOTE PREVIOUSPOST="
&gt; Given a particular
&gt; task, say the reporting of view port dimensions and scroll values, a
&gt; single interface is used, but any number of objects may exist to
&gt; implement that interface. So while a cross-browser version may attempt
&gt; to provide that information wherever it is available, in a context where
&gt; only a limited set of known browsers are to be used a much simpler
&gt; version exists to be used in its place. While any code that employs the
&gt; interface does not need to care about any more than getting a reference
&gt; to an object that implements the interface, and so does not care about
&gt; the specifics of how that is done in the context.

&gt; This strategy allows issues like the unreasonable complexity of the
&gt; truly general element position reporting algorithm to be avoided. In any
&gt; real context it is possible to know enough about which positioning
&gt; information is required and why it is required to sidestep most of
&gt; complexity of the general problem. If no elements of relevance are to
&gt; have scrollable contents, or borders, or be anything but block elements
&gt; the task goes from the complex back to the quick and simple, and indeed
&gt; enough can be known about the context that many optimisations can be
&gt; implemented inside the object providing the element position reporting
&gt; interface. It may be the case that a theoretically huge number of such
&gt; implementations would be necessary to accommodate all the permutations
&gt; but in practice if you start by only implementing the ones that are
&gt; needed when they become needed you end up implementing the most
&gt; recurrent requirements first (and so creating the most re-useable
&gt; objects) and may never actually encounter a real world situation where
&gt; the more involved position reporting problems need to be addressed.

&gt; Consider what happens when re-design results in maintenance issues. For
&gt; the positioning problem; suppose someone re-designs the presentation and
&gt; ends up adding elements with scrolling overflow where they had not
&gt; previously existed. The object implementing the position reporting
&gt; interface can no longer cope as it was never designed to do so. But
&gt; either the collection of objects implementing that interface already
&gt; contains one that can cope, or a new implementation can be created and
&gt; added to that collection. The problem is
">

...
read more »
</POST>
<POST>
<POSTER> Thomas &#39;PointedEars&#39; Lahn &lt;PointedE...@web.de&gt; </POSTER>
<POSTDATE> 2007-10-14T05:11:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Peter Michaux wrote:
&gt; Richard Cornford wrote:
&gt;&gt; There is not much thought given to the issues that follow from
&gt;&gt; broadcasting all the source code to the user and compiling it each time
&gt;&gt; it is executed. It should be fairly obviously that if it was necessary
&gt;&gt; to transmit over the internet, and then compile, all of the source code
&gt;&gt; for all the standard Java libraries, plus anything application
&gt;&gt; specifies, each time you wanted to execute any Java program then that
&gt;&gt; would make Java non-viable. But still that is the inevitable end point
&gt;&gt; of creating ever more capable (and so ever larger) general purpose
&gt;&gt; javascript libraries.

&gt; That may be true of a library like Prototype that is distributed as a
&gt; single file. Libraries like Dojo, YUI are distributed in multiple
&gt; files so even as the library gains capabilities it doesn't mean the
&gt; whole library has to be downloaded for each page.

&gt; It seems granularity of a library's distributed source code is a core
&gt; source of contention. Should a library be distributed as one file like
&gt; Prototype and jQuery or distributed as many files like YUI to be
&gt; combined as needed by a developer working on a particular page? If
&gt; multiple files how small should each file be. If multiple files, how
&gt; should they be combined for a particular page?
">

I would go even farther.  A client-side script library should be like a
real-life library.  Not only that you can lend only the books about the
categories you are interested in -- try to use only one script resource for
each aspect of client-side scripting -- but also you can lend only the books
of the category that you need as references for your essay: every script
resource should be written with the possibility in mind that the user of the
library can take a single method from it and include only the methods that
depends on to make it work.

These goals can collide with each other, of course: you may want to
implement a general testing method in one resource and use it in all other
resources.  Sometimes then it can be better to copy that testing method to
the other resources so that another dependency is avoided (which introduces
the issue of version management of that method, though).

Of course, I'd rather have a built-in `import' statement which makes the
script engine resolve the dependencies without having to download the entire
script resource where a method depended on is declared.  But I doubt this
would be feasible on the Web.

PointedEars
--
&quot;Use any version of Microsoft Frontpage to create your site. (This won't
prevent people from viewing your source, but no one will want to steal it.)&quot;
-- from &lt; http://www.vortex-webdesign.com/help/hidesource.htm &gt;
</POST>
<POST>
<POSTER> Thomas &#39;PointedEars&#39; Lahn &lt;PointedE...@web.de&gt; </POSTER>
<POSTDATE> 2007-10-14T05:16:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Thomas 'PointedEars' Lahn wrote:
&gt; Of course, I'd rather have a built-in `import' statement which makes the
&gt; script engine resolve the dependencies without having to download the entire
&gt; script resource where a method depended on is declared.  But I doubt this
&gt; would be feasible on the Web.
">

Hmmm, in combination with server-side scripting this might be feasible.  So
that if the served client-side script resource would be generated by a
server-side script which includes all the dependent code.  It seems worth to
investigate that.

PointedEars
</POST>
<POST>
<POSTER> &quot;Richard Cornford&quot; &lt;Rich...@litotes.demon.co.uk&gt; </POSTER>
<POSTDATE> 2007-10-14T18:53:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Peter Michaux wrote:
&gt; Richard Cornford wrote:
&gt;&gt; On Oct 1, 5:07 pm, Brian Adkins  wrote:

&gt;&gt;&gt; Could it be that people are simply doing their best to try
&gt;&gt;&gt; and find a library that is the lesser of evils to avoid the
&gt;&gt;&gt; disadvantages of writing everything themselves?

&gt;&gt; What are the &quot;disadvantages&quot; of writing everything yourself?

&gt; Not accounting for certain browser bugs/incompatibilities due
&gt; to not having a long enough history working with browsers to
&gt; know about particular bugs. Testing would show the bugs but
&gt; testing in currently rare browsers (eg. IE4, Sunrise, Lobo)
&gt; may not be considered a wise cost by the business. Using a
&gt; prepackaged library that already works in all cases would be
&gt; much cheaper and more attractive to a project manager even
&gt; with a certain amount of increased download time. Project
&gt; timelines and idealism clash on occasion.
">

That pre-supposes that the 'prepackaged library' was written by someone
familiar with this type of historical browser behaviour (whether is it
be a bug or not). But in practice this is precisely the problem being
discussed in the &quot;when is a function not a function&quot; thread. The authors
of dojo and jquery have themselves not had the experience to know that
it is normal for collections to report 'function' from a typeof
operation. So when they encounter a browser that is doing no more or
less than has been done by many browsers in the past they find that
their code cannot cope, and start reporting that as a bug. Obviously
these individuals are not aware that there code has these issues
following from their inexperience, but now your project manager cannot
solve his problem by just using a library unless he has someone who
knows the issues themselves and so can point out which libraries
properly handle them and which doe not. At which point the original &quot;not
having a long enough history working with browsers&quot; has stopped
applying.

&lt;snip&gt;

<QUOTE PREVIOUSPOST="
- Hide quoted text - - Show quoted text -
">

<QUOTE PREVIOUSPOST="
&gt;&gt; There is not much thought given to the issues that follow
&gt;&gt; from broadcasting all the source code to the user and
&gt;&gt; compiling it each time it is executed. It should be fairly
&gt;&gt; obviously that if it was necessary to transmit over the
&gt;&gt; internet, and then compile, all of the source code for all
&gt;&gt; the standard Java libraries, plus anything application
&gt;&gt; specifies, each time you wanted to execute any Java program
&gt;&gt; then that would make Java non-viable. But still that is the
&gt;&gt; inevitable end point of creating ever more capable (and so
&gt;&gt; ever larger) general purpose javascript libraries.

&gt; That may be true of a library like Prototype that is distributed
&gt; as a single file. Libraries like Dojo, YUI are distributed in
&gt; multiple files so even as the library gains capabilities it
&gt; doesn't mean the whole library has to be downloaded for each
&gt; page.
">

The extent to which that solves the problem depends on the sizes of the
chinks and how their dependencies work. The base part of dojo is 3500
odd line of code and is pretty much essential for anything else. It is
unlikely that that will tend to get any smaller with the passage of
time.

<QUOTE PREVIOUSPOST="
&gt; It seems granularity of a library's distributed source code
&gt; is a core source of contention. Should a library be distributed
&gt; as one file like Prototype and jQuery or distributed as many
&gt; files like YUI to be combined as needed by a developer working
&gt; on a particular page? If multiple files how small should each
&gt; file be. If multiple files, how should they be combined for a
&gt; particular page?
">

Generally javascript code should be sent to the browser in as few chunks
as possible. how code is handled before that is optional (and probably
best driven by the requirements of the development context).

&lt;snip&gt;

<QUOTE PREVIOUSPOST="
&gt;&gt; The best the general purpose library can be is proved a
&gt;&gt; faculty that is 'good enough' for some set of common
&gt;&gt; cases; a compromise. Which then means that it will
&gt;&gt; insufficient for less common cases (leaving anyone using
&gt;&gt; the library with no choice but add their own code for those
&gt;&gt; tasks) and at the same time the code is over the top for
&gt;&gt; simplest cases, risking sub-optimal performance for no
&gt;&gt; good reason.

&gt; I think there is another way to look at what the library is
&gt; providing to the user.
">

The user is the person sitting in front of a web browser interacting
with the end result. Users should not be confused with programmers as
programmers have much more responsibility for what they do.

<QUOTE PREVIOUSPOST="
&gt; In the terms you use below, the library is providing an
&gt; interface and a base implementation of that interface.
&gt; In the simple cases where it is excessively complex, I
&gt; can see that some developers would just say &quot;we will
&gt; never agree how simple the simplest implementation of
&gt; this interface should be.&quot; It may make sense to some
&gt; people that the simplest interface should at least work
&gt; in the popular 80% of the browsers and having a simpler
&gt; version for particular browsers is just more code to
&gt; maintain. Although performance and download times are
&gt; important it is also necessary to retain a small code
&gt; base and so a medium complexity implementation of the
&gt; interface as the base implementation may be better to
&gt; some people than having many simpler ones kicking around
&gt; the hard drive.
">

For the general problem of maximising code re-use it is not advantageous
to maintain a small code base (quite the opposite). For an individual
project that may be an advantage, but then you can maintain the
distinction between the modules that are in the application and those
that are not.

<QUOTE PREVIOUSPOST="
&gt; So the library provides a medium complexity base
&gt; implementation and when it is insufficient for a less
&gt; common case
">

And over the top for the more common cases.

<QUOTE PREVIOUSPOST="
&gt; the developer writes code to handle the less
&gt; common case.
">

But only if the developer has learnt how to do that.

<QUOTE PREVIOUSPOST="
&gt; This is very similar/identical to
&gt; what you are suggesting below.
">

Getting there, but it is still important that the interface design stage
takes into account the need to accommodate the whole range of possible
implementations of the interface.

&lt;snip&gt;

<QUOTE PREVIOUSPOST="
&gt;&gt; So what is wanted is a code re-use strategy (as we will all
&gt;&gt; agree that writing everything form scratch for each project
&gt;&gt; is insane) that maximises the proportion of code being re-used,
&gt;&gt; produces an easily maintainable and reliable end result and
&gt;&gt; is sufficiently flexible to produce appropriate code of any
&gt;&gt; given application context without pre-imposing arbitrary
&gt;&gt; restrictions on the design process or being over the top in
&gt;&gt; the less complex contexts.

&gt; This would be ideal.
">

Ideal, and so the question is to what extent it can be achieved in
reality.

<QUOTE PREVIOUSPOST="
&gt;&gt; Inevitably there is some disagreement as to how best to achieve
&gt;&gt; this outcome, but it is fairly obvious that larger-scale
&gt;&gt; general purpose libraries will not satisfy those considerations
&gt;&gt; (with their overriding emphasis on code re-use at the cost of
&gt;&gt; seemingly all else).

&gt; When you write &quot;larger-scale&quot; what do you mean? Do you mean
&gt; distributed in a single file or a low number of multiple files?
&gt; Or do you mean just many lines of code?
">

Files and code are largely irrelevant. Mostly I am getting at
interdependence and the number and diversity of facilities provided in
interdependent units. Physical size does follow when many facilities are
strongly interdependent, but that is just a consequence.

<QUOTE PREVIOUSPOST="
&gt;&gt; My preferred strategy is to build code from a large collection
&gt;&gt; of relatively small interchangeable modules designed around
&gt;&gt; interface definitions, where any single interface may have
&gt;&gt; numerous implementations. The resulting architectures start
&gt;&gt; out with a lowest level that is a layer of modules that
&gt;&gt; abstract out the differences between browsers by handling them
&gt;&gt; internally. Above that are more layers of modules that depend
&gt;&gt; upon the interfaces provided by the previous layer and expose
&gt;&gt; their own interfaces for more complex and task specific
&gt;&gt; actions, and above that some number of similar layers ending
&gt;&gt; in the application specific control logic code that must be
&gt;&gt; unique to each specific action.

&gt; I think this is a great strategy overall. It formalizes the
&gt; idea of &quot;a sufficient implementation.&quot;
">

Many 'sufficient implementations', where each is 'sufficient' for
differing requirements.

<QUOTE PREVIOUSPOST="
&gt;&gt; The lowest layer includes only items form the collection of
&gt;&gt; interface implementations that are employed in the context,
&gt;&gt; sufficient for the context and no more, and usually very
&gt;&gt; well tested.

&gt; Why adhere so strictly to this &quot;and no more&quot; requirement?
">

Because that criteria provides constant direction. Abandon it and there
is no telling how far things may end up drifting in the opposite
direction.

<QUOTE PREVIOUSPOST="
&gt; It is ok performance-wise or more profitable overall
&gt; (development dollars vs net income) in many situations
&gt; to send 5-10% unused code to the browser.
">

Maybe 5-10% but without direction there is nothing to make you stop at
(or near) 10%, and there a plenty of real world cases where an imported
library is being so slightly used that almost all of the downloaded code
is not being used.

&lt;snip&gt;

<QUOTE PREVIOUSPOST="
- Hide quoted text - - Show quoted text -
">

<QUOTE PREVIOUSPOST="
&gt;&gt; Consider what happens when re-design results in maintenance
&gt;&gt; issues. For the positioning problem; suppose someone
&gt;&gt; re-designs the presentation and ends up adding elements
&gt;&gt; with scrolling overflow where they had not previously
&gt;&gt; existed. The object implementing the position reporting
&gt;&gt; interface can no longer cope as it was never designed to
&gt;&gt; do so. But either the collection of objects implementing
&gt;&gt; that interface already contains one that can cope, or a
&gt;&gt; new implementation can be created and added to that
&gt;&gt; collection. The problem is solved by swapping one object
&gt;&gt; for another that implements the same interface (but takes
&gt;&gt; more into account internally) and all of the rest of the
&gt;&gt; code is unaffected by the change.

&gt; This seems to be an argument against having the absolute
&gt; simplest implementations in the collections of
">

...
read more »
</POST>
</TEXT>
</BODY>
</DOC>
