<DOC>
<DOCID> eng-NG-31-126424-8214124 </DOCID>
<DOCTYPE SOURCE="usenet"> USENET TEXT </DOCTYPE>
<DATETIME> 2007-07-24T10:02:00 </DATETIME>
<BODY>
<HEADLINE>
why detest rspec? (was: community poll about testing and specs)
</HEADLINE>
<TEXT>
<POST>
<POSTER> &quot;David Chelimsky&quot; &lt;dchelim...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-24T10:02:00 </POSTDATE>
On 7/24/07, Nathaniel Brown &lt;n ... @inimit.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; I may be biased, but I would really like and have been looking for an
&gt; alternative BDD choice besides RSpec.

&gt; What others are there? I have seen a couple by the likes of Ryan, even
&gt; Rick. Are any better? What about a conrast of testing libraries
&gt; highlighting the benefits and opinions of each?

&gt; I really want to get into testing beyond Test/Unit, but I detest the
&gt; RSpec library out of spite :)
">

At the risk of shooting myself in the foot, I'm really curious to know
why you detest RSpec.
</POST>
<POST>
<POSTER> &quot;Jeremy McAnally&quot; &lt;jeremymcana...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-24T12:14:00 </POSTDATE>
I didn't like it for a while because the syntax kept changing.  This
made me rewrite the BDD section of my book twice (three times when I
rewrite to match 1.0).

But now that I've been using the new syntax more, I like it. :P

--Jeremy

On 7/24/07, David Chelimsky &lt;dchelim ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On 7/24/07, Nathaniel Brown &lt;n ... @inimit.com&gt; wrote:

&gt; &gt; I may be biased, but I would really like and have been looking for an
&gt; &gt; alternative BDD choice besides RSpec.

&gt; &gt; What others are there? I have seen a couple by the likes of Ryan, even
&gt; &gt; Rick. Are any better? What about a conrast of testing libraries
&gt; &gt; highlighting the benefits and opinions of each?

&gt; &gt; I really want to get into testing beyond Test/Unit, but I detest the
&gt; &gt; RSpec library out of spite :)

&gt; At the risk of shooting myself in the foot, I'm really curious to know
&gt; why you detest RSpec.
">

--
http://www.jeremymcanally.com/

My free Ruby e-book:
http://www.humblelittlerubybook.com/book/

My blogs:
http://www.mrneighborly.com/
http://www.rubyinpractice.com/
</POST>
<POST>
<POSTER> Roderick van Domburg &lt;rails-mailing-l...@andreas-s.net&gt; </POSTER>
<POSTDATE> 2007-07-25T04:45:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
David Chelimsky wrote:
&gt;&gt; I may be biased, but I would really like and have been looking for an
&gt;&gt; alternative BDD choice besides RSpec.

&gt;&gt; What others are there? I have seen a couple by the likes of Ryan, even
&gt;&gt; Rick. Are any better? What about a conrast of testing libraries
&gt;&gt; highlighting the benefits and opinions of each?

&gt;&gt; I really want to get into testing beyond Test/Unit, but I detest the
&gt;&gt; RSpec library out of spite :)

&gt; At the risk of shooting myself in the foot, I'm really curious to know
&gt; why you detest RSpec.
">

I'd like to chime in. I would not at all say that I detest RSpec in any
way, but I do find it to be rather besides the point. It just never
caught on to me, you know?

When I first looked at RSpec, I thought it was rather cryptic. This
boils down to a matter of taste, I know, but all those &quot;recipes&quot; (I
don't know the term) really aren't all that legible to me.
&quot;bowling.score.should == 0&quot;? &quot;should&quot; is equal to 0? Is it any more
expressive than &quot;assert 0, bowling.score&quot;? Again, it's personal
preference, but this is one DSL that I don't care for. So I dismissed it
in favor of the Test::Units I have come to cherish.

Then I attended a lecture by Aslak Hellesøy. I mean, with so many people
around raving about RSpec, I must be missing the point right? But I was
let down: Alsak demonstrated it to be a wrapper DSL around Test::Unit
for &quot;people who find it hard to come to gripes with TDD&quot;. So it's a sort
of workaround? I was disappointed by that statement of his.

He says Test::Unit is tightly coupled to the actual code and that that's
a bad thing. I say I like that coupling, because it keeps a sharp edge
on the test-before-you-write principle: if you're mucking around code or
tests that worked before, you'll find yourself pressed to advocate that
change and express it in an additional or revised test.

Moving from personal preference into the field of computer science,
there is no argument that I know of favoring either in code coverage or
testing metrics. (Indeed, &quot;coupling&quot; and &quot;cohesion&quot; have so far only
referred to the functional components themselves, not their tests.) This
doesn't prove either Alsak or me wrong or right, but does iterate that
it's a matter of preference.

&quot;But,&quot; some might say, &quot;we're testing *behavior* here. That's different.
We can clean up methods, throw code around, but as long as the behavior
remains the same, then that's OK.&quot; I see it as the same discussion about
white box testing and black box testing, but with a twist.

As a black box, the bowling example on the RSpec home page seems to work
fine. As a white box, it's lacking in every respect because the
algorithm we assume to be present is, in fact, completely absent. I like
to test the algorithm, because if I don't prove the behavior of the
algorithm to be correct then I will need to verify every possible
outcome instead. That kind of verification isn't very efficient.

So the twist is this: this time around, we're mixing up black box
testing by dubbing it &quot;behavior&quot; and white box testing by performing
actual method calls. I've been searching for a rationale, but could only
find the one by Alsak that I was disappointed by before.

The way I see it, RSpec is just a matter of preference, and a bit of a
hype at that. Perhaps I'm misunderstanding, and if so, I'd love to see
the entire mantra clarified. But until then, I'm preferring Test::Unit
for its readability and code coupling, and saying nay to all those who
preach that RSpec is a level beyond Test::Unit.

Looking forward to your responses.

--
Roderick van Domburg
http://www.nedforce.nl
Perhaps I'm misunderstanding, and if so I'd certainly appreciate it if
--
Posted via http://www.ruby-forum.com/ .
</POST>
<POST>
<POSTER> &quot;Brian Hogan&quot; &lt;bpho...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-25T08:18:00 </POSTDATE>
@Roderick:
Wow. That mirrors my thoughts exactly. I'd love for someone to chime in and
counter this. Thanks for putting it so well.

On 7/25/07, Roderick van Domburg &lt;rails-mailing-l ... @andreas-s.net&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; David Chelimsky wrote:
&gt; &gt;&gt; I may be biased, but I would really like and have been looking for an
&gt; &gt;&gt; alternative BDD choice besides RSpec.

&gt; &gt;&gt; What others are there? I have seen a couple by the likes of Ryan, even
&gt; &gt;&gt; Rick. Are any better? What about a conrast of testing libraries
&gt; &gt;&gt; highlighting the benefits and opinions of each?

&gt; &gt;&gt; I really want to get into testing beyond Test/Unit, but I detest the
&gt; &gt;&gt; RSpec library out of spite :)

&gt; &gt; At the risk of shooting myself in the foot, I'm really curious to know
&gt; &gt; why you detest RSpec.

&gt; I'd like to chime in. I would not at all say that I detest RSpec in any
&gt; way, but I do find it to be rather besides the point. It just never
&gt; caught on to me, you know?

&gt; When I first looked at RSpec, I thought it was rather cryptic. This
&gt; boils down to a matter of taste, I know, but all those &quot;recipes&quot; (I
&gt; don't know the term) really aren't all that legible to me.
&gt; &quot;bowling.score.should == 0&quot;? &quot;should&quot; is equal to 0? Is it any more
&gt; expressive than &quot;assert 0, bowling.score&quot;? Again, it's personal
&gt; preference, but this is one DSL that I don't care for. So I dismissed it
&gt; in favor of the Test::Units I have come to cherish.

&gt; Then I attended a lecture by Aslak Hellesøy. I mean, with so many people
&gt; around raving about RSpec, I must be missing the point right? But I was
&gt; let down: Alsak demonstrated it to be a wrapper DSL around Test::Unit
&gt; for &quot;people who find it hard to come to gripes with TDD&quot;. So it's a sort
&gt; of workaround? I was disappointed by that statement of his.

&gt; He says Test::Unit is tightly coupled to the actual code and that that's
&gt; a bad thing. I say I like that coupling, because it keeps a sharp edge
&gt; on the test-before-you-write principle: if you're mucking around code or
&gt; tests that worked before, you'll find yourself pressed to advocate that
&gt; change and express it in an additional or revised test.

&gt; Moving from personal preference into the field of computer science,
&gt; there is no argument that I know of favoring either in code coverage or
&gt; testing metrics. (Indeed, &quot;coupling&quot; and &quot;cohesion&quot; have so far only
&gt; referred to the functional components themselves, not their tests.) This
&gt; doesn't prove either Alsak or me wrong or right, but does iterate that
&gt; it's a matter of preference.

&gt; &quot;But,&quot; some might say, &quot;we're testing *behavior* here. That's different.
&gt; We can clean up methods, throw code around, but as long as the behavior
&gt; remains the same, then that's OK.&quot; I see it as the same discussion about
&gt; white box testing and black box testing, but with a twist.

&gt; As a black box, the bowling example on the RSpec home page seems to work
&gt; fine. As a white box, it's lacking in every respect because the
&gt; algorithm we assume to be present is, in fact, completely absent. I like
&gt; to test the algorithm, because if I don't prove the behavior of the
&gt; algorithm to be correct then I will need to verify every possible
&gt; outcome instead. That kind of verification isn't very efficient.

&gt; So the twist is this: this time around, we're mixing up black box
&gt; testing by dubbing it &quot;behavior&quot; and white box testing by performing
&gt; actual method calls. I've been searching for a rationale, but could only
&gt; find the one by Alsak that I was disappointed by before.

&gt; The way I see it, RSpec is just a matter of preference, and a bit of a
&gt; hype at that. Perhaps I'm misunderstanding, and if so, I'd love to see
&gt; the entire mantra clarified. But until then, I'm preferring Test::Unit
&gt; for its readability and code coupling, and saying nay to all those who
&gt; preach that RSpec is a level beyond Test::Unit.

&gt; Looking forward to your responses.

&gt; --
&gt; Roderick van Domburg
&gt; http://www.nedforce.nl
&gt; Perhaps I'm misunderstanding, and if so I'd certainly appreciate it if
&gt; --
&gt; Posted via http://www.ruby-forum.com/ .
">
</POST>
<POST>
<POSTER> &quot;James Mead&quot; &lt;jamesmea...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-25T08:33:00 </POSTDATE>
Roderick: David Chelimsky might be a little miffed with your selective
quoting which makes it appear as if he doesn't like RSpec...

<QUOTE PREVIOUSPOST="
David Chelimsky wrote:
&gt;&gt; I may be biased, but I would really like and have been looking for an
&gt;&gt; alternative BDD choice besides RSpec.
">

This was not written by David, but was written in response to an email from
him. The only clue to this is the level of indentation of the quoting.
--
James.
http://blog.floehopper.org
</POST>
<POST>
<POSTER> Phlip &lt;phlip2...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-25T09:55:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&gt; Alsak demonstrated it to be a wrapper DSL around Test::Unit
&gt; for &quot;people who find it hard to come to gripes with TDD&quot;. So it's a sort
&gt; of workaround? I was disappointed by that statement of his.
">

I don't get it. What can you write in RSpec that you can't write,
nearly the same way, in Test::Unit?

<QUOTE PREVIOUSPOST="
&gt; He says Test::Unit is tightly coupled to the actual code and that that's
&gt; a bad thing.
">

Done right, either one tightly _coheres_ to the actual code.

(Define &quot;couple&quot; as &quot;A must change only because B changed&quot;, and define
&quot;cohere&quot; as &quot;A and B share legitimate reasons to change together&quot;.)

--
Phlip
http://www.oreilly.com/catalog/9780596510657/
&quot;Test Driven Ajax (on Rails)&quot;
assert_xpath, assert_javascript, &amp; assert_ajax
</POST>
<POST>
<POSTER> &quot;David Chelimsky&quot; &lt;dchelim...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-25T11:50:00 </POSTDATE>
On 7/25/07, Roderick van Domburg &lt;rails-mailing-l ... @andreas-s.net&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; David Chelimsky wrote:
&gt; &gt;&gt; I may be biased, but I would really like and have been looking for an
&gt; &gt;&gt; alternative BDD choice besides RSpec.

&gt; &gt;&gt; What others are there? I have seen a couple by the likes of Ryan, even
&gt; &gt;&gt; Rick. Are any better? What about a conrast of testing libraries
&gt; &gt;&gt; highlighting the benefits and opinions of each?

&gt; &gt;&gt; I really want to get into testing beyond Test/Unit, but I detest the
&gt; &gt;&gt; RSpec library out of spite :)

&gt; &gt; At the risk of shooting myself in the foot, I'm really curious to know
&gt; &gt; why you detest RSpec.

&gt; I'd like to chime in. I would not at all say that I detest RSpec in any
&gt; way, but I do find it to be rather besides the point. It just never
&gt; caught on to me, you know?

&gt; When I first looked at RSpec, I thought it was rather cryptic. This
&gt; boils down to a matter of taste, I know, but all those &quot;recipes&quot; (I
&gt; don't know the term) really aren't all that legible to me.
&gt; &quot;bowling.score.should == 0&quot;? &quot;should&quot; is equal to 0? Is it any more
&gt; expressive than &quot;assert 0, bowling.score&quot;? Again, it's personal
&gt; preference, but this is one DSL that I don't care for. So I dismissed it
&gt; in favor of the Test::Units I have come to cherish.

&gt; Then I attended a lecture by Aslak Hellesøy. I mean, with so many people
&gt; around raving about RSpec, I must be missing the point right? But I was
&gt; let down: Alsak demonstrated it to be a wrapper DSL around Test::Unit
&gt; for &quot;people who find it hard to come to gripes with TDD&quot;. So it's a sort
&gt; of workaround? I was disappointed by that statement of his.

&gt; He says Test::Unit is tightly coupled to the actual code and that that's
&gt; a bad thing. I say I like that coupling, because it keeps a sharp edge
&gt; on the test-before-you-write principle: if you're mucking around code or
&gt; tests that worked before, you'll find yourself pressed to advocate that
&gt; change and express it in an additional or revised test.

&gt; Moving from personal preference into the field of computer science,
&gt; there is no argument that I know of favoring either in code coverage or
&gt; testing metrics. (Indeed, &quot;coupling&quot; and &quot;cohesion&quot; have so far only
&gt; referred to the functional components themselves, not their tests.) This
&gt; doesn't prove either Alsak or me wrong or right, but does iterate that
&gt; it's a matter of preference.

&gt; &quot;But,&quot; some might say, &quot;we're testing *behavior* here. That's different.
&gt; We can clean up methods, throw code around, but as long as the behavior
&gt; remains the same, then that's OK.&quot; I see it as the same discussion about
&gt; white box testing and black box testing, but with a twist.

&gt; As a black box, the bowling example on the RSpec home page seems to work
&gt; fine. As a white box, it's lacking in every respect because the
&gt; algorithm we assume to be present is, in fact, completely absent. I like
&gt; to test the algorithm, because if I don't prove the behavior of the
&gt; algorithm to be correct then I will need to verify every possible
&gt; outcome instead. That kind of verification isn't very efficient.

&gt; So the twist is this: this time around, we're mixing up black box
&gt; testing by dubbing it &quot;behavior&quot; and white box testing by performing
&gt; actual method calls. I've been searching for a rationale, but could only
&gt; find the one by Alsak that I was disappointed by before.

&gt; The way I see it, RSpec is just a matter of preference, and a bit of a
&gt; hype at that. Perhaps I'm misunderstanding, and if so, I'd love to see
&gt; the entire mantra clarified. But until then, I'm preferring Test::Unit
&gt; for its readability and code coupling, and saying nay to all those who
&gt; preach that RSpec is a level beyond Test::Unit.
">

I'm sorry that you see this as preaching and mantras. I have no
intention of converting you. I like RSpec because it expresses the
things I want in a BDD framework. You don't have to like it.

BDD comes from TDD, which comes from XP, which includes Refactoring as
an integral part of the process. Refactoring is more expensive as your
tests are more tightly coupled to the code, so one goal of TDD is to
decouple the tests from the detail of the code (which is what changes
most often). One thing that aids in this decoupling is focusing on
behaviour instead of internal implementation. BDD champions this goal
by putting it front and center. RSpec supports this by trying to use
words like &quot;describe&quot; instead of &quot;TestCase&quot; and &quot;should&quot; instead of
&quot;assert.&quot;

It is clear from your arguments that a) your testing goals do not
align with those of RSpec and b) you've only read the cover (your
argument about the example on the Home Page). If you're seriously
interested in learning about RSpec and BDD, then you should try to
actually use it on a small project and see how it feels. If not, then
so be it. I still get to use it, so I am happy.

Cheers,
David

<QUOTE PREVIOUSPOST="
- Hide quoted text - - Show quoted text -
">

<QUOTE PREVIOUSPOST="
&gt; Looking forward to your responses.

&gt; --
&gt; Roderick van Domburg
&gt; http://www.nedforce.nl
&gt; Perhaps I'm misunderstanding, and if so I'd certainly appreciate it if
&gt; --
&gt; Posted via http://www.ruby-forum.com/ .
">
</POST>
<POST>
<POSTER> &quot;David Chelimsky&quot; &lt;dchelim...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-25T12:06:00 </POSTDATE>
On 7/25/07, James Mead &lt;jamesmea ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Roderick: David Chelimsky might be a little miffed with your selective
&gt; quoting which makes it appear as if he doesn't like RSpec...

&gt; David Chelimsky wrote:
&gt; &gt;&gt; I may be biased, but I would really like and have been looking for an
&gt; &gt;&gt; alternative BDD choice besides RSpec.

&gt; This was not written by David, but was written in response to an email from
&gt; him. The only clue to this is the level of indentation of the quoting.
">

Actually, this makes me laugh more than piss me off. But thanks for
sticking up for me :)

Cheers,
David

<QUOTE PREVIOUSPOST="
&gt; --
&gt; James.
&gt; http://blog.floehopper.org
">
</POST>
<POST>
<POSTER> &quot;Brian Hogan&quot; &lt;bpho...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-25T12:10:00 </POSTDATE>
@David:

Would you be kind enough to briefly explain what you perceive to be the
advantages to RSpec? I'm really hoping for a good comparison of the two, so
I can see if it's worth investigating further. (I am writing a book that
will include testing, and need more info). I've played with RSPec and
haven't really found anything I can't do with test:unit.... so that's why
I'm looking for more info. I'd really appreciate some input.  I suspect that
it's much like TDD... you have to do it before you really appreciate it.

On 7/25/07, David Chelimsky &lt;dchelim ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On 7/25/07, James Mead &lt;jamesmea ... @gmail.com&gt; wrote:
&gt; &gt; Roderick: David Chelimsky might be a little miffed with your selective
&gt; &gt; quoting which makes it appear as if he doesn't like RSpec...

&gt; &gt; David Chelimsky wrote:
&gt; &gt; &gt;&gt; I may be biased, but I would really like and have been looking for an
&gt; &gt; &gt;&gt; alternative BDD choice besides RSpec.

&gt; &gt; This was not written by David, but was written in response to an email
&gt; from
&gt; &gt; him. The only clue to this is the level of indentation of the quoting.

&gt; Actually, this makes me laugh more than piss me off. But thanks for
&gt; sticking up for me :)

&gt; Cheers,
&gt; David

&gt; &gt; --
&gt; &gt; James.
&gt; &gt; http://blog.floehopper.org
">
</POST>
<POST>
<POSTER> &quot;David Chelimsky&quot; &lt;dchelim...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-25T12:32:00 </POSTDATE>
On 7/25/07, Brian Hogan &lt;bpho ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; @David:

&gt; Would you be kind enough to briefly explain what you perceive to be the
&gt; advantages to RSpec? I'm really hoping for a good comparison of the two, so
&gt; I can see if it's worth investigating further. (I am writing a book that
&gt; will include testing, and need more info). I've played with RSPec and
&gt; haven't really found anything I can't do with test:unit.... so that's why
&gt; I'm looking for more info. I'd really appreciate some input.  I suspect that
&gt; it's much like TDD... you have to do it before you really appreciate it.
">

I don't know that there is anything that you can't do with test/unit -
just that rspec comes w/ a lot of this stuff out of the box. And I
think it is something experiential. Many people who really enjoy using
RSpec say they were skeptical at first, but have grown to love it.

Here are some specific comparisons:

- dsl for expressing/organizing examples using strings

describe Thing do
it &quot;should do cool stuff&quot; do
...
end
end

vs

class ThingTest &lt;&lt; Test::Unit::TestCase
def test_should_do_cool_stuff
...
end
end

I find that this encourages better naming and organization.

- dsl for expressing expectations

team.should have(11).players

vs

assert_equal 11, team.players.size

- better failure messages

expected empty? to return true, got false

vs

expected true, got false

- better reporting

Thing
- should do this
- should do that
- should do the other thing (FAILED - 1)
- should do even this (PENDING: Not Yet Implemented)

vs

...............

There is also a nicely formatted HTML report out of the box:

http://rspec.rubyforge.org/report.html

- rspec_on_rails - component isolation allows you to test views before
controllers or models even exist. This is VERY helpful when you're on
an XP or XP-like team.

I'm sure there's more that I'm not thinking of right now. There's also
the &quot;joy&quot; factor. I find it a more joyful experience to use RSpec, for
the reasons stated above and for reasons that you can only appreciate
by exploring it.

Hope this helps.

Cheers,
David
</POST>
<POST>
<POSTER> Faisal N Jawdat &lt;fai...@faisal.com&gt; </POSTER>
<POSTDATE> 2007-07-25T12:34:00 </POSTDATE>
On Jul 25, 2007, at 11:50 AM, David Chelimsky wrote:

<QUOTE PREVIOUSPOST="
&gt; RSpec supports this by trying to use words like &quot;describe&quot; instead
&gt; of &quot;TestCase&quot; and &quot;should&quot; instead of &quot;assert.&quot;
">

As an aside, RSpec's use of &quot;should&quot; may be confusing to anyone
coming from the networking world:

http://www.faqs.org/rfcs/rfc2119.html

-faisal
</POST>
<POST>
<POSTER> &quot;David Chelimsky&quot; &lt;dchelim...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-25T12:43:00 </POSTDATE>
On 7/25/07, Faisal N Jawdat &lt;fai ... @faisal.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Jul 25, 2007, at 11:50 AM, David Chelimsky wrote:
&gt; &gt; RSpec supports this by trying to use words like &quot;describe&quot; instead
&gt; &gt; of &quot;TestCase&quot; and &quot;should&quot; instead of &quot;assert.&quot;

&gt; As an aside, RSpec's use of &quot;should&quot; may be confusing to anyone
&gt; coming from the networking world:

&gt; http://www.faqs.org/rfcs/rfc2119.html
">

:(

Can't clarify everything for everybody I guess.

<QUOTE PREVIOUSPOST="
&gt; -faisal
">
</POST>
<POST>
<POSTER> Kyle Hargraves &lt;philodespo...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-25T12:43:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Brian Hogan wrote:
&gt; @David:

&gt; Would you be kind enough to briefly explain what you perceive to be the
&gt; advantages to RSpec? I'm really hoping for a good comparison of the two, so
&gt; I can see if it's worth investigating further. (I am writing a book that
&gt; will include testing, and need more info). I've played with RSPec and
&gt; haven't really found anything I can't do with test:unit....
">

And that's as expected. As you'll read in most intros to BDD, it's the
same practice as TDD, but with the focus shifted. Everything you can do
with BDD can be done with TDD.

People seem to be expecting some sort of sea change in development
practices, but that's not going to happen here. And from what I've read,
it was never intended to.

It's a small tweak, to refocus TDD practitioners a slight bit. They
think it produces better specs/tests, not because it's something that
couldn't be done before, but because it's now more obvious what you
should be doing.

If TDD has always worked well for you (as I've read before, &quot;if you've
been doing it right all along&quot;), then great, stick with it.

But the very simple terminology changes are what made the point of TDD
finally click for me.

As for rspec specifically? It does what I need it to, produces
phenomenally legible specs, and then stays out of the way.

Kyle
</POST>
<POST>
<POSTER> &quot;Brian Hogan&quot; &lt;bpho...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-25T12:47:00 </POSTDATE>
@David, @Kyle:

Great stuff. If you were going to expose people to tests, would you start
with TDD and test:unit, or would you go right to BDD and RSpec?

On 7/25/07, Kyle Hargraves &lt;philodespo ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Brian Hogan wrote:
&gt; &gt; @David:

&gt; &gt; Would you be kind enough to briefly explain what you perceive to be the
&gt; &gt; advantages to RSpec? I'm really hoping for a good comparison of the two,
&gt; so
&gt; &gt; I can see if it's worth investigating further. (I am writing a book that
&gt; &gt; will include testing, and need more info). I've played with RSPec and
&gt; &gt; haven't really found anything I can't do with test:unit....

&gt; And that's as expected. As you'll read in most intros to BDD, it's the
&gt; same practice as TDD, but with the focus shifted. Everything you can do
&gt; with BDD can be done with TDD.

&gt; People seem to be expecting some sort of sea change in development
&gt; practices, but that's not going to happen here. And from what I've read,
&gt; it was never intended to.

&gt; It's a small tweak, to refocus TDD practitioners a slight bit. They
&gt; think it produces better specs/tests, not because it's something that
&gt; couldn't be done before, but because it's now more obvious what you
&gt; should be doing.

&gt; If TDD has always worked well for you (as I've read before, &quot;if you've
&gt; been doing it right all along&quot;), then great, stick with it.

&gt; But the very simple terminology changes are what made the point of TDD
&gt; finally click for me.

&gt; As for rspec specifically? It does what I need it to, produces
&gt; phenomenally legible specs, and then stays out of the way.

&gt; Kyle
">
</POST>
<POST>
<POSTER> &quot;David Chelimsky&quot; &lt;dchelim...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-25T12:56:00 </POSTDATE>
On 7/25/07, Brian Hogan &lt;bpho ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; @David, @Kyle:

&gt; Great stuff. If you were going to expose people to tests, would you start
&gt; with TDD and test:unit, or would you go right to BDD and RSpec?
">

Green field? i.e. no experience with testing at all? Definitely RSpec.

Beyond that, it depends on myriad factors, mostly boiling down to what
is going to be most pragmatic for the team based on their level of
experience with Ruby, testing in general, other frameworks, etc. I'd
always prefer RSpec because, well, I prefer it. But sometimes going w/
test/unit could be more pragmatic, at least in the short run.

David
</POST>
<POST>
<POSTER> &quot;s.ross&quot; &lt;cwdi...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-25T17:27:00 </POSTDATE>
This argument is the same one you could use to say &quot;what can you
write in Ruby that you can't write, nearly the same way, in C&quot;? Heck,
they are both TC general purpose computer programming languages.
Ahhhh, but the &quot;feel&quot; is different. That's what I find sets RSpec
apart, and if it doesn't click for you it might not *work* for you.

On Jul 25, 2007, at 6:55 AM, Phlip wrote:

<QUOTE PREVIOUSPOST="
&gt; I don't get it. What can you write in RSpec that you can't write,
&gt; nearly the same way, in Test::Unit?
">
</POST>
<POST>
<POSTER> Phlip &lt;phlip2...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-25T17:56:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
s.ross wrote:
&gt; This argument is the same one you could use to say &quot;what can you write in
&gt; Ruby that you can't write, nearly the same way, in C&quot;?
">

Uh, in the same volume of code? At the same velocity?

--
Phlip
http://www.oreilly.com/catalog/9780596510657/
^ assert_xpath
http://tinyurl.com/23tlu5 &lt;-- assert_raise_message
</POST>
<POST>
<POSTER> &quot;David Chelimsky&quot; &lt;dchelim...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-25T18:10:00 </POSTDATE>
On 7/25/07, Phlip &lt;phlip2 ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; s.ross wrote:

&gt; &gt; This argument is the same one you could use to say &quot;what can you write in
&gt; &gt; Ruby that you can't write, nearly the same way, in C&quot;?

&gt; Uh, in the same volume of code? At the same velocity?
">

OK, so what about python?

I think the point Steve was making was about &quot;feel&quot;, which is what
Ruby and Rails are largely about. To me, there is a huge difference
between this:

team.should have(11).players

and this

assert_equal 11, team.players.size

And an even bigger difference in the output when these fail:

expected 11 players, got 10

vs

expected 11, got 10

Implementing these probably takes the same amount of time. A month
later, seeing &quot;expected 11 players&quot; is VERY meaningful, especially
when multiple failures appear due to a change you just made. If I see
10 failures that all say &quot;expected x things, got y&quot;, then I have a lot
more information right away about what went wrong than if I just see
&quot;expected x, got y&quot;.

FWIW.

David
</POST>
<POST>
<POSTER> &quot;Pat Maddox&quot; &lt;perg...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-25T18:45:00 </POSTDATE>
On 7/25/07, Roderick van Domburg &lt;rails-mailing-l ... @andreas-s.net&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; I'd like to chime in. I would not at all say that I detest RSpec in any
&gt; way, but I do find it to be rather besides the point. It just never
&gt; caught on to me, you know?

&gt; When I first looked at RSpec, I thought it was rather cryptic. This
&gt; boils down to a matter of taste, I know, but all those &quot;recipes&quot; (I
&gt; don't know the term) really aren't all that legible to me.
&gt; &quot;bowling.score.should == 0&quot;? &quot;should&quot; is equal to 0? Is it any more
&gt; expressive than &quot;assert 0, bowling.score&quot;? Again, it's personal
&gt; preference, but this is one DSL that I don't care for. So I dismissed it
&gt; in favor of the Test::Units I have come to cherish.
">

Cryptic?  Seriously?
&quot;bowling score should equal 0&quot;
vs
&quot;assert 0 bowling score&quot;

The first statement is parseable by a second grader.  The second
statement only makes sense if you are very familiar with test::unit.

I think the problem is that you're looking at the code and ignoring
the meaning.  You ask &quot;'should' is equal to 0?&quot;  It seems that you're
examining the code the way the interpretter would, and thinking, &quot;the
object returned by the method should is equal to 0.&quot;  That's
completely the wrong mindset.

I would say that TDD is a tool to help you solve the problem of
designing and implementing behavior.  Test::Unit works fine in that
regard, but RSpec reduces the semantic distance between the developer
and the problem domain.

Consider a task list you write for yourself.  Again you'll have
statements that look like &quot;bowling score should equal 0&quot; rather than
&quot;assert 0 bowling score.&quot;  Throw in a couple dots and you're good to
go :)  RSpec lets you express behavior in code almost as neatly as you
do in your head.  That's very, very powerful.  I've yet to come across
a tool that brings you that close.

<QUOTE PREVIOUSPOST="
&gt; Then I attended a lecture by Aslak Hellesøy. I mean, with so many people
&gt; around raving about RSpec, I must be missing the point right? But I was
&gt; let down: Alsak demonstrated it to be a wrapper DSL around Test::Unit
&gt; for &quot;people who find it hard to come to gripes with TDD&quot;. So it's a sort
&gt; of workaround? I was disappointed by that statement of his.
">

I'm not sure how long ago that lecture was, but to the best of my
knowledge RSpec is no longer just a wrapper around Test::Unit.  On the
other hand, I'm not sure why it matters how it's implemented under the
hood.  We are concerned with behavior here, after all ;)

Anyway, the big BDD guys all basically say that there's nothing
different if you're doing TDD right.  BDD/RSpec isn't a workaround to
TDD, but rather a fast track to the good things about TDD.  Again you
have the benefit of a shorter semantic distance.  By using RSpec you
start off focusing on design and behavior, which is the ultimate goal
of TDD.

<QUOTE PREVIOUSPOST="
&gt; He says Test::Unit is tightly coupled to the actual code and that that's
&gt; a bad thing. I say I like that coupling, because it keeps a sharp edge
&gt; on the test-before-you-write principle: if you're mucking around code or
&gt; tests that worked before, you'll find yourself pressed to advocate that
&gt; change and express it in an additional or revised test.
">

The concern is that Test::Unit encourages an artificial coupling of
one test class to one production class.  That's a completely different
thing from tests being coupled to the code, which as you pointed out
will/should be the case.  The problem is that a new test class can
feel heavy weight (especially if you've been using JUnit for several
years, you almost certainly have that stigma).  People think, &quot;wow why
should I create a whole new class when it's just a little bit of
behavior?&quot;  Most people know that it's not a good idea to have a class
with just one or two methods, but testing has different rules and the
fact is that a test class with just a few methods is often precisely
what you need.

RSpec helps you avoid this problem by encouraging you to write several
small, focused examples.  Once again it's not something that you
couldn't do with Test::Unit, but the RSpec way is just a lot closer to
the Right Way.

<QUOTE PREVIOUSPOST="
&gt; Moving from personal preference into the field of computer science,
&gt; there is no argument that I know of favoring either in code coverage or
&gt; testing metrics. (Indeed, &quot;coupling&quot; and &quot;cohesion&quot; have so far only
&gt; referred to the functional components themselves, not their tests.) This
&gt; doesn't prove either Alsak or me wrong or right, but does iterate that
&gt; it's a matter of preference.

&gt; &quot;But,&quot; some might say, &quot;we're testing *behavior* here. That's different.
&gt; We can clean up methods, throw code around, but as long as the behavior
&gt; remains the same, then that's OK.&quot; I see it as the same discussion about
&gt; white box testing and black box testing, but with a twist.

&gt; As a black box, the bowling example on the RSpec home page seems to work
&gt; fine. As a white box, it's lacking in every respect because the
&gt; algorithm we assume to be present is, in fact, completely absent. I like
&gt; to test the algorithm, because if I don't prove the behavior of the
&gt; algorithm to be correct then I will need to verify every possible
&gt; outcome instead. That kind of verification isn't very efficient.
">

I don't think RSpec is meant to be a white-box testing tool.  Again,
it's all about design and behavior.  Despite that, you should still be
able to achieve a sufficient level of white-box testing using mocks.

In fact, sometimes I'll write two sets of specs for the same example.
One will use concrete implementations, allowing me to verify that I
get the desired side-effects (records created, etc).  Another one will
use mocks, allowing me to verify that the proper interactions are
being made.  I've got a good example, but I don't want to add 65 lines
of code to this already lengthy message...but if there's any interest
I'll be happy to post it in a followup message.

<QUOTE PREVIOUSPOST="
&gt; So the twist is this: this time around, we're mixing up black box
&gt; testing by dubbing it &quot;behavior&quot; and white box testing by performing
&gt; actual method calls. I've been searching for a rationale, but could only
&gt; find the one by Alsak that I was disappointed by before.

&gt; The way I see it, RSpec is just a matter of preference, and a bit of a
&gt; hype at that. Perhaps I'm misunderstanding, and if so, I'd love to see
&gt; the entire mantra clarified. But until then, I'm preferring Test::Unit
&gt; for its readability and code coupling, and saying nay to all those who
&gt; preach that RSpec is a level beyond Test::Unit.
">

Sure, just as some people prefer C.  It's certainly more readable -
you have semicolons that tell you where a statement ends!

Pat
</POST>
<POST>
<POSTER> &quot;s.ross&quot; &lt;cwdi...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-25T18:59:00 </POSTDATE>
We could debate either side of the issue. I could say &quot;with the same
compactness? with equivalent performance characteristics?&quot; but at the
end of the discussion, it's all about what clicks for you. If you are
happy with asserts (like in C, hence my analogy), then use them. I
believe the BDD people -- and I count David among one of the most
thoughtful of the bunch -- have put a good deal of work into making
the description of the spec as natural as possible. Again, it's what
reads naturally to you. If you don't parse it naturally, then no
prob. Also, make careful note of what David says about the failure
messages. This was one of my biggest complaints with Test::Unit and
the fix is pretty close to free with RSpec. The failures report
pretty much in English and if they don't I probably wrote the example
wrong.

--s

On Jul 25, 2007, at 2:56 PM, Phlip wrote:

<QUOTE PREVIOUSPOST="
&gt;&gt; This argument is the same one you could use to say &quot;what can you
&gt;&gt; write in
&gt;&gt; Ruby that you can't write, nearly the same way, in C&quot;?

&gt; Uh, in the same volume of code? At the same velocity?
">
</POST>
<POST>
<POSTER> Jacob Atzen &lt;ja...@jacobatzen.dk&gt; </POSTER>
<POSTDATE> 2007-07-26T04:01:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Pat Maddox wrote:
&gt; In fact, sometimes I'll write two sets of specs for the same example.
&gt; One will use concrete implementations, allowing me to verify that I
&gt; get the desired side-effects (records created, etc).  Another one will
&gt; use mocks, allowing me to verify that the proper interactions are
&gt; being made.  I've got a good example, but I don't want to add 65 lines
&gt; of code to this already lengthy message...but if there's any interest
&gt; I'll be happy to post it in a followup message.
">

This sounds very interesting. I would love to see a concrete example
detailing your approach.

--
Cheers,
- Jacob Atzen
</POST>
<POST>
<POSTER> Roderick van Domburg &lt;rails-mailing-l...@andreas-s.net&gt; </POSTER>
<POSTDATE> 2007-07-26T04:08:00 </POSTDATE>
Thanks for your replies everyone -- it sure has been improving my
understanding, plus I love the debate. :-)

Allow me to respond chronologically.

<QUOTE PREVIOUSPOST="
Phlip wrote:
&gt;&gt; Alsak demonstrated it to be a wrapper DSL around Test::Unit
&gt;&gt; for &quot;people who find it hard to come to gripes with TDD&quot;. So it's a sort
&gt;&gt; of workaround? I was disappointed by that statement of his.

&gt; I don't get it. What can you write in RSpec that you can't write,
&gt; nearly the same way, in Test::Unit?
">

That was exactly my point.

<QUOTE PREVIOUSPOST="
Phlip wrote:
&gt;&gt; He says Test::Unit is tightly coupled to the actual code and that that's
&gt;&gt; a bad thing.

&gt; Done right, either one tightly _coheres_ to the actual code.

&gt; (Define &quot;couple&quot; as &quot;A must change only because B changed&quot;, and define
&gt; &quot;cohere&quot; as &quot;A and B share legitimate reasons to change together&quot;.)
">

That was me quoting him. Both Alsak and you are right. :-)

Alsak is right in the sense that tight coupling indeed does not improve
testability or robustness because a network of modules that are
interrelated are more difficult to test than modules in isolation.

I totally agree with you on the cohesion tab. Cohesion (singleness of
purposeness of a module) is generally regarded as a good thing to have
in computer science and is indicative of a well-designed software
architecture that is reusable and understandable.

In fact, it is often said that a high cohesion correlates with high test
coverage, because a single test will touch on multiple facets of the
module, and hence multiple tests will cover the facets multiple times.

But here's the thing: these quality measures are about intra- or
inter-relationships between functional modules -- not between a
functional module and its unit tests. When we speak in this context of
modules and their unit tests, I have yet to find any evidence that
either refer cohesion or coupling is either desirable or undesirable.

The point I'm trying to make here is this: with &quot;tight coupling&quot; [sic.]
being listed as one of the reasons to move away from Test::Unit, that
really just is preference over fact.

<QUOTE PREVIOUSPOST="
James Mead wrote:
&gt; Roderick: David Chelimsky might be a little miffed with your selective
&gt; quoting which makes it appear as if he doesn't like RSpec...

&gt; David Chelimsky wrote:
&gt;&gt;&gt; I may be biased, but I would really like and have been looking for an
&gt;&gt;&gt; alternative BDD choice besides RSpec.

&gt; This was not written by David, but was written in response to an email
&gt; from him. The only clue to this is the level of indentation of the quoting.
">

I apologize for my misquoting. It is not my intention to bring either
discredit or misuse their words.

<QUOTE PREVIOUSPOST="
David Chelimsky wrote:
&gt; I'm sorry that you see this as preaching and mantras. I have no
&gt; intention of converting you. I like RSpec because it expresses the
&gt; things I want in a BDD framework. You don't have to like it.
">

But maybe I don't know what I'm missing, in which case I want to like
it! :-)

<QUOTE PREVIOUSPOST="
David Chelimsky wrote:
&gt; BDD comes from TDD, which comes from XP, which includes Refactoring as
&gt; an integral part of the process. Refactoring is more expensive as your
&gt; tests are more tightly coupled to the code, so one goal of TDD is to
&gt; decouple the tests from the detail of the code (which is what changes
&gt; most often). One thing that aids in this decoupling is focusing on
&gt; behaviour instead of internal implementation. BDD champions this goal
&gt; by putting it front and center. RSpec supports this by trying to use
&gt; words like &quot;describe&quot; instead of &quot;TestCase&quot; and &quot;should&quot; instead of
&gt; &quot;assert.&quot;
">

I do acknowledge the design goals, but keep wondering: how can only
words make the difference between BDD and TDD? I fail to see how
replacing words and reshuffling parameters (i.e. assert 0, bowling.score
--&gt; bowling.score.should == 0) can facilitate the decoupling / decrease
in cohesion.

<QUOTE PREVIOUSPOST="
David Chelimsky wrote:
&gt; It is clear from your arguments that a) your testing goals do not
&gt; align with those of RSpec and b) you've only read the cover (your
&gt; argument about the example on the Home Page). If you're seriously
&gt; interested in learning about RSpec and BDD, then you should try to
&gt; actually use it on a small project and see how it feels. If not, then
&gt; so be it. I still get to use it, so I am happy.
">

You are absolutely right in this. I should truly give it a whirl and
haven't yet. I only checked out the examples and attended Alsak's 2007
lecture. Not trying sure is bad developer practice :-) Thanks for point
that out to me, it's a good reality check.

Could you tell me though, what is the gap that you perceive between my
testing goals and those of RSpec? That knowledge would be really helpful
in completing my mental picture about RSpec.

<QUOTE PREVIOUSPOST="
Pat Maddox wrote:
&gt; On 7/25/07, Roderick van Domburg &lt;rails-mailing-l ... @andreas-s.net&gt;
&gt; wrote:
&gt;&gt; in favor of the Test::Units I have come to cherish.
&gt; Cryptic?  Seriously?
&gt; &quot;bowling score should equal 0&quot;
&gt; vs
&gt; &quot;assert 0 bowling score&quot;
">

Again, thanks! I was reading aloud: &quot;bowling score should is equal to
0&quot;. Never thought of keeping it simpler than that.

<QUOTE PREVIOUSPOST="
Pat Maddox wrote:
&gt;&gt; Then I attended a lecture by Aslak Helles�y. I mean, with so many people
&gt;&gt; around raving about RSpec, I must be missing the point right? But I was
&gt;&gt; let down: Alsak demonstrated it to be a wrapper DSL around Test::Unit
&gt;&gt; for &quot;people who find it hard to come to gripes with TDD&quot;. So it's a sort
&gt;&gt; of workaround? I was disappointed by that statement of his.

&gt; I'm not sure how long ago that lecture was, but to the best of my
&gt; knowledge RSpec is no longer just a wrapper around Test::Unit.  On the
&gt; other hand, I'm not sure why it matters how it's implemented under the
&gt; hood.  We are concerned with behavior here, after all ;)
">

Indeed that was my perception of things, not something he said.

Earlier Philip asked &quot;I don't get it. What can you write in RSpec that
you can't write, nearly the same way, in Test::Unit?&quot;. That's the same
flow of mind that got me to arrive to this perception.

<QUOTE PREVIOUSPOST="
Pat Maddox wrote:
&gt;&gt; He says Test::Unit is tightly coupled to the actual code and that that's
&gt;&gt; a bad thing. I say I like that coupling, because it keeps a sharp edge
&gt;&gt; on the test-before-you-write principle: if you're mucking around code or
&gt;&gt; tests that worked before, you'll find yourself pressed to advocate that
&gt;&gt; change and express it in an additional or revised test.

&gt; The concern is that Test::Unit encourages an artificial coupling of
&gt; one test class to one production class.  That's a completely different
&gt; thing from tests being coupled to the code, which as you pointed out
&gt; will/should be the case.  The problem is that a new test class can
&gt; feel heavy weight (especially if you've been using JUnit for several
&gt; years, you almost certainly have that stigma).  People think, &quot;wow why
&gt; should I create a whole new class when it's just a little bit of
&gt; behavior?&quot;  Most people know that it's not a good idea to have a class
&gt; with just one or two methods, but testing has different rules and the
&gt; fact is that a test class with just a few methods is often precisely
&gt; what you need.

&gt; RSpec helps you avoid this problem by encouraging you to write several
&gt; small, focused examples.  Once again it's not something that you
&gt; couldn't do with Test::Unit, but the RSpec way is just a lot closer to
&gt; the Right Way.
">

That did put things into perspective for me. Thanks!

<QUOTE PREVIOUSPOST="
- Hide quoted text - - Show quoted text -
">

<QUOTE PREVIOUSPOST="
Pat Maddox wrote:
&gt;&gt; As a black box, the bowling example on the RSpec home page seems to work
&gt;&gt; fine. As a white box, it's lacking in every respect because the
&gt;&gt; algorithm we assume to be present is, in fact, completely absent. I like
&gt;&gt; to test the algorithm, because if I don't prove the behavior of the
&gt;&gt; algorithm to be correct then I will need to verify every possible
&gt;&gt; outcome instead. That kind of verification isn't very efficient.

&gt; I don't think RSpec is meant to be a white-box testing tool.  Again,
&gt; it's all about design and behavior.  Despite that, you should still be
&gt; able to achieve a sufficient level of white-box testing using mocks.

&gt; In fact, sometimes I'll write two sets of specs for the same example.
&gt; One will use concrete implementations, allowing me to verify that I
&gt; get the desired side-effects (records created, etc).  Another one will
&gt; use mocks, allowing me to verify that the proper interactions are
&gt; being made.  I've got a good example, but I don't want to add 65 lines
&gt; of code to this already lengthy message...but if there's any interest
&gt; I'll be happy to post it in a followup message.
">

I am interested! I enjoy the discussion and think it'll be 65 lines well
spent. :-)

Cheers,

Roderick
--
Posted via http://www.ruby-forum.com/ .
</POST>
<POST>
<POSTER> &quot;Pat Maddox&quot; &lt;perg...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-26T05:10:00 </POSTDATE>
On 7/26/07, Jacob Atzen &lt;ja ... @jacobatzen.dk&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Pat Maddox wrote:
&gt; &gt; In fact, sometimes I'll write two sets of specs for the same example.
&gt; &gt; One will use concrete implementations, allowing me to verify that I
&gt; &gt; get the desired side-effects (records created, etc).  Another one will
&gt; &gt; use mocks, allowing me to verify that the proper interactions are
&gt; &gt; being made.  I've got a good example, but I don't want to add 65 lines
&gt; &gt; of code to this already lengthy message...but if there's any interest
&gt; &gt; I'll be happy to post it in a followup message.

&gt; This sounds very interesting. I would love to see a concrete example
&gt; detailing your approach.
">

Okay, here we go :)

describe VideoService, &quot; when creating a video&quot; do
fixtures :companies, :sites, :video_formats, :publish_settings

before(:each) do
@video = Video.new
@video.company = companies(:test)
@video.site = sites(:test)
sites(:test).stub!(:formats).and_return [ video_formats(:flash) ]

@origin = mock_model(Origin, :process_source =&gt; true,
:transcode_asset =&gt; true, :storage =&gt; &quot;file&quot;)
Origin.stub!(:find_transcoder).and_return @origin

@service = VideoService.new
end

def create_video
@service.create_video :video =&gt; @video, :signature =&gt; &quot;abc123&quot;,
:frame =&gt; 1, :storage =&gt; &quot;file&quot;
end

it &quot;should add a new video record&quot; do
lambda { create_video }.should change(Video, :count).by(1)
end

it &quot;should create two assets - one source and one transcoded&quot; do
lambda { create_video }.should change(Asset, :count).by(2)
@video.source_asset.should be_source
@video.should have(2).assets
end

it &quot;should create the main asset with the appropriate video format&quot; do
create_video
@video.assets.find_by_video_format_id(video_formats(:flash).id).should_not
be_blank
end
end

describe VideoService, &quot; when creating a video&quot; do
fixtures :companies, :sites, :video_formats

before(:each) do
@video = mock_model(Video, :save =&gt; true, :company_id =&gt;
companies(:test).id, :site =&gt; sites(:test), :hook =&gt; nil)
sites(:test).stub!(:formats).and_return [ video_formats(:flash) ]

@source_asset = mock_model(Asset, :video_id= =&gt; @video.id, :save =&gt; true)
@transcode_asset = mock_model(Asset, :video_id= =&gt; @video.id, :save =&gt; true)
Asset.stub!(:new).and_return @source_asset, @transcode_asset
@video.stub!(:source_asset).and_return @source_asset

@source_origin = mock_model(Origin, :process_source =&gt; true,
:transcode_asset =&gt; true, :storage =&gt; &quot;file&quot;)
@transcode_origin = mock_model(Origin, :transcode_asset =&gt; true,
:storage =&gt; &quot;file&quot;)
Origin.stub!(:find_transcoder).and_return @source_origin, @transcode_origin

@service = VideoService.new
end

def create_video
@service.create_video :video =&gt; @video, :signature =&gt; &quot;abc123&quot;,
:frame =&gt; 1, :storage =&gt; &quot;file&quot;
end

it &quot;should find a transcoder&quot; do
Origin.should_receive(:find_transcoder).with(companies(:test).id,
false, &quot;file&quot;).and_return @source_origin
create_video
end

it &quot;should process the source asset&quot; do
@source_origin.should_receive(:process_source).with(&quot;abc123&quot;,
@source_asset, 1, &quot; http://test.host:80/ &quot;)
create_video
end

it &quot;should find an origin for the transcode format&quot; do
Origin.should_receive(:find_transcoder).with(companies(:test).id,
false, nil).and_return @transcode_origin
create_video
end

it &quot;should transcode the new asset&quot; do
@transcode_origin.should_receive(:transcode_asset).with(&quot;abc123&quot;,
@transcode_asset, &quot; http://test.host:80/ &quot;,
&quot; http://test.host:80/video_formats/# {video_formats(:flash).id}.xml&quot;)
create_video
end
end

I created the VideoService to wrap the creation of a video in our
system.  At that stage in the code, there were a couple main parts -
creating a new video record, creating a couple asset records, and
notifying our transcode machines about the new assets.

The first example specifies the db behavior I want.  That was my
black-box test (you might say it's grey-box because I'm stubbing some
stuff out, but that wasn't part of the original spec.  It's just there
so the spec can run - Origin makes a network call and it's easier to
stub the whole thing out).

The second example is the white-box test, which verifies that the
internals work.  Certain origins should be found, they need to receive
certain calls with a particular video, etc.

Now I'm not sure if people will like those specs :)  but hopefully it
gives you an idea of how you can approach specifications from both
angles.

Pat
</POST>
<POST>
<POSTER> dbl...@wobblini.net </POSTER>
<POSTDATE> 2007-07-26T05:54:00 </POSTDATE>
Hi --

<QUOTE PREVIOUSPOST="
On Wed, 25 Jul 2007, Faisal N Jawdat wrote:

&gt; On Jul 25, 2007, at 11:50 AM, David Chelimsky wrote:
&gt;&gt; RSpec supports this by trying to use words like &quot;describe&quot; instead
&gt;&gt; of &quot;TestCase&quot; and &quot;should&quot; instead of &quot;assert.&quot;

&gt; As an aside, RSpec's use of &quot;should&quot; may be confusing to anyone
&gt; coming from the networking world:

&gt; http://www.faqs.org/rfcs/rfc2119.html
">

I don't think that coming from the networking world means one can't
make the leap of imagination required to realize that the entire world
does not speak in compliance with RFC2119 :-)  I wouldn't worry about
it for a second.

David

--
* Books:
RAILS ROUTING (new! http://www.awprofessional.com/title/0321509242 )
RUBY FOR RAILS ( http://www.manning.com/black )
* Ruby/Rails training
&amp; consulting:  Ruby Power and Light, LLC ( http://www.rubypal.com )
</POST>
<POST>
<POSTER> Wincent Colaiuta &lt;w...@wincent.com&gt; </POSTER>
<POSTDATE> 2007-07-26T07:04:00 </POSTDATE>
On Jul 25, 6:34 pm, Faisal N Jawdat &lt;fai ... @faisal.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Jul 25, 2007, at 11:50 AM, David Chelimsky wrote:

&gt; &gt; RSpec supports this by trying to use words like &quot;describe&quot; instead
&gt; &gt; of &quot;TestCase&quot; and &quot;should&quot; instead of &quot;assert.&quot;

&gt; As an aside, RSpec's use of &quot;should&quot; may be confusing to anyone
&gt; coming from the networking world:

&gt; http://www.faqs.org/rfcs/rfc2119.html
">

Fortunately, if you find &quot;should&quot; confusing or misleading you can
write your examples such as this one:

it &quot;should redirect to the home page after logging out&quot;

like this instead:

it &quot;must redirect to the home page after logging out&quot;

Or using any other word or language you think is better. The language
you employ in your examples is up to you, although the RSpec community
does tend to use some widespread patterns, including the use of the
word &quot;should&quot; in a way that is closer to the &quot;standard English sense&quot;
rather than the &quot;RFC-2119 sense&quot;.

Cheers,
Wincent
</POST>
<POST>
<POSTER> &quot;Pat Maddox&quot; &lt;perg...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-26T07:34:00 </POSTDATE>
On 7/26/07, Wincent Colaiuta &lt;w ... @wincent.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Jul 25, 6:34 pm, Faisal N Jawdat &lt;fai ... @faisal.com&gt; wrote:
&gt; &gt; On Jul 25, 2007, at 11:50 AM, David Chelimsky wrote:

&gt; &gt; &gt; RSpec supports this by trying to use words like &quot;describe&quot; instead
&gt; &gt; &gt; of &quot;TestCase&quot; and &quot;should&quot; instead of &quot;assert.&quot;

&gt; &gt; As an aside, RSpec's use of &quot;should&quot; may be confusing to anyone
&gt; &gt; coming from the networking world:

&gt; &gt; http://www.faqs.org/rfcs/rfc2119.html

&gt; Fortunately, if you find &quot;should&quot; confusing or misleading you can
&gt; write your examples such as this one:

&gt;   it &quot;should redirect to the home page after logging out&quot;

&gt; like this instead:

&gt;   it &quot;must redirect to the home page after logging out&quot;

&gt; Or using any other word or language you think is better. The language
&gt; you employ in your examples is up to you, although the RSpec community
&gt; does tend to use some widespread patterns, including the use of the
&gt; word &quot;should&quot; in a way that is closer to the &quot;standard English sense&quot;
&gt; rather than the &quot;RFC-2119 sense&quot;.

&gt; Cheers,
&gt; Wincent
">

I'm pretty sure that he's referring to
foo.should == bar

However I have to say I think it's an absurdly nitty &quot;issue&quot;

Pat
</POST>
<POST>
<POSTER> &quot;David Chelimsky&quot; &lt;dchelim...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-26T10:07:00 </POSTDATE>
On 7/26/07, Roderick van Domburg &lt;rails-mailing-l ... @andreas-s.net&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Could you tell me though, what is the gap that you perceive between my
&gt; testing goals and those of RSpec? That knowledge would be really helpful
&gt; in completing my mental picture about RSpec.
">

My perception is based on your statement that you find the tight
coupling between tests and the subject code to be a good thing, and
that you like the fact that making changes to code forces you to make
changes to your tests.

Compare this to TDD's goal of supporting inexpensive refactoring
through very loose coupling between tests and code.

I also sensed that you don't find value in focusing the discussion on behaviour:

=============================================
&quot;But,&quot; some might say, &quot;we're testing *behavior* here.&quot;
=============================================

To me, putting the focus on behaviour encourages a subtle, yet
powerful change in how you perceive these things we call
tests/specs/examples, etc. Obviously, RSpec is interested in helping
you to think of tests as executable examples of expected behaviour as
opposed to, well, tests.

This help?
</POST>
<POST>
<POSTER> Roderick van Domburg &lt;rails-mailing-l...@andreas-s.net&gt; </POSTER>
<POSTDATE> 2007-07-26T11:10:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
David Chelimsky wrote:
&gt; To me, putting the focus on behaviour encourages a subtle, yet
&gt; powerful change in how you perceive these things we call
&gt; tests/specs/examples, etc. Obviously, RSpec is interested in helping
&gt; you to think of tests as executable examples of expected behaviour as
&gt; opposed to, well, tests.

&gt; This help?
">

Yes, that is a metaphor that sticks.

All that rests now is how &quot;renaming&quot; assert(x, y) to Object#should truly
facilitates that idea. Yes there are other niceties and syntactic sugar,
but isn't providing a humanized DSL really the gist of it all?

In the end, you'll still be comparing method results and variable
assignments.

--
Roderick van Domburg
http://www.nedforce.nl
--
Posted via http://www.ruby-forum.com/ .
</POST>
<POST>
<POSTER> &quot;Cynthia Kiser&quot; &lt;cynthia.ki...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-27T01:46:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&gt; - better reporting

&gt; Thing
&gt; - should do this
&gt; - should do that
&gt; - should do the other thing (FAILED - 1)
&gt; - should do even this (PENDING: Not Yet Implemented)

&gt; vs

&gt; ...............
">

I first saw RSpec in one of the tutorials at RailsConf this year. The
positive reinforcement from seeing what you were testing each time was
compelling. I also find seeing the list of tested behaviors often
suggests to me the next test/feature that needs to be added to the
project. (Now if I could just get my rspec.conf file to be used so I
don't have to pass '-f specdoc' each time I run my tests.

<QUOTE PREVIOUSPOST="
&gt; - rspec_on_rails - component isolation allows you to test views before
&gt; controllers or models even exist. This is VERY helpful when you're on
&gt; an XP or XP-like team.
">

David, could you expand on this? Or post a link to docs or a tutorial
or blog post about testing views with RSpec.

--
Cynthia Kiser
cynthia.ki ... @gmail.com
</POST>
<POST>
<POSTER> &quot;s.ross&quot; &lt;cwdi...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-27T01:59:00 </POSTDATE>
Look here:

http://rspec.rubyforge.org/documentation/rails/writing/views.html

The idea is that you can mock enough to populate the view data
allowing you to design from the &quot;outside in.&quot; Basically mock up your
UI, do it in RHTML (or whatever markup you like), and write specs for
that.

On Jul 26, 2007, at 10:46 PM, Cynthia Kiser wrote:

<QUOTE PREVIOUSPOST="
&gt;&gt; - rspec_on_rails - component isolation allows you to test views
&gt;&gt; before
&gt;&gt; controllers or models even exist. This is VERY helpful when you're on
&gt;&gt; an XP or XP-like team.

&gt; David, could you expand on this? Or post a link to docs or a tutorial
&gt; or blog post about testing views with RSpec.
">
</POST>
<POST>
<POSTER> Wincent Colaiuta &lt;w...@wincent.com&gt; </POSTER>
<POSTDATE> 2007-07-27T02:12:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Pat Maddox wrote:
&gt; On 7/26/07, Wincent Colaiuta &lt;w ... @wincent.com&gt; wrote:

&gt; &gt; On Jul 25, 6:34 pm, Faisal N Jawdat &lt;fai ... @faisal.com&gt; wrote:
&gt; &gt; &gt; On Jul 25, 2007, at 11:50 AM, David Chelimsky wrote:

&gt; &gt; &gt; &gt; RSpec supports this by trying to use words like &quot;describe&quot; instead
&gt; &gt; &gt; &gt; of &quot;TestCase&quot; and &quot;should&quot; instead of &quot;assert.&quot;

&gt; &gt; &gt; As an aside, RSpec's use of &quot;should&quot; may be confusing to anyone
&gt; &gt; &gt; coming from the networking world:

&gt; &gt; &gt; http://www.faqs.org/rfcs/rfc2119.html

&gt; &gt; Fortunately, if you find &quot;should&quot; confusing or misleading you can
&gt; &gt; write your examples such as this one:

&gt; &gt;   it &quot;should redirect to the home page after logging out&quot;

&gt; &gt; like this instead:

&gt; &gt;   it &quot;must redirect to the home page after logging out&quot;

&gt; &gt; Or using any other word or language you think is better. The language
&gt; &gt; you employ in your examples is up to you, although the RSpec community
&gt; &gt; does tend to use some widespread patterns, including the use of the
&gt; &gt; word &quot;should&quot; in a way that is closer to the &quot;standard English sense&quot;
&gt; &gt; rather than the &quot;RFC-2119 sense&quot;.

&gt; &gt; Cheers,
&gt; &gt; Wincent

&gt; I'm pretty sure that he's referring to
&gt; foo.should == bar
">

Ah, yes, you're almost certainly right.

Well the solution to that is also only a step away (alias &quot;should&quot; and
&quot;should_not&quot; to whatever you want in your spec helper file). Of
course, I wouldn't actually recommend doing so, as it seems to be
going against the grain for no real good reason.

Cheers,
Wincent
</POST>
<POST>
<POSTER> Robby Russell &lt;robby.li...@planetargon.com&gt; </POSTER>
<POSTDATE> 2007-07-27T02:16:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Brian Hogan wrote:
&gt; @David, @Kyle:

&gt; Great stuff. If you were going to expose people to tests, would you
&gt; start with TDD and test:unit, or would you go right to BDD and RSpec?
">

Our team adopted RSpec about a year ago and we've been through several
projects entirely without Test::Unit. If someone has never had any
experience with TDD, then I would advocate learning through BDD... and
would recommend RSpec as the framework to learn it with.

On a side note. JRuby 1.0 will come with two gems.

Rake and RSpec.

Yes... people are using it in the real world and I can testify on it's
behalf in court. It's elegant. Our developers *LOVE* it. I love it. Even
our Interaction Designers have picked up on the lingo and use
&quot;should&quot;-style language in their interface specifications, which
translates nicely into our implementation process.

RSpec ftw!

Robby

--
Robby Russell
http://www.robbyonrails.com/
http://www.planetargon.com/
</POST>
<POST>
<POSTER> Robby Russell &lt;robby.li...@planetargon.com&gt; </POSTER>
<POSTDATE> 2007-07-27T02:19:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
s.ross wrote:
&gt; This argument is the same one you could use to say &quot;what can you write
&gt; in Ruby that you can't write, nearly the same way, in C&quot;? Heck, they are
&gt; both TC general purpose computer programming languages. Ahhhh, but the
&gt; &quot;feel&quot; is different. That's what I find sets RSpec apart, and if it
&gt; doesn't click for you it might not *work* for you.
">

Agreed. I also consider RSpec to be one of those most exciting things to
pop up in the Ruby community since Rails. Our pure-Ruby libs are being
spec'd (not tested) and we can pretty much run rm -rf test/ in our Rails
applications.

It might not sit well with all, but the syntax is a great example of how
great and expressive Ruby can be.

Robby

--
Robby Russell
http://www.robbyonrails.com/
http://www.planetargon.com/
</POST>
<POST>
<POSTER> Robby Russell &lt;robby.li...@planetargon.com&gt; </POSTER>
<POSTDATE> 2007-07-27T02:47:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Roderick van Domburg wrote:
&gt; David Chelimsky wrote:
&gt;&gt; To me, putting the focus on behaviour encourages a subtle, yet
&gt;&gt; powerful change in how you perceive these things we call
&gt;&gt; tests/specs/examples, etc. Obviously, RSpec is interested in helping
&gt;&gt; you to think of tests as executable examples of expected behaviour as
&gt;&gt; opposed to, well, tests.

&gt;&gt; This help?

&gt; Yes, that is a metaphor that sticks.

&gt; All that rests now is how &quot;renaming&quot; assert(x, y) to Object#should truly
&gt; facilitates that idea. Yes there are other niceties and syntactic sugar,
&gt; but isn't providing a humanized DSL really the gist of it all?

&gt; In the end, you'll still be comparing method results and variable
&gt; assignments.
">

Yes, in the end... you see a result like this. But, I'd like to back
this up to before you write your code.

Let's start with a high-level business rule for an application. We might
have a discussion with our client and determine the following.

A user should not be allowed to create a new account when providing an
existing email address.

This is something that we'd have our clients agree upon before we ever
touched any code. When it comes time to implement this behavior into the
application, we can translate this into RSpec very easily.

describe User, &quot;new account&quot; do

it &quot;should not be allowed to create a new account when providing an
existing email address.&quot;

end

When we run our specs, this will show up as unimplemented. I often add
several of these once a client has signed off on some specifications,
and it results in a TODO-list for me. At this point, I can begin turning
these into full specs.

In a nuthsell, it's not just a DSL for Ruby... it's provides a framework
for discussing requirements with our clients and Interaction Design
team. It's clear English and leaves little room for ambiguity, which I
believe is a good thing! :-)

If you enjoy translating high-level requirements into Test::Unit... and
don't mind the underscore/camelcase madeness... well, good luck with
that. I switched to Ruby/Rails because of how expressive and
English-like it was and think that it's very fitting that RSpec would
evolve out of this community.

Cheers,
Robby

--
Robby Russell
http://www.robbyonrails.com/
http://www.planetargon.com/
</POST>
<POST>
<POSTER> dbl...@wobblini.net </POSTER>
<POSTDATE> 2007-07-27T05:57:00 </POSTDATE>
Hi --

<QUOTE PREVIOUSPOST="
On Thu, 26 Jul 2007, Robby Russell wrote:
&gt; This is something that we'd have our clients agree upon before we ever
&gt; touched any code. When it comes time to implement this behavior into the
&gt; application, we can translate this into RSpec very easily.

&gt; describe User, &quot;new account&quot; do

&gt;   it &quot;should not be allowed to create a new account when providing an
&gt; existing email address.&quot;
&gt; end

&gt; When we run our specs, this will show up as unimplemented. I often add
&gt; several of these once a client has signed off on some specifications,
&gt; and it results in a TODO-list for me. At this point, I can begin turning
&gt; these into full specs.

&gt; In a nuthsell, it's not just a DSL for Ruby... it's provides a framework
&gt; for discussing requirements with our clients and Interaction Design
&gt; team. It's clear English and leaves little room for ambiguity, which I
&gt; believe is a good thing! :-)

&gt; If you enjoy translating high-level requirements into Test::Unit... and
&gt; don't mind the underscore/camelcase madeness... well, good luck with
&gt; that. I switched to Ruby/Rails because of how expressive and
&gt; English-like it was and think that it's very fitting that RSpec would
&gt; evolve out of this community.
">

OK... but, lest we forget, Nathaniel's work on test/unit -- past,
present, and future (I hope) -- has played an incalculable role in
shaping the Ruby programming culture.  Luckily, it's not a zero-sum
game; people can delve into RSpec without having to jettison or scoff
at test/unit.  It's possible for two highly-accomplished test
frameworks to evolve out of the same community :-)

(I'm not trying to get you to like test/unit; I'm just putting in a
word for not having it have to be a winner-take-all kind of
relationship, and also eager to keep the significance of test/unit to
Ruby culture on the radar.  I know I'm showing my age -- in this case,
almost seven :-)

David

--
* Books:
RAILS ROUTING (new! http://www.awprofessional.com/title/0321509242 )
RUBY FOR RAILS ( http://www.manning.com/black )
* Ruby/Rails training
&amp; consulting:  Ruby Power and Light, LLC ( http://www.rubypal.com )
</POST>
<POST>
<POSTER> &quot;David Chelimsky&quot; &lt;dchelim...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-27T08:51:00 </POSTDATE>
On 7/26/07, Roderick van Domburg &lt;rails-mailing-l ... @andreas-s.net&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; David Chelimsky wrote:
&gt; &gt; To me, putting the focus on behaviour encourages a subtle, yet
&gt; &gt; powerful change in how you perceive these things we call
&gt; &gt; tests/specs/examples, etc. Obviously, RSpec is interested in helping
&gt; &gt; you to think of tests as executable examples of expected behaviour as
&gt; &gt; opposed to, well, tests.

&gt; &gt; This help?

&gt; Yes, that is a metaphor that sticks.

&gt; All that rests now is how &quot;renaming&quot; assert(x, y) to Object#should truly
&gt; facilitates that idea.
">

I think this is one of several aspects of RSpec that help promote this
idea. I do thing that saying &quot;should&quot; instead of &quot;assert&quot; changes the
feel from tests to examples of behaviour. But it's not limited to
that.

The structure/organization using describe/it instead of
TestCase/test_method and, especially, using strings to express the
intent rather than method names both go a long way to support this
shift in focus. The reporting you get helps as well.

David
</POST>
<POST>
<POSTER> &quot;David Chelimsky&quot; &lt;dchelim...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-27T09:32:00 </POSTDATE>
On 7/27/07, dbl ... @wobblini.net &lt;dbl ... @wobblini.net&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Hi --

&gt; On Thu, 26 Jul 2007, Robby Russell wrote:

&gt; &gt; This is something that we'd have our clients agree upon before we ever
&gt; &gt; touched any code. When it comes time to implement this behavior into the
&gt; &gt; application, we can translate this into RSpec very easily.

&gt; &gt; describe User, &quot;new account&quot; do

&gt; &gt;   it &quot;should not be allowed to create a new account when providing an
&gt; &gt; existing email address.&quot;
&gt; &gt; end

&gt; &gt; When we run our specs, this will show up as unimplemented. I often add
&gt; &gt; several of these once a client has signed off on some specifications,
&gt; &gt; and it results in a TODO-list for me. At this point, I can begin turning
&gt; &gt; these into full specs.

&gt; &gt; In a nuthsell, it's not just a DSL for Ruby... it's provides a framework
&gt; &gt; for discussing requirements with our clients and Interaction Design
&gt; &gt; team. It's clear English and leaves little room for ambiguity, which I
&gt; &gt; believe is a good thing! :-)

&gt; &gt; If you enjoy translating high-level requirements into Test::Unit... and
&gt; &gt; don't mind the underscore/camelcase madeness... well, good luck with
&gt; &gt; that. I switched to Ruby/Rails because of how expressive and
&gt; &gt; English-like it was and think that it's very fitting that RSpec would
&gt; &gt; evolve out of this community.

&gt; OK... but, lest we forget, Nathaniel's work on test/unit -- past,
&gt; present, and future (I hope) -- has played an incalculable role in
&gt; shaping the Ruby programming culture.  Luckily, it's not a zero-sum
&gt; game; people can delve into RSpec without having to jettison or scoff
&gt; at test/unit.  It's possible for two highly-accomplished test
&gt; frameworks to evolve out of the same community :-)
">

More than two. Don't forget watir. And all of the mocking frameworks.
There's a lot of good stuff here.

<QUOTE PREVIOUSPOST="
&gt; (I'm not trying to get you to like test/unit; I'm just putting in a
&gt; word for not having it have to be a winner-take-all kind of
&gt; relationship, and also eager to keep the significance of test/unit to
&gt; Ruby culture on the radar.
">

A very important point. And now that Ryan has taken over maintenance
of test/unit, I expect to see some great new ideas appearing there as
well.

The thing about RSpec is that it is intended to be a BDD framework,
not a testing framework. It aims to support a behaviour-focused
process in which you, in very granular steps, describe a bit of
behaviour and then implement it.

But BDD is not the end of the testing story on any project. At least I
don't think it _should_ be. Some might even say it's not part of the
testing story at all :)

A perfect example is Matrix Testing, introduced by ZenTest. In
fairness, I haven't done this yet, but I can imagine a process that
goes like this:

1. Develop a component using TDD (and RSpec) to encourage simple
design and usable APIs.
2. Write a matrix test (using ZenTest with test/unit) to ensure that
you've covered all of the permutations you anticipate.
3. If the matrix test exposes any holes, go back and use RSpec to
drive the process of plugging them.

I can hear some saying &quot;but that's doing the same work twice. Why not
just a Matrix Test to begin with and call it a day?&quot;

Because these two tools/approaches solve different problems. RSpec/BDD
is good at expressing behaviour and encouraging simple, flexible
designs. MatrixTesting is good at expressing multiple permutations in
a clean and simple way. Used together, I believe that you'd end up
with a simpler design with better test coverage than you would with
either tool alone.

In XP we do Customer Tests and Developer Tests, though these have a
lot of different names. They are, in the end, exercising the same
code. But they express very different things. And what my experience
tells me is that it's the combination of layers of testing that proves
most effective. So for me, this notion of combining a BDD framework
(for DESIGN) with a testing framework (for TESTING) makes perfect
sense.

<QUOTE PREVIOUSPOST="
&gt; I know I'm showing my age -- in this case,
&gt; almost seven :-)
">

Happy Birthday (6 year olds only say &quot;almost 7&quot; when it's just a few days away).

Cheers,
David

<QUOTE PREVIOUSPOST="
- Hide quoted text - - Show quoted text -
">

<QUOTE PREVIOUSPOST="
&gt; David

&gt; --
&gt; * Books:
&gt;    RAILS ROUTING (new! http://www.awprofessional.com/title/0321509242 )
&gt;    RUBY FOR RAILS ( http://www.manning.com/black )
&gt; * Ruby/Rails training
&gt;      &amp; consulting:  Ruby Power and Light, LLC ( http://www.rubypal.com )
">
</POST>
<POST>
<POSTER> &quot;David Chelimsky&quot; &lt;dchelim...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-07-27T10:06:00 </POSTDATE>
On 7/27/07, Cynthia Kiser &lt;cynthia.ki ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; David Chelimsky wrote:
&gt; &gt; - rspec_on_rails - component isolation allows you to test views before
&gt; &gt; controllers or models even exist. This is VERY helpful when you're on
&gt; &gt; an XP or XP-like team.

&gt; David, could you expand on this? Or post a link to docs or a tutorial
&gt; or blog post about testing views with RSpec.
">

http://blog.davidchelimsky.net/articles/2006/11/06/view-spec-tutorial
http://rspec.rubyforge.org/documentation/rails/writing/views.html
http://rspec.rubyforge.org/rdoc-rails/index.html

Cheers,
David
</POST>
<POST>
<POSTER> Roderick van Domburg &lt;rails-mailing-l...@andreas-s.net&gt; </POSTER>
<POSTDATE> 2007-07-29T07:47:00 </POSTDATE>
Many thanks for taking the time to write down your thoughts, everyone.
It's been very helpful to me to put RSpec in perspective. I'll take it
for a whirl like David suggested, and will revisit this topic if RSpec
manages to win me over. :-)

--
Roderick van Domburg
http://www.nedforce.nl
--
Posted via http://www.ruby-forum.com/ .
</POST>
</TEXT>
</BODY>
</DOC>
