<DOC>
<DOCID> eng-NG-31-126417-9149325 </DOCID>
<DOCTYPE SOURCE="usenet"> USENET TEXT </DOCTYPE>
<DATETIME> 2007-10-20T09:57:00 </DATETIME>
<BODY>
<HEADLINE>
RESTful Geodjango
</HEADLINE>
<TEXT>
<POST>
<POSTER> &quot;Ariel Mauricio Nunez Gomez&quot; &lt;ingenieroar...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-10-20T09:57:00 </POSTDATE>
Is it possible/planned to use django-rest-api
[1]&lt; http://code.google.com/p/django-rest-interface/ &gt;in geodjango
[2] &lt; http://code.djangoproject.com/wiki/GeoDjango &gt; ?

Ariel

[1] http://code.google.com/p/django-rest-interface/
[2] http://code.djangoproject.com/wiki/GeoDjango
</POST>
<POST>
<POSTER> Justin Bronn &lt;jbr...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-10-20T11:41:00 </POSTDATE>
I quickly glanced at the django-rest-interface code and I don't see
any reason why it shouldn't work.  There are no plans to combine yet,
though it would be nice to have GeoJSON serializers for the GEOS/OGR
geometry objects.  The best way to confirm compatibility is experiment
yourself!

-Justin

On Oct 20, 8:57 am, &quot;Ariel Mauricio Nunez Gomez&quot;

<QUOTE PREVIOUSPOST="
&lt;ingenieroar ... @gmail.com&gt; wrote:
&gt; Is it possible/planned to use django-rest-api
&gt; [1]&lt; http://code.google.com/p/django-rest-interface/ &gt;in geodjango
&gt; [2] &lt; http://code.djangoproject.com/wiki/GeoDjango &gt; ?

&gt; Ariel

&gt; [1] http://code.google.com/p/django-rest-interface/
&gt; [2] http://code.djangoproject.com/wiki/GeoDjango
">
</POST>
<POST>
<POSTER> &quot;Ariel Mauricio Nunez Gomez&quot; &lt;ingenieroar...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-10-20T11:44:00 </POSTDATE>
Thanks Justin,

I'll try later and let you know.

Ariel.

On 10/20/07, Justin Bronn &lt;jbr ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; I quickly glanced at the django-rest-interface code and I don't see
&gt; any reason why it shouldn't work.  There are no plans to combine yet,
&gt; though it would be nice to have GeoJSON serializers for the GEOS/OGR
&gt; geometry objects.  The best way to confirm compatibility is experiment
&gt; yourself!

&gt; -Justin

&gt; On Oct 20, 8:57 am, &quot;Ariel Mauricio Nunez Gomez&quot;
&gt; &lt;ingenieroar ... @gmail.com&gt; wrote:
&gt; &gt; Is it possible/planned to use django-rest-api
&gt; &gt; [1]&lt; http://code.google.com/p/django-rest-interface/ &gt;in geodjango
&gt; &gt; [2] &lt; http://code.djangoproject.com/wiki/GeoDjango &gt; ?

&gt; &gt; Ariel

&gt; &gt; [1] http://code.google.com/p/django-rest-interface/
&gt; &gt; [2] http://code.djangoproject.com/wiki/GeoDjango
">
</POST>
<POST>
<POSTER> &quot;Ariel Mauricio Nunez Gomez&quot; &lt;ingenieroar...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-10-20T14:38:00 </POSTDATE>
That restapi is as easy to configure as promised.

The address /xml/mymodel  now presents an xml list  that looks like:

&lt;object pk=&quot;3710&quot; model=&quot;myapp.mymodel&quot;&gt;
&lt;field type=&quot;CharField&quot; name=&quot;custom_id&quot;&gt;XX-83-297&lt;/field&gt;
&lt;field type=&quot;DateTimeField&quot; name=&quot;datetime&quot;&gt;2007-07-27 14:59:18&lt;/field&gt;
&lt;field type=&quot;NoField&quot; name=&quot;point&quot;&gt;POINT (31.0089240000000004 -
82.7168659999999960)&lt;/field&gt;
&lt;field type=&quot;IntegerField&quot; name=&quot;velocidad&quot;&gt;71&lt;/field&gt;
&lt;field to=&quot;myotherapp.section&quot; name=&quot;section&quot; rel=&quot;ManyToOneRel&quot;&gt;1&lt;/field&gt;
&lt;field to=&quot;auth.user&quot; name=&quot;responsable&quot; rel=&quot;ManyToOneRel&quot;&gt;3&lt;/field&gt;
&lt;/object&gt;

That NoField type, is it ok?

Ariel
PS: Thanks Andreas, and thanks to the geodjango team for your excelent work.

On 10/20/07, Ariel Mauricio Nunez Gomez &lt;ingenieroar ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Thanks Justin,

&gt; I'll try later and let you know.

&gt; Ariel.

&gt; On 10/20/07, Justin Bronn &lt;jbr ... @gmail.com &gt; wrote:

&gt; &gt; I quickly glanced at the django-rest-interface code and I don't see
&gt; &gt; any reason why it shouldn't work.  There are no plans to combine yet,
&gt; &gt; though it would be nice to have GeoJSON serializers for the GEOS/OGR
&gt; &gt; geometry objects.  The best way to confirm compatibility is experiment
&gt; &gt; yourself!

&gt; &gt; -Justin

&gt; &gt; On Oct 20, 8:57 am, &quot;Ariel Mauricio Nunez Gomez&quot;
&gt; &gt; &lt;ingenieroar ... @gmail.com&gt; wrote:
&gt; &gt; &gt; Is it possible/planned to use django-rest-api
&gt; &gt; &gt; [1]&lt; http://code.google.com/p/django-rest-interface/ &gt;in geodjango
&gt; &gt; &gt; [2] &lt; http://code.djangoproject.com/wiki/GeoDjango &gt; ?

&gt; &gt; &gt; Ariel

&gt; &gt; &gt; [1] http://code.google.com/p/django-rest-interface/
&gt; &gt; &gt; [2] http://code.djangoproject.com/wiki/GeoDjango
">
</POST>
<POST>
<POSTER> &quot;Jeremy Dunck&quot; &lt;jdu...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-10-20T15:01:00 </POSTDATE>
On 10/20/07, Ariel Mauricio Nunez Gomez &lt;ingenieroar ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; &lt;field type=&quot;NoField&quot; name=&quot;point&quot;&gt;POINT ( 31.0089240000000004
...
&gt; That NoField type, is it ok?
">

Well, it depends what you're going to do with it.  :)

That 'NoField' comes from
django.db.models.fields.Field.get_internal_type.  It was originally
used during table creation (as in manage.py syncdb) and introspection.
It is also included when serializing objects (as the REST interface
does), but it appears to be only serving as an annotation for
convenience-- it's not actually used in deserialization.

The problem you may run into is that there are various types of GIS
fields, all of which will return NoField.  Further, other custom field
types may return NoField and not actually be GIS fields.  Again, this
doesn't affect Django-proper, but if you need to do something
intelligent based on the type attribute, you may have trouble.

...A simple solution to fix Django on this issue isn't immediately
apparent.  I know Malcolm was noodling on improving Field subclassing,
and this get_internal_type bit is one thing that needs improvement.

I can tell you that the text value inside the &lt;field
type=&quot;NoField&quot;.../&gt; for GIS fields is WKT:
http://en.wikipedia.org/wiki/Well-known_text
There are libraries for pasting it...
</POST>
<POST>
<POSTER> Malcolm Tredinnick &lt;malc...@pointy-stick.com&gt; </POSTER>
<POSTDATE> 2007-11-05T08:39:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
On Sat, 2007-10-20 at 14:01 -0500, Jeremy Dunck wrote:
&gt; On 10/20/07, Ariel Mauricio Nunez Gomez &lt;ingenieroar ... @gmail.com&gt; wrote:
&gt; &gt; &lt;field type=&quot;NoField&quot; name=&quot;point&quot;&gt;POINT ( 31.0089240000000004
&gt; ...
&gt; &gt; That NoField type, is it ok?

&gt; Well, it depends what you're going to do with it.  :)

&gt; That 'NoField' comes from
&gt; django.db.models.fields.Field.get_internal_type.  It was originally
&gt; used during table creation (as in manage.py syncdb) and introspection.
&gt;  It is also included when serializing objects (as the REST interface
&gt; does), but it appears to be only serving as an annotation for
&gt; convenience-- it's not actually used in deserialization.

&gt; The problem you may run into is that there are various types of GIS
&gt; fields, all of which will return NoField.  Further, other custom field
&gt; types may return NoField and not actually be GIS fields.  Again, this
&gt; doesn't affect Django-proper, but if you need to do something
&gt; intelligent based on the type attribute, you may have trouble.

&gt; ...A simple solution to fix Django on this issue isn't immediately
&gt; apparent.  I know Malcolm was noodling on improving Field subclassing,
&gt; and this get_internal_type bit is one thing that needs improvement.
">

I was looking at this today as I was writing all the documentation for
field subclassing.

Two things sort of became clear:

(1) It's usually not going to be a problem beyond a display one. Nothing
uses the &quot;type&quot; field inside Django and if external code wants to use
it, it can get the real field type by introspecting the model class.

(2) The gis branch should really use a better name than &quot;NoField&quot; here.
Not a lot of code calls get_internal_type() -- the main critical piece
being db_type(). In all the cases where django.contrib.gis overrides
get_internal_type(), they are also returning None from db_type(). So the
code should probably use descriptive names for the internal type.

(Don't worry, I'll file a ticket about that last part shortly.)

I'm also about to commit a whole bunch of field subclassing stuff --
mostly documentation -- and this includes a barrier to catch cases where
get_internal_type() returns something not in the db_types list. Then
db_type() will return None.

The idea here is that if you are creating a field which doesn't use
Django's standard code to create the database column, then you can
implement get_internal_type() to return your own (non-standard) value
and everything else will Just Work(tm).

Regards,
Malcolm

--
The only substitute for good manners is fast reflexes.
http://www.pointy-stick.com/blog/
</POST>
<POST>
<POSTER> Justin Bronn &lt;jbr...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-11-05T10:29:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&gt; (2) The gis branch should really use a better name than &quot;NoField&quot; here.
&gt; Not a lot of code calls get_internal_type() -- the main critical piece
&gt; being db_type(). In all the cases where django.contrib.gis overrides
&gt; get_internal_type(), they are also returning None from db_type(). So the
&gt; code should probably use descriptive names for the internal type.
">

The &quot;NoField&quot; nomenclature is a result of legacy implementation.  When
I first implemented the GIS branch there was no `db_type` method to
work with.  Moreover, I needed an internal type that wouldn't actually
create SQL for the column because PostGIS geometry columns are added
with a stored procedure.  Using &quot;NoField,&quot; (from what I can tell, now
only used by ManyToManyFields), allowed me to achieve the
functionality without patching django's core code.

I commented out the get_internal_type() in my code, and was able to
sync the database just fine.  Since db_type returns None,
get_internal_type() would default to using the parent class' routine,
and the expected name (e.g., &quot;PointField&quot;) would be returned.  Do you
see any problems with the approach of simply removing the
get_internal_type() routine?

-Justin
</POST>
<POST>
<POSTER> Malcolm Tredinnick &lt;malc...@pointy-stick.com&gt; </POSTER>
<POSTDATE> 2007-11-06T21:40:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
On Mon, 2007-11-05 at 15:29 +0000, Justin Bronn wrote:
&gt; &gt; (2) The gis branch should really use a better name than &quot;NoField&quot; here.
&gt; &gt; Not a lot of code calls get_internal_type() -- the main critical piece
&gt; &gt; being db_type(). In all the cases where django.contrib.gis overrides
&gt; &gt; get_internal_type(), they are also returning None from db_type(). So the
&gt; &gt; code should probably use descriptive names for the internal type.

&gt; The &quot;NoField&quot; nomenclature is a result of legacy implementation.  When
&gt; I first implemented the GIS branch there was no `db_type` method to
&gt; work with.  Moreover, I needed an internal type that wouldn't actually
&gt; create SQL for the column because PostGIS geometry columns are added
&gt; with a stored procedure.  Using &quot;NoField,&quot; (from what I can tell, now
&gt; only used by ManyToManyFields), allowed me to achieve the
&gt; functionality without patching django's core code.
">

Yes, I realise the history. No criticism of the motivation behind the
approach.

<QUOTE PREVIOUSPOST="
&gt; I commented out the get_internal_type() in my code, and was able to
&gt; sync the database just fine.  Since db_type returns None,
&gt; get_internal_type() would default to using the parent class' routine,
&gt; and the expected name (e.g., &quot;PointField&quot;) would be returned.  Do you
&gt; see any problems with the approach of simply removing the
&gt; get_internal_type() routine?
">

I think that's best, if you're happy with the class name as the type
(and normally that would be most natural).

Regards,
Malcolm

--
I've got a mind like a... a... what's that thing called?
http://www.pointy-stick.com/blog/
</POST>
</TEXT>
</BODY>
</DOC>
