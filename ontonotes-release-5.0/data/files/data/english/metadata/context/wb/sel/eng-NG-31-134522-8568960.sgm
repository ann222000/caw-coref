<DOC>
<DOCID> eng-NG-31-134522-8568960 </DOCID>
<DOCTYPE SOURCE="usenet"> USENET TEXT </DOCTYPE>
<DATETIME> 2007-08-20T05:12:00 </DATETIME>
<BODY>
<HEADLINE>
The real story about OSGi and JSR 277
</HEADLINE>
<TEXT>
<POST>
<POSTER> Neil Bartlett &lt;njbartl...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-08-20T05:12:00 </POSTDATE>
Guys, I agree with you that its a shame we can't all just get along,
but this JSR 277 thing really is a problem, and I think Hani has the
wrong take on it. It's a pity that you have simply endorsed his
opinion without checking whether he actually knows what he's talking
about.

First of all, the analogy with Hibernate and JPA just doesn't fit.
Hibernate is a single product, and there are many reasons for not
wanting to base hugely important pieces of IT infrastructure on a
single product -- even an open source one. It makes a lot of sense to
develop a real, cross-vendor specification for O/R mapping within the
JCP, and to model that specification after the existing market leading
product (that is, Hibernate). Note that by the time JPA was published
as a specification, Hibernate was already an implementation of that
specification.

However, OSGi is not a single product, it is already a cross-vendor
specification, which happens to have three open source implementations
already, and a few commercial implementations. So JSR 277 is trying to
come up with a second standard.

Do we need a second standard? Well, if it turns out to be a competing,
incompatible standard, then absolutely not. Given how widely used OSGi
is now, this could cause a really damaging rift in Java.

What if it turns out to be a compatible and complementary standard?
That's what Sun are saying it will be, but you have to wonder in that
case what problem they are trying to solve. After all, OSGi exists and
works already, it's not like we're waiting for Java 7 to come along
with its various tweaks to the language and the JVM for OSGi to start
working properly. It seems highly odd therefore to build an &quot;enabling&quot;
layer underneath a technology that's already &quot;enabled&quot;. In the best
case then, JSR 277 will be something that OSGi can just ignore...
okay, there will be bits of it that might be useful like the
repository, but the core of JSR 277 just won't be that useful. For one
thing, there's no way OSGi is going to sacrifice compatibility with
older Java versions by making itself dependent on new features in Java
7.

Will the best case happen? Will OSGi modules be able to interoperate
cleanly with JSR 277 modules? I've been following the JSR 277 EG
mailing list and it doesn't look all that hopeful. At JavaOne the
whole EG got together and Stanley Ho (the spec lead) promised to the
EG that Sun would deliver a &quot;strawman&quot; design for interoperability.
But they still haven't come up with anything to share with the rest of
the EG, and have refused to even let the other EG members participate
in designing the strawman. My strong suspicion -- and this is shared
with others involved in OSGi -- is that the two module system designs
are just too different, and Sun are currently scratching their heads
because they have no idea how to deliver the interop strawman.

Dick, in describing OSGi you said that it was very powerful but
perhaps a little complex. You're right -- when you get into the
details of dynamic services coming and going, multithreading and so
on, there are a lot of things to think about, and maybe not every Java
programmer out there wants to think about those things. There's
certainly a lot of scope for somebody to come along and offer higher
level stuff on top of OSGi that hides the complexity, and that's
exactly what people like Interface21 are doing with their Spring-OSGi
project, or Eclipse is doing with its tooling support, or BEA are
doing with their (proprietary) microServices Architecture. What
doesn't make sense is to come along and offer a lower level
alternative that doesn't interoperate properly with OSGi.

Lastly, you mention that there's a lot of tension between Sun and IBM
over this. Of course, you're right, and there always has been tension
between those two. But look at the list of organisations backing OSGi,
and you find that there's actually tension between Sun and virtually
every other major player in the Java community. For example, BEA are
building ALL of their new products on OSGi; Oracle are deeply invested
in it. Interface21, I've already mentioned. Red Hat too: JBoss is
converting over to OSGi. Then you've got most of the mobile handset
manufacturers; Siemens, Motorola, Nokia, Ericsson, etc. I mention this
merely because IBM is quite unpopular amongst many Java developers --
Hani certainly despises them -- which makes it all too easy to dismiss
this whole issue as simply an evil plot by IBM to take over Java. I
don't like IBM much myself as it happens, but that's just not the
issue here.

I'm sorry, I've gone on too long. However, this is an important
discussion and I think the Posse needs to look into it a bit more
deeply than simply endorsing Hani Suleiman's opinion. I know that
Peter Kriens, the technical director of the OSGi Alliance, would love
to talk to you. What do you say?

Thanks,
Neil

Non-disclaimer: None of the companies mentioned is a client or
employer, nor do I have any financial interest in any of them.
</POST>
<POST>
<POSTER> &quot;obitus9...@gmail.com&quot; &lt;obitus9...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-08-23T10:23:00 </POSTDATE>
I don't have much to add to the conversation, but I wanted to throw my
support behind a discussion of this topic on the Posse.  Admittedly, I
don't know all the ins and outs of the topic, but I don't understand
Sun's motivation in re-creating something that already exists and is
proven to work within the scope of the current Java language.  In my
book, multiple ways to do the same thing is good, a standardized way
to something is better, and a standard implemented by multiple,
independent (and hopefully open source) groups is the best case
scenario.  OSGi has achieved the best case scenario, so why start
over?  Is there some technical flaw in the OSGi that Sun is trying to
address or are they motivated solely by politics?

Cheers,
Josh

On Aug 20, 4:12 am, Neil Bartlett &lt;njbartl ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Guys, I agree with you that its a shame we can't all just get along,
&gt; but this JSR 277 thing really is a problem, and I think Hani has the
&gt; wrong take on it. It's a pity that you have simply endorsed his
&gt; opinion without checking whether he actually knows what he's talking
&gt; about.

&gt; First of all, the analogy with Hibernate and JPA just doesn't fit.
&gt; Hibernate is a single product, and there are many reasons for not
&gt; wanting to base hugely important pieces of IT infrastructure on a
&gt; single product -- even an open source one. It makes a lot of sense to
&gt; develop a real, cross-vendor specification for O/R mapping within the
&gt; JCP, and to model that specification after the existing market leading
&gt; product (that is, Hibernate). Note that by the time JPA was published
&gt; as a specification, Hibernate was already an implementation of that
&gt; specification.

&gt; However, OSGi is not a single product, it is already a cross-vendor
&gt; specification, which happens to have three open source implementations
&gt; already, and a few commercial implementations. So JSR 277 is trying to
&gt; come up with a second standard.

&gt; Do we need a second standard? Well, if it turns out to be a competing,
&gt; incompatible standard, then absolutely not. Given how widely used OSGi
&gt; is now, this could cause a really damaging rift in Java.

&gt; What if it turns out to be a compatible and complementary standard?
&gt; That's what Sun are saying it will be, but you have to wonder in that
&gt; case what problem they are trying to solve. After all, OSGi exists and
&gt; works already, it's not like we're waiting for Java 7 to come along
&gt; with its various tweaks to the language and the JVM for OSGi to start
&gt; working properly. It seems highly odd therefore to build an &quot;enabling&quot;
&gt; layer underneath a technology that's already &quot;enabled&quot;. In the best
&gt; case then, JSR 277 will be something that OSGi can just ignore...
&gt; okay, there will be bits of it that might be useful like the
&gt; repository, but the core of JSR 277 just won't be that useful. For one
&gt; thing, there's no way OSGi is going to sacrifice compatibility with
&gt; older Java versions by making itself dependent on new features in Java
&gt; 7.

&gt; Will the best case happen? Will OSGi modules be able to interoperate
&gt; cleanly with JSR 277 modules? I've been following the JSR 277 EG
&gt; mailing list and it doesn't look all that hopeful. At JavaOne the
&gt; whole EG got together and Stanley Ho (the spec lead) promised to the
&gt; EG that Sun would deliver a &quot;strawman&quot; design for interoperability.
&gt; But they still haven't come up with anything to share with the rest of
&gt; the EG, and have refused to even let the other EG members participate
&gt; in designing the strawman. My strong suspicion -- and this is shared
&gt; with others involved in OSGi -- is that the two module system designs
&gt; are just too different, and Sun are currently scratching their heads
&gt; because they have no idea how to deliver the interop strawman.

&gt; Dick, in describing OSGi you said that it was very powerful but
&gt; perhaps a little complex. You're right -- when you get into the
&gt; details of dynamic services coming and going, multithreading and so
&gt; on, there are a lot of things to think about, and maybe not every Java
&gt; programmer out there wants to think about those things. There's
&gt; certainly a lot of scope for somebody to come along and offer higher
&gt; level stuff on top of OSGi that hides the complexity, and that's
&gt; exactly what people like Interface21 are doing with their Spring-OSGi
&gt; project, or Eclipse is doing with its tooling support, or BEA are
&gt; doing with their (proprietary) microServices Architecture. What
&gt; doesn't make sense is to come along and offer a lower level
&gt; alternative that doesn't interoperate properly with OSGi.

&gt; Lastly, you mention that there's a lot of tension between Sun and IBM
&gt; over this. Of course, you're right, and there always has been tension
&gt; between those two. But look at the list of organisations backing OSGi,
&gt; and you find that there's actually tension between Sun and virtually
&gt; every other major player in the Java community. For example, BEA are
&gt; building ALL of their new products on OSGi; Oracle are deeply invested
&gt; in it. Interface21, I've already mentioned. Red Hat too: JBoss is
&gt; converting over to OSGi. Then you've got most of the mobile handset
&gt; manufacturers; Siemens, Motorola, Nokia, Ericsson, etc. I mention this
&gt; merely because IBM is quite unpopular amongst many Java developers --
&gt; Hani certainly despises them -- which makes it all too easy to dismiss
&gt; this whole issue as simply an evil plot by IBM to take over Java. I
&gt; don't like IBM much myself as it happens, but that's just not the
&gt; issue here.

&gt; I'm sorry, I've gone on too long. However, this is an important
&gt; discussion and I think the Posse needs to look into it a bit more
&gt; deeply than simply endorsing Hani Suleiman's opinion. I know that
&gt; Peter Kriens, the technical director of the OSGi Alliance, would love
&gt; to talk to you. What do you say?

&gt; Thanks,
&gt; Neil

&gt; Non-disclaimer: None of the companies mentioned is a client or
&gt; employer, nor do I have any financial interest in any of them.
">
</POST>
<POST>
<POSTER> Jess Holle &lt;je...@ptc.com&gt; </POSTER>
<POSTDATE> 2007-08-23T10:47:00 </POSTDATE>
Perhaps Sun is listening to developers who have said they're tired of
large, complex, over-engineered standards and want something simple and
to-the-point that works.

Taken one way OSGi could be considered the same sort of bloat and
complexity that folk like to heap criticism on Sun for about the JDK
(which has after all had to provide an extraordinarily high level of
compatibility for &gt;10 years).

I'm not saying OSGi is all these things or at least in an unjustified
sense, but I can definitely see two sides here.

<QUOTE PREVIOUSPOST="
obitus9 ... @gmail.com wrote:
&gt; I don't have much to add to the conversation, but I wanted to throw my
&gt; support behind a discussion of this topic on the Posse.  Admittedly, I
&gt; don't know all the ins and outs of the topic, but I don't understand
&gt; Sun's motivation in re-creating something that already exists and is
&gt; proven to work within the scope of the current Java language.  In my
&gt; book, multiple ways to do the same thing is good, a standardized way
&gt; to something is better, and a standard implemented by multiple,
&gt; independent (and hopefully open source) groups is the best case
&gt; scenario.  OSGi has achieved the best case scenario, so why start
&gt; over?  Is there some technical flaw in the OSGi that Sun is trying to
&gt; address or are they motivated solely by politics?

&gt; Cheers,
&gt; Josh

&gt; On Aug 20, 4:12 am, Neil Bartlett &lt;njbartl ... @gmail.com&gt; wrote:

&gt;&gt; Guys, I agree with you that its a shame we can't all just get along,
&gt;&gt; but this JSR 277 thing really is a problem, and I think Hani has the
&gt;&gt; wrong take on it. It's a pity that you have simply endorsed his
&gt;&gt; opinion without checking whether he actually knows what he's talking
&gt;&gt; about.

&gt;&gt; First of all, the analogy with Hibernate and JPA just doesn't fit.
&gt;&gt; Hibernate is a single product, and there are many reasons for not
&gt;&gt; wanting to base hugely important pieces of IT infrastructure on a
&gt;&gt; single product -- even an open source one. It makes a lot of sense to
&gt;&gt; develop a real, cross-vendor specification for O/R mapping within the
&gt;&gt; JCP, and to model that specification after the existing market leading
&gt;&gt; product (that is, Hibernate). Note that by the time JPA was published
&gt;&gt; as a specification, Hibernate was already an implementation of that
&gt;&gt; specification.

&gt;&gt; However, OSGi is not a single product, it is already a cross-vendor
&gt;&gt; specification, which happens to have three open source implementations
&gt;&gt; already, and a few commercial implementations. So JSR 277 is trying to
&gt;&gt; come up with a second standard.

&gt;&gt; Do we need a second standard? Well, if it turns out to be a competing,
&gt;&gt; incompatible standard, then absolutely not. Given how widely used OSGi
&gt;&gt; is now, this could cause a really damaging rift in Java.

&gt;&gt; What if it turns out to be a compatible and complementary standard?
&gt;&gt; That's what Sun are saying it will be, but you have to wonder in that
&gt;&gt; case what problem they are trying to solve. After all, OSGi exists and
&gt;&gt; works already, it's not like we're waiting for Java 7 to come along
&gt;&gt; with its various tweaks to the language and the JVM for OSGi to start
&gt;&gt; working properly. It seems highly odd therefore to build an &quot;enabling&quot;
&gt;&gt; layer underneath a technology that's already &quot;enabled&quot;. In the best
&gt;&gt; case then, JSR 277 will be something that OSGi can just ignore...
&gt;&gt; okay, there will be bits of it that might be useful like the
&gt;&gt; repository, but the core of JSR 277 just won't be that useful. For one
&gt;&gt; thing, there's no way OSGi is going to sacrifice compatibility with
&gt;&gt; older Java versions by making itself dependent on new features in Java
&gt;&gt; 7.

&gt;&gt; Will the best case happen? Will OSGi modules be able to interoperate
&gt;&gt; cleanly with JSR 277 modules? I've been following the JSR 277 EG
&gt;&gt; mailing list and it doesn't look all that hopeful. At JavaOne the
&gt;&gt; whole EG got together and Stanley Ho (the spec lead) promised to the
&gt;&gt; EG that Sun would deliver a &quot;strawman&quot; design for interoperability.
&gt;&gt; But they still haven't come up with anything to share with the rest of
&gt;&gt; the EG, and have refused to even let the other EG members participate
&gt;&gt; in designing the strawman. My strong suspicion -- and this is shared
&gt;&gt; with others involved in OSGi -- is that the two module system designs
&gt;&gt; are just too different, and Sun are currently scratching their heads
&gt;&gt; because they have no idea how to deliver the interop strawman.

&gt;&gt; Dick, in describing OSGi you said that it was very powerful but
&gt;&gt; perhaps a little complex. You're right -- when you get into the
&gt;&gt; details of dynamic services coming and going, multithreading and so
&gt;&gt; on, there are a lot of things to think about, and maybe not every Java
&gt;&gt; programmer out there wants to think about those things. There's
&gt;&gt; certainly a lot of scope for somebody to come along and offer higher
&gt;&gt; level stuff on top of OSGi that hides the complexity, and that's
&gt;&gt; exactly what people like Interface21 are doing with their Spring-OSGi
&gt;&gt; project, or Eclipse is doing with its tooling support, or BEA are
&gt;&gt; doing with their (proprietary) microServices Architecture. What
&gt;&gt; doesn't make sense is to come along and offer a lower level
&gt;&gt; alternative that doesn't interoperate properly with OSGi.

&gt;&gt; Lastly, you mention that there's a lot of tension between Sun and IBM
&gt;&gt; over this. Of course, you're right, and there always has been tension
&gt;&gt; between those two. But look at the list of organisations backing OSGi,
&gt;&gt; and you find that there's actually tension between Sun and virtually
&gt;&gt; every other major player in the Java community. For example, BEA are
&gt;&gt; building ALL of their new products on OSGi; Oracle are deeply invested
&gt;&gt; in it. Interface21, I've already mentioned. Red Hat too: JBoss is
&gt;&gt; converting over to OSGi. Then you've got most of the mobile handset
&gt;&gt; manufacturers; Siemens, Motorola, Nokia, Ericsson, etc. I mention this
&gt;&gt; merely because IBM is quite unpopular amongst many Java developers --
&gt;&gt; Hani certainly despises them -- which makes it all too easy to dismiss
&gt;&gt; this whole issue as simply an evil plot by IBM to take over Java. I
&gt;&gt; don't like IBM much myself as it happens, but that's just not the
&gt;&gt; issue here.

&gt;&gt; I'm sorry, I've gone on too long. However, this is an important
&gt;&gt; discussion and I think the Posse needs to look into it a bit more
&gt;&gt; deeply than simply endorsing Hani Suleiman's opinion. I know that
&gt;&gt; Peter Kriens, the technical director of the OSGi Alliance, would love
&gt;&gt; to talk to you. What do you say?

&gt;&gt; Thanks,
&gt;&gt; Neil

&gt;&gt; Non-disclaimer: None of the companies mentioned is a client or
&gt;&gt; employer, nor do I have any financial interest in any of them.
">
</POST>
<POST>
<POSTER> Casper Bang &lt;c...@brunata.dk&gt; </POSTER>
<POSTDATE> 2007-08-23T11:51:00 </POSTDATE>
It kinda reminds me of something we've seen before: EJB3 being just a
copy of Spring + Hibernate. I think Sun likes to be the one pulling
the strings, mitigating the open source aspect somewhat.
Then again, pragmatists such Stephen Colebourne (Joda-time) is the guy
behind finally giving us a decent official date API and Carsten Lentzh
(JGoodies) is part of the swing application (non-)framework. So lets
hope that this buttom-up approach is a growing tendency.

/Casper
</POST>
<POST>
<POSTER> Neil Bartlett &lt;njbartl...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-08-23T13:04:00 </POSTDATE>
Jess, I'm curious whether you think OSGi is a &quot;large, complex, over-
engineered standard&quot;, or whether you're just speculating about Sun's
motives? Because I assure you, OSGi is already the &quot;something simple
and to-the-point that works&quot;.

Casper, again I don't think that EJB3 and Spring+Hibernate is the
right analogy. Spring and Hibernate are products -- where can I
download the BEA implementation of Spring, or the IBM implementation,
or the GPL one? Spring is a great product but it doesn't have a
specification that somebody else can go and implement. Rod Johnson
argues that EJB3 is inferior to Spring, and he might be right, but
nevertheless many people prefer to work from a standard with a spec
than a product which can change arbitrarily in the future. However,
OSGi is already a standard with a specification and multiple
alternative implementations. It's both the &quot;de facto&quot; standard
(because so many people use it) and the &quot;de jure&quot; standard (because
it's been fully ratified under the JCP).

The situation with Joda-time is indeed similar. You can see the
original Date/Calendar APIs in Java as failed specifications, just as
EJB1 and EJB2 were failures. These broken specs drove developers to
adopt a product-based solution which was not broken. Eventually Sun
notices and builds new specs based on (in Spring's case, loosely based
on) the product solution. I agree that this kind of pragmatism is an
encouraging sign.

Regards
Neil

On Aug 23, 3:47 pm, Jess Holle &lt;je ... @ptc.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Perhaps Sun is listening to developers who have said they're tired of
&gt; large, complex, over-engineered standards and want something simple and
&gt; to-the-point that works.

&gt; Taken one way OSGi could be considered the same sort of bloat and
&gt; complexity that folk like to heap criticism on Sun for about the JDK
&gt; (which has after all had to provide an extraordinarily high level of
&gt; compatibility for &gt;10 years).

&gt; I'm not saying OSGi is all these things or at least in an unjustified
&gt; sense, but I can definitely see two sides here.

&gt; obitus9 ... @gmail.com wrote:
&gt; &gt; I don't have much to add to the conversation, but I wanted to throw my
&gt; &gt; support behind a discussion of this topic on the Posse.  Admittedly, I
&gt; &gt; don't know all the ins and outs of the topic, but I don't understand
&gt; &gt; Sun's motivation in re-creating something that already exists and is
&gt; &gt; proven to work within the scope of the current Java language.  In my
&gt; &gt; book, multiple ways to do the same thing is good, a standardized way
&gt; &gt; to something is better, and a standard implemented by multiple,
&gt; &gt; independent (and hopefully open source) groups is the best case
&gt; &gt; scenario.  OSGi has achieved the best case scenario, so why start
&gt; &gt; over?  Is there some technical flaw in the OSGi that Sun is trying to
&gt; &gt; address or are they motivated solely by politics?

&gt; &gt; Cheers,
&gt; &gt; Josh

&gt; &gt; On Aug 20, 4:12 am, Neil Bartlett &lt;njbartl ... @gmail.com&gt; wrote:

&gt; &gt;&gt; Guys, I agree with you that its a shame we can't all just get along,
&gt; &gt;&gt; but this JSR 277 thing really is a problem, and I think Hani has the
&gt; &gt;&gt; wrong take on it. It's a pity that you have simply endorsed his
&gt; &gt;&gt; opinion without checking whether he actually knows what he's talking
&gt; &gt;&gt; about.

&gt; &gt;&gt; First of all, the analogy with Hibernate and JPA just doesn't fit.
&gt; &gt;&gt; Hibernate is a single product, and there are many reasons for not
&gt; &gt;&gt; wanting to base hugely important pieces of IT infrastructure on a
&gt; &gt;&gt; single product -- even an open source one. It makes a lot of sense to
&gt; &gt;&gt; develop a real, cross-vendor specification for O/R mapping within the
&gt; &gt;&gt; JCP, and to model that specification after the existing market leading
&gt; &gt;&gt; product (that is, Hibernate). Note that by the time JPA was published
&gt; &gt;&gt; as a specification, Hibernate was already an implementation of that
&gt; &gt;&gt; specification.

&gt; &gt;&gt; However, OSGi is not a single product, it is already a cross-vendor
&gt; &gt;&gt; specification, which happens to have three open source implementations
&gt; &gt;&gt; already, and a few commercial implementations. So JSR 277 is trying to
&gt; &gt;&gt; come up with a second standard.

&gt; &gt;&gt; Do we need a second standard? Well, if it turns out to be a competing,
&gt; &gt;&gt; incompatible standard, then absolutely not. Given how widely used OSGi
&gt; &gt;&gt; is now, this could cause a really damaging rift in Java.

&gt; &gt;&gt; What if it turns out to be a compatible and complementary standard?
&gt; &gt;&gt; That's what Sun are saying it will be, but you have to wonder in that
&gt; &gt;&gt; case what problem they are trying to solve. After all, OSGi exists and
&gt; &gt;&gt; works already, it's not like we're waiting for Java 7 to come along
&gt; &gt;&gt; with its various tweaks to the language and the JVM for OSGi to start
&gt; &gt;&gt; working properly. It seems highly odd therefore to build an &quot;enabling&quot;
&gt; &gt;&gt; layer underneath a technology that's already &quot;enabled&quot;. In the best
&gt; &gt;&gt; case then, JSR 277 will be something that OSGi can just ignore...
&gt; &gt;&gt; okay, there will be bits of it that might be useful like the
&gt; &gt;&gt; repository, but the core of JSR 277 just won't be that useful. For one
&gt; &gt;&gt; thing, there's no way OSGi is going to sacrifice compatibility with
&gt; &gt;&gt; older Java versions by making itself dependent on new features in Java
&gt; &gt;&gt; 7.

&gt; &gt;&gt; Will the best case happen? Will OSGi modules be able to interoperate
&gt; &gt;&gt; cleanly with JSR 277 modules? I've been following the JSR 277 EG
&gt; &gt;&gt; mailing list and it doesn't look all that hopeful. At JavaOne the
&gt; &gt;&gt; whole EG got together and Stanley Ho (the spec lead) promised to the
&gt; &gt;&gt; EG that Sun would deliver a &quot;strawman&quot; design for interoperability.
&gt; &gt;&gt; But they still haven't come up with anything to share with the rest of
&gt; &gt;&gt; the EG, and have refused to even let the other EG members participate
&gt; &gt;&gt; in designing the strawman. My strong suspicion -- and this is shared
&gt; &gt;&gt; with others involved in OSGi -- is that the two module system designs
&gt; &gt;&gt; are just too different, and Sun are currently scratching their heads
&gt; &gt;&gt; because they have no idea how to deliver the interop strawman.

&gt; &gt;&gt; Dick, in describing OSGi you said that it was very powerful but
&gt; &gt;&gt; perhaps a little complex. You're right -- when you get into the
&gt; &gt;&gt; details of dynamic services coming and going, multithreading and so
&gt; &gt;&gt; on, there are a lot of things to think about, and maybe not every Java
&gt; &gt;&gt; programmer out there wants to think about those things. There's
&gt; &gt;&gt; certainly a lot of scope for somebody to come along and offer higher
&gt; &gt;&gt; level stuff on top of OSGi that hides the complexity, and that's
&gt; &gt;&gt; exactly what people like Interface21 are doing with their Spring-OSGi
&gt; &gt;&gt; project, or Eclipse is doing with its tooling support, or BEA are
&gt; &gt;&gt; doing with their (proprietary) microServices Architecture. What
&gt; &gt;&gt; doesn't make sense is to come along and offer a lower level
&gt; &gt;&gt; alternative that doesn't interoperate properly with OSGi.

&gt; &gt;&gt; Lastly, you mention that there's a lot of tension between Sun and IBM
&gt; &gt;&gt; over this. Of course, you're right, and there always has been tension
&gt; &gt;&gt; between those two. But look at the list of organisations backing OSGi,
&gt; &gt;&gt; and you find that there's actually tension between Sun and virtually
&gt; &gt;&gt; every other major player in the Java community. For example, BEA are
&gt; &gt;&gt; building ALL of their new products on OSGi; Oracle are deeply invested
&gt; &gt;&gt; in it. Interface21, I've already mentioned. Red Hat too: JBoss is
&gt; &gt;&gt; converting over to OSGi. Then you've got most of the mobile handset
&gt; &gt;&gt; manufacturers; Siemens, Motorola, Nokia, Ericsson, etc. I mention this
&gt; &gt;&gt; merely because IBM is quite unpopular amongst many Java developers --
&gt; &gt;&gt; Hani certainly despises them -- which makes it all too easy to dismiss
&gt; &gt;&gt; this whole issue as simply an evil plot by IBM to take over Java. I
&gt; &gt;&gt; don't like IBM much myself as it happens, but that's just not the
&gt; &gt;&gt; issue here.

&gt; &gt;&gt; I'm sorry, I've gone on too long. However, this is an important
&gt; &gt;&gt; discussion and I think the Posse needs to look into it a bit more
&gt; &gt;&gt; deeply than simply endorsing Hani Suleiman's opinion. I know that
&gt; &gt;&gt; Peter Kriens, the technical director of the OSGi Alliance, would love
&gt; &gt;&gt; to talk to you. What do you say?

&gt; &gt;&gt; Thanks,
&gt; &gt;&gt; Neil

&gt; &gt;&gt; Non-disclaimer: None of the companies mentioned is a client or
&gt; &gt;&gt; employer, nor do I have any financial interest in any of them.
">
</POST>
<POST>
<POSTER> Jess Holle &lt;je...@ptc.com&gt; </POSTER>
<POSTDATE> 2007-08-23T13:30:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Neil Bartlett wrote:
&gt; Jess, I'm curious whether you think OSGi is a &quot;large, complex, over-
&gt; engineered standard&quot;, or whether you're just speculating about Sun's
&gt; motives? Because I assure you, OSGi is already the &quot;something simple
&gt; and to-the-point that works&quot;.
">

I'm speaking to perception, not personal experience here and am purely
speculating on Sun's motives.

--
Jess Holle
</POST>
</TEXT>
</BODY>
</DOC>
