<DOC>
<DOCID> eng-NG-31-135587-9747749 </DOCID>
<DOCTYPE SOURCE="usenet"> USENET TEXT </DOCTYPE>
<DATETIME> 2008-01-13T23:19:00 </DATETIME>
<BODY>
<HEADLINE>
Wanted, a memory allocation package
</HEADLINE>
<TEXT>
<POST>
<POSTER> c...@tiac.net (Richard Harter) </POSTER>
<POSTDATE> 2008-01-13T23:19:00 </POSTDATE>
Can anyone point to a memory allocation package in C for C
programs that can be used in lieu of malloc/free or as a front
end for malloc/free?

My requirements are:

(a) The source should either be public domain or under a BSD type
licence - GPL is not acceptable.

(b) It should do boundary checking, i.e., it should do checking
for overwrites just outside allocated memory.

(c) It should be able to print out a map of allocated memory upon
demand.  This map should indicate the source of the allocation
request and duration for each allocated block of storage.

(d) It should support performance enhancement techniques such as
allocating from pools (many cheap allocations/one deallocation).

(e) It should be written in standard C90.

(f) It should be highly portable.  In particular it should run
under Windows, linux, and unix variants, and should work both on
32 bit and 64 bit architectures.

(g) It should be time-efficient and space-efficient (making due
allowance for source and duration data, and boundary checking).

I had written such a package and had it released under a BSD lite
licence in 1990.  In today's world it has its faults.  It is
written in 1980's K&amp;R C, and its support of performance
enhancement techniques is less than admirable.

I can rework the code and bring it into the 21st century if I
have to.  However it may chance that someone has written
something more modern in the interim.  Pointers to source code
for such would be welcome.
</POST>
<POST>
<POSTER> &quot;cr88192&quot; &lt;cr88...@hotmail.com&gt; </POSTER>
<POSTDATE> 2008-01-14T01:34:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Richard Harter&quot; &lt;c ... @tiac.net&gt; wrote in message
">

news:478adcad.67507906@news.sbtc.net ...

<QUOTE PREVIOUSPOST="
&gt; Can anyone point to a memory allocation package in C for C
&gt; programs that can be used in lieu of malloc/free or as a front
&gt; end for malloc/free?
">

&lt;snip, expectations...&gt;

<QUOTE PREVIOUSPOST="
&gt; I had written such a package and had it released under a BSD lite
&gt; licence in 1990.  In today's world it has its faults.  It is
&gt; written in 1980's K&amp;R C, and its support of performance
&gt; enhancement techniques is less than admirable.

&gt; I can rework the code and bring it into the 21st century if I
&gt; have to.  However it may chance that someone has written
&gt; something more modern in the interim.  Pointers to source code
&gt; for such would be welcome.
">

something like this is specialized enough that something like this may well
just be updated, as I am not sure anything like this, even if similar
exists, will all that closely match your list of expectations.

<QUOTE PREVIOUSPOST="

">
</POST>
<POST>
<POSTER> c...@tiac.net (Richard Harter) </POSTER>
<POSTDATE> 2008-01-14T02:56:00 </POSTDATE>
On Mon, 14 Jan 2008 16:34:52 +1000, &quot;cr88192&quot;

<QUOTE PREVIOUSPOST="
&lt;cr88 ... @hotmail.com&gt; wrote:

&gt;&quot;Richard Harter&quot; &lt;c ... @tiac.net&gt; wrote in message
&gt; news:478adcad.67507906@news.sbtc.net ...

&gt;&gt; Can anyone point to a memory allocation package in C for C
&gt;&gt; programs that can be used in lieu of malloc/free or as a front
&gt;&gt; end for malloc/free?

&gt;&lt;snip, expectations...&gt;

&gt;&gt; I had written such a package and had it released under a BSD lite
&gt;&gt; licence in 1990.  In today's world it has its faults.  It is
&gt;&gt; written in 1980's K&amp;R C, and its support of performance
&gt;&gt; enhancement techniques is less than admirable.

&gt;&gt; I can rework the code and bring it into the 21st century if I
&gt;&gt; have to.  However it may chance that someone has written
&gt;&gt; something more modern in the interim.  Pointers to source code
&gt;&gt; for such would be welcome.

&gt;something like this is specialized enough that something like this may well
&gt;just be updated, as I am not sure anything like this, even if similar
&gt;exists, will all that closely match your list of expectations.
">

It ooesn't seem all that specialized to me. Doug Lea's package
(which I believe is used in linux) does most of it, and lots of
stuff that I didn't ask for.  What it doesn't have is the
duration and source tags for allocated blocks.  Be that as it
may, thanks for answering.
</POST>
<POST>
<POSTER> &quot;Malcolm McLean&quot; &lt;regniz...@btinternet.com&gt; </POSTER>
<POSTDATE> 2008-01-14T16:27:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Richard Harter&quot; &lt;c ... @tiac.net&gt; wrote in message
&gt; Can anyone point to a memory allocation package in C for C
&gt; programs that can be used in lieu of malloc/free or as a front
&gt; end for malloc/free?

&gt; My requirements are:

&gt; (a) The source should either be public domain or under a BSD type
&gt; licence - GPL is not acceptable.

&gt; (b) It should do boundary checking, i.e., it should do checking
&gt; for overwrites just outside allocated memory.

&gt; (c) It should be able to print out a map of allocated memory upon
&gt; demand.  This map should indicate the source of the allocation
&gt; request and duration for each allocated block of storage.

&gt; (d) It should support performance enhancement techniques such as
&gt; allocating from pools (many cheap allocations/one deallocation).

&gt; (e) It should be written in standard C90.

&gt; (f) It should be highly portable.  In particular it should run
&gt; under Windows, linux, and unix variants, and should work both on
&gt; 32 bit and 64 bit architectures.

&gt; (g) It should be time-efficient and space-efficient (making due
&gt; allowance for source and duration data, and boundary checking).

&gt; I had written such a package and had it released under a BSD lite
&gt; licence in 1990.  In today's world it has its faults.  It is
&gt; written in 1980's K&amp;R C, and its support of performance
&gt; enhancement techniques is less than admirable.

&gt; I can rework the code and bring it into the 21st century if I
&gt; have to.  However it may chance that someone has written
&gt; something more modern in the interim.  Pointers to source code
&gt; for such would be welcome.
">

Check my website. The chapter &quot;Memory Games&quot; of the book &quot;Basic Algorithms&quot;
is free. There you have a malloc() / free().
b can quite easily be implemented. Just increase blocksize by one, set to
DEADBEEF, and pick up any non-dead beefs on the call to free().
c is tricky, d either already done for you or quite tricky, depending on
exactly what sort of enhancements you are looking for - I have a very fast
stack and  a fixed block allocator, but not integrated.

All the other requirements are pretty much met.

If you do use the package an email telling me how you got one would be
useful for future enehancements.

--
Free games and programming goodies.
http://www.personal.leeds.ac.uk/~bgy1mm
</POST>
<POST>
<POSTER> CBFalconer &lt;cbfalco...@yahoo.com&gt; </POSTER>
<POSTDATE> 2008-01-14T08:51:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Richard Harter wrote:

&gt; Can anyone point to a memory allocation package in C for C
&gt; programs that can be used in lieu of malloc/free or as a front
&gt; end for malloc/free?

&gt; My requirements are:

&gt; (a) The source should either be public domain or under a BSD type
&gt; licence - GPL is not acceptable.

&gt; (b) It should do boundary checking, i.e., it should do checking
&gt; for overwrites just outside allocated memory.
">

sort of

<QUOTE PREVIOUSPOST="
&gt; (c) It should be able to print out a map of allocated memory upon
&gt; demand.  This map should indicate the source of the allocation
&gt; request and duration for each allocated block of storage.
">

Doesn't keep source.  Could easily be added.

<QUOTE PREVIOUSPOST="
&gt; (d) It should support performance enhancement techniques such as
&gt; allocating from pools (many cheap allocations/one deallocation).
">

No.

<QUOTE PREVIOUSPOST="
&gt; (e) It should be written in standard C90.

&gt; (f) It should be highly portable.  In particular it should run
&gt; under Windows, linux, and unix variants, and should work both on
&gt; 32 bit and 64 bit architectures.

&gt; (g) It should be time-efficient and space-efficient (making due
&gt; allowance for source and duration data, and boundary checking).
">

Yes, yes, yes.  All operations are O(1).

Take a look at nmalloc, and the associated malldbg package.  It is
available both under GPL and under the DJGPP license (which is to
all purposes public domain).  It is written in almost solely
standard C90 (but a malloc package cannot be completely portable).
There are built in hooks to allow all sorts of customization, which
are used in the malldbg package.

It does require gcc (due to the variadic macros, used only in
initial debugging).

See &lt; http://cbfalconer.home.att.net/download/ &gt;

--
[mail]: Chuck F (cbfalconer at maineline dot net)
[page]: &lt; http://cbfalconer.home.att.net &gt;
Try the download section.

--
Posted via a free Usenet account from http://www.teranews.com
</POST>
<POST>
<POSTER> William Ahern &lt;will...@wilbur.25thandClement.com&gt; </POSTER>
<POSTDATE> 2008-01-16T02:50:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
CBFalconer &lt;cbfalco ... @yahoo.com&gt; wrote:
">

&lt;snip&gt;

<QUOTE PREVIOUSPOST="
&gt; It does require gcc (due to the variadic macros, used only in
&gt; initial debugging).
">

Off the top of my head (and w/ some reassuring checks on Google so I don't
eat my words) the following extant C compilers support C99 style variadic
macros:

PCC
TinyCC/TCC
Tendra
MSVC 2008

I believe DMC (Digital Mars) also supports C99 variadic macros. I think I
could go on and on if I tried.
</POST>
<POST>
<POSTER> CBFalconer &lt;cbfalco...@yahoo.com&gt; </POSTER>
<POSTDATE> 2008-01-16T18:06:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
William Ahern wrote:
&gt; CBFalconer &lt;cbfalco ... @yahoo.com&gt; wrote:

&gt; &lt;snip&gt;

&gt;&gt; It does require gcc (due to the variadic macros, used only in
&gt;&gt; initial debugging).

&gt; Off the top of my head (and w/ some reassuring checks on Google
&gt; so I don't eat my words) the following extant C compilers support
&gt; C99 style variadic macros:

&gt;   PCC   TinyCC/TCC    Tendra    MSVC-2008

&gt; I believe DMC (Digital Mars) also supports C99 variadic macros.
&gt; I think I could go on and on if I tried.
">

Doesn't matter.  nmalloc was written using the gcc format, which is
different from the C99 format.

--
[mail]: Chuck F (cbfalconer at maineline dot net)
[page]: &lt; http://cbfalconer.home.att.net &gt;
Try the download section.

--
Posted via a free Usenet account from http://www.teranews.com
</POST>
<POST>
<POSTER> &quot;Rod Pemberton&quot; &lt;do_not_h...@nohavenot.cmm&gt; </POSTER>
<POSTDATE> 2008-01-17T19:40:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Richard Harter&quot; &lt;c ... @tiac.net&gt; wrote in message
">

news:478adcad.67507906@news.sbtc.net ...

<QUOTE PREVIOUSPOST="
&gt; Can anyone point to a memory allocation package in C for C
&gt; programs that can be used in lieu of malloc/free or as a front
&gt; end for malloc/free?

&gt; My requirements are:
">

[conditions - enough filters to find primes...]

<QUOTE PREVIOUSPOST="
&gt; I had written such a package and had it released under a BSD lite
&gt; licence in 1990.  In today's world it has its faults.  It is
&gt; written in 1980's K&amp;R C, and its support of performance
&gt; enhancement techniques is less than admirable.
">

Dynamic Storage Allocator, Richard Harter, comp.lang.c, Nov. 11, 1990.
http://groups.google.com/group/comp.lang.c/msg/7da27dcbc6e2ace1

<QUOTE PREVIOUSPOST="
&gt; I can rework the code and bring it into the 21st century if I
&gt; have to.  However it may chance that someone has written
&gt; something more modern in the interim.  Pointers to source code
&gt; for such would be welcome.
">

You might look at the two memory allocators below.  I doubt they meet all
your requirements.  In fact, I think both originally pre-date what you
wrote.  But, they have been developed over a much longer time period too.

Doug Lea's dlmalloc
http://gee.cs.oswego.edu/dl/html/malloc.html

John Walker's bget
http://www.fourmilab.ch/bget/

You might also search for packages designed to find memory leaks.  They can
act as a front-end to malloc/free.

Rod Pemberton
PS.  I pulled this up via a Google search, so I just sub'd to post-n-go...
bye.
</POST>
<POST>
<POSTER> CBFalconer &lt;cbfalco...@yahoo.com&gt; </POSTER>
<POSTDATE> 2008-01-17T22:42:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Rod Pemberton wrote:
&gt; &quot;Richard Harter&quot; &lt;c ... @tiac.net&gt; wrote in message

&gt;&gt; Can anyone point to a memory allocation package in C for C
&gt;&gt; programs that can be used in lieu of malloc/free or as a front
&gt;&gt; end for malloc/free?

&gt; [conditions - enough filters to find primes...]

&gt;&gt; I had written such a package and had it released under a BSD lite
&gt;&gt; licence in 1990.  In today's world it has its faults.  It is
&gt;&gt; written in 1980's K&amp;R C, and its support of performance
&gt;&gt; enhancement techniques is less than admirable.

&gt; Dynamic Storage Allocator, Richard Harter, comp.lang.c, Nov. 11, 1990.
&gt; http://groups.google.com/group/comp.lang.c/msg/7da27dcbc6e2ace1

&gt;&gt; I can rework the code and bring it into the 21st century if I
&gt;&gt; have to.  However it may chance that someone has written
&gt;&gt; something more modern in the interim.  Pointers to source code
&gt;&gt; for such would be welcome.

&gt; You might look at the two memory allocators below.  I doubt they
&gt; meet all your requirements.  In fact, I think both originally
&gt; pre-date what you wrote.  But, they have been developed over a
&gt; much longer time period too.

&gt; Doug Lea's dlmalloc
&gt; http://gee.cs.oswego.edu/dl/html/malloc.html

&gt; John Walker's bget
&gt; http://www.fourmilab.ch/bget/

&gt; You might also search for packages designed to find memory leaks.
&gt; They can act as a front-end to malloc/free.
">

Once again nmalloc should work immediately on any 32 bit integer
Linux system with 8 bit bytes.  It does require gcc (due to the gcc
variadic macros, used only in initial debugging).

See &lt; http://cbfalconer.home.att.net/download/ &gt;

--
[mail]: Chuck F (cbfalconer at maineline dot net)
[page]: &lt; http://cbfalconer.home.att.net &gt;
Try the download section.

--
Posted via a free Usenet account from http://www.teranews.com
</POST>
<POST>
<POSTER> c...@tiac.net (Richard Harter) </POSTER>
<POSTDATE> 2008-01-21T12:21:00 </POSTDATE>
On Mon, 14 Jan 2008 08:51:56 -0500, CBFalconer

<QUOTE PREVIOUSPOST="
&lt;cbfalco ... @yahoo.com&gt; wrote:
&gt;Richard Harter wrote:

&gt;&gt; Can anyone point to a memory allocation package in C for C
&gt;&gt; programs that can be used in lieu of malloc/free or as a front
&gt;&gt; end for malloc/free?

&gt;&gt; My requirements are:

&gt;&gt; (a) The source should either be public domain or under a BSD type
&gt;&gt; licence - GPL is not acceptable.

&gt;&gt; (b) It should do boundary checking, i.e., it should do checking
&gt;&gt; for overwrites just outside allocated memory.

&gt;sort of

&gt;&gt; (c) It should be able to print out a map of allocated memory upon
&gt;&gt; demand.  This map should indicate the source of the allocation
&gt;&gt; request and duration for each allocated block of storage.

&gt;Doesn't keep source.  Could easily be added.

&gt;&gt; (d) It should support performance enhancement techniques such as
&gt;&gt; allocating from pools (many cheap allocations/one deallocation).

&gt;No.

&gt;&gt; (e) It should be written in standard C90.

&gt;&gt; (f) It should be highly portable.  In particular it should run
&gt;&gt; under Windows, linux, and unix variants, and should work both on
&gt;&gt; 32 bit and 64 bit architectures.

&gt;&gt; (g) It should be time-efficient and space-efficient (making due
&gt;&gt; allowance for source and duration data, and boundary checking).

&gt;Yes, yes, yes.  All operations are O(1).

&gt;Take a look at nmalloc, and the associated malldbg package.  It is
&gt;available both under GPL and under the DJGPP license (which is to
&gt;all purposes public domain).  It is written in almost solely
&gt;standard C90 (but a malloc package cannot be completely portable).
&gt;There are built in hooks to allow all sorts of customization, which
&gt;are used in the malldbg package.

&gt;It does require gcc (due to the variadic macros, used only in
&gt;initial debugging).

&gt;See &lt; http://cbfalconer.home.att.net/download/ &gt;
">

Thanks.  I've downloaded it and taken a look at it.  I did decide
to revise the 1990 package, so I won't use your package as is.
However your package is carefully written and I am learning from
reading it.
</POST>
<POST>
<POSTER> c...@tiac.net (Richard Harter) </POSTER>
<POSTDATE> 2008-01-21T12:28:00 </POSTDATE>
On Mon, 14 Jan 2008 21:27:34 -0000, &quot;Malcolm McLean&quot;

<QUOTE PREVIOUSPOST="
&lt;regniz ... @btinternet.com&gt; wrote:

&gt;&quot;Richard Harter&quot; &lt;c ... @tiac.net&gt; wrote in message
&gt;&gt; Can anyone point to a memory allocation package in C for C
&gt;&gt; programs that can be used in lieu of malloc/free or as a front
&gt;&gt; end for malloc/free?

&gt;&gt; My requirements are:

&gt;&gt; (a) The source should either be public domain or under a BSD type
&gt;&gt; licence - GPL is not acceptable.

&gt;&gt; (b) It should do boundary checking, i.e., it should do checking
&gt;&gt; for overwrites just outside allocated memory.

&gt;&gt; (c) It should be able to print out a map of allocated memory upon
&gt;&gt; demand.  This map should indicate the source of the allocation
&gt;&gt; request and duration for each allocated block of storage.

&gt;&gt; (d) It should support performance enhancement techniques such as
&gt;&gt; allocating from pools (many cheap allocations/one deallocation).

&gt;&gt; (e) It should be written in standard C90.

&gt;&gt; (f) It should be highly portable.  In particular it should run
&gt;&gt; under Windows, linux, and unix variants, and should work both on
&gt;&gt; 32 bit and 64 bit architectures.

&gt;&gt; (g) It should be time-efficient and space-efficient (making due
&gt;&gt; allowance for source and duration data, and boundary checking).

&gt;&gt; I had written such a package and had it released under a BSD lite
&gt;&gt; licence in 1990.  In today's world it has its faults.  It is
&gt;&gt; written in 1980's K&amp;R C, and its support of performance
&gt;&gt; enhancement techniques is less than admirable.

&gt;&gt; I can rework the code and bring it into the 21st century if I
&gt;&gt; have to.  However it may chance that someone has written
&gt;&gt; something more modern in the interim.  Pointers to source code
&gt;&gt; for such would be welcome.

&gt;Check my website. The chapter &quot;Memory Games&quot; of the book &quot;Basic Algorithms&quot;
&gt;is free. There you have a malloc() / free().
&gt;b can quite easily be implemented. Just increase blocksize by one, set to
&gt;DEADBEEF, and pick up any non-dead beefs on the call to free().
&gt;c is tricky, d either already done for you or quite tricky, depending on
&gt;exactly what sort of enhancements you are looking for - I have a very fast
&gt;stack and  a fixed block allocator, but not integrated.

&gt;All the other requirements are pretty much met.

&gt;If you do use the package an email telling me how you got one would be
&gt;useful for future enehancements.
">

Thanks for the suggestion; it turns out that I am going with
doing a revision instead.  I am looking at what you did anyway.
</POST>
<POST>
<POSTER> c...@tiac.net (Richard Harter) </POSTER>
<POSTDATE> 2008-01-21T13:15:00 </POSTDATE>
On Thu, 17 Jan 2008 19:40:43 -0500, &quot;Rod Pemberton&quot;

<QUOTE PREVIOUSPOST="
&lt;do_not_h ... @nohavenot.cmm&gt; wrote:

&gt;&quot;Richard Harter&quot; &lt;c ... @tiac.net&gt; wrote in message
&gt; news:478adcad.67507906@news.sbtc.net ...

&gt;&gt; Can anyone point to a memory allocation package in C for C
&gt;&gt; programs that can be used in lieu of malloc/free or as a front
&gt;&gt; end for malloc/free?

&gt;&gt; My requirements are:

&gt;[conditions - enough filters to find primes...]
">

A daunting sounding list, wasn't it.  There are good reasons for
the requirements, though.

<QUOTE PREVIOUSPOST="
&gt;&gt; I had written such a package and had it released under a BSD lite
&gt;&gt; licence in 1990.  In today's world it has its faults.  It is
&gt;&gt; written in 1980's K&amp;R C, and its support of performance
&gt;&gt; enhancement techniques is less than admirable.

&gt;Dynamic Storage Allocator, Richard Harter, comp.lang.c, Nov. 11, 1990.
&gt; http://groups.google.com/group/comp.lang.c/msg/7da27dcbc6e2ace1

&gt;&gt; I can rework the code and bring it into the 21st century if I
&gt;&gt; have to.  However it may chance that someone has written
&gt;&gt; something more modern in the interim.  Pointers to source code
&gt;&gt; for such would be welcome.

&gt;You might look at the two memory allocators below.  I doubt they meet all
&gt;your requirements.  In fact, I think both originally pre-date what you
&gt;wrote.  But, they have been developed over a much longer time period too.
">

It turns out my code predated both; it was originally developed
in 1983.  According to their documentation the two you mention
both started development in 1987.  However it is true that they
have been worked on for a much longer time period.

<QUOTE PREVIOUSPOST="
&gt;Doug Lea's dlmalloc
&gt; http://gee.cs.oswego.edu/dl/html/malloc.html
">

I've looked at this one.  It looks good, but it's about 5500
lines of code (much of it comments).  Modifying it would be
non-trivial.  Judging from the comments he used much the same
allocation strategy that I did.  One thing that I picked up was
that he had discovered that using a large block avail list was
too much of a short cut; use a better lookup method instead.

<QUOTE PREVIOUSPOST="
&gt;John Walker's bget
&gt; http://www.fourmilab.ch/bget/
">

I'm looking at this one now.

<QUOTE PREVIOUSPOST="
&gt;You might also search for packages designed to find memory leaks.  They can
&gt;act as a front-end to malloc/free.
">

The 1990 code is a front end to malloc/free; IMO it is a lot more
portable to let malloc take care of getting large chunks of
memory (slabs) from the system.
</POST>
</TEXT>
</BODY>
</DOC>
