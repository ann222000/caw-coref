<DOC>
<DOCID> eng-NG-31-134522-9621818 </DOCID>
<DOCTYPE SOURCE="usenet"> USENET TEXT </DOCTYPE>
<DATETIME> 2007-10-31T11:47:00 </DATETIME>
<BODY>
<HEADLINE>
XML apis
</HEADLINE>
<TEXT>
<POST>
<POSTER> Joshua Marinacci &lt;jos...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-10-31T11:47:00 </POSTDATE>
Just to take the topic away from desktop java dying on the mac, for a
second. :)

What XML reading APIs do you use?  I'm dealing with simple
webservices more and more, and my basic task is usually grabbing XML
from a URL and parsing it.  Using the DOM in loops my code has always
been super verbose so I've started using XPath more, but it still
feels a bit crufty because there's a lot of casting going on and no
support for generics.  When you have have to parse some XML what API
do you use?  JDOM? Straight DOM or SAX? XPath?

thanks,
Josh
</POST>
<POST>
<POSTER> &quot;Tom Copeland&quot; &lt;t...@infoether.com&gt; </POSTER>
<POSTDATE> 2007-10-31T12:18:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&gt; What XML reading APIs do you use?  I'm dealing with simple
&gt; webservices more and more, and my basic task is usually grabbing XML
&gt; from a URL and parsing it.  Using the DOM in loops my code has always
&gt; been super verbose so I've started using XPath more, but it still
&gt; feels a bit crufty because there's a lot of casting going on and no
&gt; support for generics.  When you have have to parse some XML what API
&gt; do you use?  JDOM? Straight DOM or SAX? XPath?
">

XPath all the way.  It's a great way to go poking around a DOM, especially
since you can check attribute values and look up and down axes and so forth.
This book helped me a lot:

http://www.oreilly.com/catalog/xpathpointer/

Yours,

Tom
</POST>
<POST>
<POSTER> Casper Bang &lt;c...@brunata.dk&gt; </POSTER>
<POSTDATE> 2007-10-31T12:37:00 </POSTDATE>
Not a big fan of XML API verbosity and parser choices, so Castor
transparent XML-&gt;POJO mapping when I can get away with it and it makes
sence.

/Casper

On Oct 31, 4:47 pm, Joshua Marinacci &lt;jos ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Just to take the topic away from desktop java dying on the mac, for a
&gt; second. :)

&gt; What XML reading APIs do you use?  I'm dealing with simple
&gt; webservices more and more, and my basic task is usually grabbing XML
&gt; from a URL and parsing it.  Using the DOM in loops my code has always
&gt; been super verbose so I've started using XPath more, but it still
&gt; feels a bit crufty because there's a lot of casting going on and no
&gt; support for generics.  When you have have to parse some XML what API
&gt; do you use?  JDOM? Straight DOM or SAX? XPath?

&gt; thanks,
&gt;         Josh
">
</POST>
<POST>
<POSTER> Mac &lt;wmacgy...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-10-31T12:42:00 </POSTDATE>
For a lot of XML parsing, I've actually been using groovy. Most of my
interaction
with XML data from web service similar to what you mentioned, grab it
from a XML URL  and parse it.

I can usually do that in a few lines of groovy script.

On Oct 31, 11:47 am, Joshua Marinacci &lt;jos ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Just to take the topic away from desktop java dying on the mac, for a
&gt; second. :)

&gt; What XML reading APIs do you use?  I'm dealing with simple
&gt; webservices more and more, and my basic task is usually grabbing XML
&gt; from a URL and parsing it.  Using the DOM in loops my code has always
&gt; been super verbose so I've started using XPath more, but it still
&gt; feels a bit crufty because there's a lot of casting going on and no
&gt; support for generics.  When you have have to parse some XML what API
&gt; do you use?  JDOM? Straight DOM or SAX? XPath?
">
</POST>
<POST>
<POSTER> Joshua Marinacci &lt;jos...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-10-31T12:46:00 </POSTDATE>
Could you provide an example of how you use it?
ex: I'm getting back data that looks like this:

&lt;response&gt;
&lt;weather&gt;
&lt;station&gt;
&lt;id&gt;foo&lt;/id&gt;
&lt;temp&gt;43&lt;/temp&gt;
&lt;/station&gt;
&lt;station&gt; next station.....

&lt;/weather&gt;
&lt;/response&gt;

How would you map that to a POJO?

- josh
On Oct 31, 2007, at 9:37 AM, Casper Bang wrote:

<QUOTE PREVIOUSPOST="
&gt; Not a big fan of XML API verbosity and parser choices, so Castor
&gt; transparent XML-&gt;POJO mapping when I can get away with it and it makes
&gt; sence.

&gt; /Casper

&gt; On Oct 31, 4:47 pm, Joshua Marinacci &lt;jos ... @gmail.com&gt; wrote:
&gt;&gt; Just to take the topic away from desktop java dying on the mac, for a
&gt;&gt; second. :)

&gt;&gt; What XML reading APIs do you use?  I'm dealing with simple
&gt;&gt; webservices more and more, and my basic task is usually grabbing XML
&gt;&gt; from a URL and parsing it.  Using the DOM in loops my code has always
&gt;&gt; been super verbose so I've started using XPath more, but it still
&gt;&gt; feels a bit crufty because there's a lot of casting going on and no
&gt;&gt; support for generics.  When you have have to parse some XML what API
&gt;&gt; do you use?  JDOM? Straight DOM or SAX? XPath?

&gt;&gt; thanks,
&gt;&gt;         Josh
">
</POST>
<POST>
<POSTER> &quot;Todd Costella&quot; &lt;Todd.Coste...@Entero.com&gt; </POSTER>
<POSTDATE> 2007-10-31T13:21:00 </POSTDATE>
Add another vote for Groovy. The XMLBuilder/XMLSlurper/XMLParser
implementations are magical.

&lt;response&gt;
&lt;weather&gt;
&lt;station&gt;
&lt;id&gt;foo&lt;/id&gt;
&lt;temp&gt;43&lt;/temp&gt;
&lt;/station&gt;
&lt;station&gt; next station.....

&lt;/weather&gt;
&lt;/response&gt;

Using your example above we could do something like
def response = new
XmlSlurper().parse(' http://somedatasource.com/weather' )
response.weather.children().each{ station-&gt;
println &quot;Station: ${station.id.text} Temp:{station.temp.text}&quot;

<QUOTE PREVIOUSPOST="
}
-----Original Message-----
From: javaposse@googlegroups.com [mailto:javaposse@googlegroups.com] On

Behalf Of Mac
Sent: Wednesday, October 31, 2007 10:42 AM
To: The Java Posse
Subject: [The Java Posse] Re: XML apis

For a lot of XML parsing, I've actually been using groovy. Most of my
interaction
with XML data from web service similar to what you mentioned, grab it
from a XML URL  and parse it.

I can usually do that in a few lines of groovy script.

On Oct 31, 11:47 am, Joshua Marinacci &lt;jos ... @gmail.com&gt; wrote:
&gt; Just to take the topic away from desktop java dying on the mac, for a
&gt; second. :)

&gt; What XML reading APIs do you use?  I'm dealing with simple
&gt; webservices more and more, and my basic task is usually grabbing XML
&gt; from a URL and parsing it.  Using the DOM in loops my code has always
&gt; been super verbose so I've started using XPath more, but it still
&gt; feels a bit crufty because there's a lot of casting going on and no
&gt; support for generics.  When you have have to parse some XML what API
&gt; do you use?  JDOM? Straight DOM or SAX? XPath?
">
</POST>
<POST>
<POSTER> Joshua Marinacci &lt;jos...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-10-31T13:50:00 </POSTDATE>
I think it might be instructive to post sample code that demonstrates
different techniques and APIs.  Here is what I'm doing with XPath.
The XPath API in 1.5 actually makes this fairly compact, but I think
it could be better:

The webservice at ws.geonames.org returns xml that looks like this:

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;
&lt;geonames&gt;
&lt;entry&gt;
&lt;lang&gt;en&lt;/lang&gt;
&lt;title&gt;London Aquarium&lt;/title&gt;
&lt;summary&gt;on the South Bank of the River Thames in central London,
near the London Eye. The aquaruim claims that a million visitors a
year view its displays. It is a collection of water tanks showing
around 350 species of fish. The aquarium includes three floors and 14
different zones (freshwater stream, Atlantic upper, rivers and ponds,
Pacific upper, Indian Ocean, Atlantic lower, touch pool, (...)&lt;/summary&gt;
&lt;feature&gt;landmark&lt;/feature&gt;
&lt;population&gt;0&lt;/population&gt;
&lt;elevation&gt;0&lt;/elevation&gt;
&lt;lat&gt;51.5019&lt;/lat&gt;
&lt;lng&gt;-0.1189&lt;/lng&gt;
&lt;wikipediaUrl&gt; http://en.wikipedia.org/wiki/London_Aquarium &lt;/
wikipediaUrl&gt;
&lt;thumbnailImg&gt; http://www.geonames.org/img/wikipedia/9000/
thumb-8533-100.jpg&lt;/thumbnailImg&gt;
&lt;/entry&gt;
&lt;entry&gt;

And here is the code I'm using:
URL url = new URL(&quot; http://ws.geonames.org/
wikipediaSearch?q=&quot;+jTextField1.getText()+&quot;&amp;maxRows=10&quot;);
XPath xpath = XPathFactory.newInstance().newXPath();
NodeList list = (NodeList) xpath.evaluate(&quot;//entry&quot;,
new InputSource(url.openStream()),
XPathConstants.NODESET);
Set&lt;WikiWaypoint&gt; waypoints = new
HashSet&lt;WikiMashupView.WikiWaypoint&gt;();
for(int i = 0; i &lt; list.getLength(); i++) {
Node node = list.item(i);
String title = (String) xpath.evaluate(&quot;title/
text()&quot;, node, XPathConstants.STRING);
Double lat = (Double) xpath.evaluate(&quot;lat/text
()&quot;, node, XPathConstants.NUMBER);
Double lon = (Double) xpath.evaluate(&quot;lng/text
()&quot;, node, XPathConstants.NUMBER);
waypoints.add(new WikiWaypoint(lat, lon, title));
}
return waypoints;

WikiWaypoint is a POJO that holds lat, lon, &amp; title properties.

It's fairly compact but feels like it could be better.

Josh

On Oct 31, 2007, at 9:42 AM, Mac wrote:

<QUOTE PREVIOUSPOST="
&gt; For a lot of XML parsing, I've actually been using groovy. Most of my
&gt; interaction
&gt; with XML data from web service similar to what you mentioned, grab it
&gt; from a XML URL  and parse it.

&gt; I can usually do that in a few lines of groovy script.

&gt; On Oct 31, 11:47 am, Joshua Marinacci &lt;jos ... @gmail.com&gt; wrote:
&gt;&gt; Just to take the topic away from desktop java dying on the mac, for a
&gt;&gt; second. :)

&gt;&gt; What XML reading APIs do you use?  I'm dealing with simple
&gt;&gt; webservices more and more, and my basic task is usually grabbing XML
&gt;&gt; from a URL and parsing it.  Using the DOM in loops my code has always
&gt;&gt; been super verbose so I've started using XPath more, but it still
&gt;&gt; feels a bit crufty because there's a lot of casting going on and no
&gt;&gt; support for generics.  When you have have to parse some XML what API
&gt;&gt; do you use?  JDOM? Straight DOM or SAX? XPath?
">
</POST>
<POST>
<POSTER> Casper Bang &lt;c...@brunata.dk&gt; </POSTER>
<POSTDATE> 2007-10-31T13:58:00 </POSTDATE>
Hi Josh,

The power of Castor is that it maps via reflection using a simple
default mapping sceme/convension. You just define your POJO's and then
do something like:

Response response = (Response)new Unmarshaller().unmarshal( new
InputSource( weatherFeedInputStream ) );

I've actually changed to using XStream from Thoughtworks due to
certain bennefits (hmm pretty print, don't remember exactly), but it
works much the same way:
http://xstream.codehaus.org/tutorial.html

/Casper

On Oct 31, 5:46 pm, Joshua Marinacci &lt;jos ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Could you provide an example of how you use it?
&gt; ex: I'm getting back data that looks like this:

&gt; &lt;response&gt;
&gt;    &lt;weather&gt;
&gt;     &lt;station&gt;
&gt;      &lt;id&gt;foo&lt;/id&gt;
&gt;      &lt;temp&gt;43&lt;/temp&gt;
&gt;     &lt;/station&gt;
&gt;     &lt;station&gt; next station.....

&gt; &lt;/weather&gt;
&gt; &lt;/response&gt;

&gt; How would you map that to a POJO?

&gt; - josh
&gt; On Oct 31, 2007, at 9:37 AM, Casper Bang wrote:

&gt; &gt; Not a big fan of XML API verbosity and parser choices, so Castor
&gt; &gt; transparent XML-&gt;POJO mapping when I can get away with it and it makes
&gt; &gt; sence.

&gt; &gt; /Casper

&gt; &gt; On Oct 31, 4:47 pm, Joshua Marinacci &lt;jos ... @gmail.com&gt; wrote:
&gt; &gt;&gt; Just to take the topic away from desktop java dying on the mac, for a
&gt; &gt;&gt; second. :)

&gt; &gt;&gt; What XML reading APIs do you use?  I'm dealing with simple
&gt; &gt;&gt; webservices more and more, and my basic task is usually grabbing XML
&gt; &gt;&gt; from a URL and parsing it.  Using the DOM in loops my code has always
&gt; &gt;&gt; been super verbose so I've started using XPath more, but it still
&gt; &gt;&gt; feels a bit crufty because there's a lot of casting going on and no
&gt; &gt;&gt; support for generics.  When you have have to parse some XML what API
&gt; &gt;&gt; do you use?  JDOM? Straight DOM or SAX? XPath?

&gt; &gt;&gt; thanks,
&gt; &gt;&gt;         Josh
">
</POST>
<POST>
<POSTER> &quot;Todd Costella&quot; &lt;Todd.Coste...@Entero.com&gt; </POSTER>
<POSTDATE> 2007-10-31T14:05:00 </POSTDATE>
Here is a groovy implementation.

The class decl is just a simpile container for the attributes. Could be external but I wanted to express the entire solution in a script you could run.

This will run unmodified in the GroovyConsole

&lt;start of code&gt;

class WikiWaypoint{

def name,lat,lng

String toString(){ return &quot;Name:${name} Latitude:${lat} Longitude:${lng}&quot; }

<QUOTE PREVIOUSPOST="
}
">

def geonames = new XmlSlurper().parse(' http://ws.geonames.org/postalCodeSearch?postalcode=9011&amp;maxRows;=10' )

def waypoints = []

geonames.code.each{

def ww = new WikiWaypoint(name:it.name,lat:it.lat,lng:it.lng)

waypoints &lt;&lt; ww

<QUOTE PREVIOUSPOST="
}
">

waypoints.each{println it}

&lt;end of code&gt;

&lt;output&gt;

Name:St. Gallen Latitude:47.4666667 Longitude:9.4

Name:Gy?r Latitude:47.6076389 Longitude:17.7819444375

Name:Tromsø Latitude:69.6666667 Longitude:18.9666667

Name:Ettelbruck Latitude:49.8475 Longitude:6.1041667

Name:Irnsum (Jirnsum) Latitude:53.09166665 Longitude:5.75

________________________________

From: javaposse@googlegroups.com [mailto:javaposse@googlegroups.com] On Behalf Of Joshua Marinacci
Sent: Wednesday, October 31, 2007 11:50 AM
To: javaposse@googlegroups.com
Subject: [The Java Posse] Re: XML apis

I think it might be instructive to post sample code that demonstrates different techniques and APIs.  Here is what I'm doing with XPath.  The XPath API in 1.5 actually makes this fairly compact, but I think it could be better:

The webservice at ws.geonames.org returns xml that looks like this:

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;

&lt;geonames&gt;

&lt;entry&gt;

&lt;lang&gt;en&lt;/lang&gt;

&lt;title&gt;London Aquarium&lt;/title&gt;

&lt;summary&gt;on the South Bank of the River Thames in central London, near the London Eye. The aquaruim claims that a million visitors a year view its displays. It is a collection of water tanks showing around 350 species of fish. The aquarium includes three floors and 14 different zones (freshwater stream, Atlantic upper, rivers and ponds, Pacific upper, Indian Ocean, Atlantic lower, touch pool, (...)&lt;/summary&gt;

&lt;feature&gt;landmark&lt;/feature&gt;

&lt;population&gt;0&lt;/population&gt;

&lt;elevation&gt;0&lt;/elevation&gt;

&lt;lat&gt;51.5019&lt;/lat&gt;

&lt;lng&gt;-0.1189&lt;/lng&gt;

&lt;wikipediaUrl&gt; http://en.wikipedia.org/wiki/London_Aquarium &lt;/wikipediaUrl&gt;

&lt;thumbnailImg&gt; http://www.geonames.org/img/wikipedia/9000/thumb-8533-100.jpg &lt;/thumbnailImg&gt;

&lt;/entry&gt;

&lt;entry&gt;

And here is the code I'm using:

URL url = new URL(&quot; http://ws.geonames.org/wikipediaSearch?q= &quot;+jTextField1.getText()+&quot;&amp;maxRows=10&quot;);

XPath xpath = XPathFactory.newInstance().newXPath();

NodeList list = (NodeList) xpath.evaluate(&quot;//entry&quot;,

new InputSource(url.openStream()),

XPathConstants.NODESET);

Set&lt;WikiWaypoint&gt; waypoints = new HashSet&lt;WikiMashupView.WikiWaypoint&gt;();

for(int i = 0; i &lt; list.getLength(); i++) {

Node node = list.item(i);

String title = (String) xpath.evaluate(&quot;title/text()&quot;, node, XPathConstants.STRING);

Double lat = (Double) xpath.evaluate(&quot;lat/text()&quot;, node, XPathConstants.NUMBER);

Double lon = (Double) xpath.evaluate(&quot;lng/text()&quot;, node, XPathConstants.NUMBER);

waypoints.add(new WikiWaypoint(lat, lon, title));

}

return waypoints;

WikiWaypoint is a POJO that holds lat, lon, &amp; title properties.

It's fairly compact but feels like it could be better.

Josh

On Oct 31, 2007, at 9:42 AM, Mac wrote:

For a lot of XML parsing, I've actually been using groovy. Most of my

interaction

with XML data from web service similar to what you mentioned, grab it

from a XML URL  and parse it.

I can usually do that in a few lines of groovy script.

On Oct 31, 11:47 am, Joshua Marinacci &lt;jos ... @gmail.com&gt; wrote:

Just to take the topic away from desktop java dying on the mac, for a

second. :)

What XML reading APIs do you use?  I'm dealing with simple

webservices more and more, and my basic task is usually grabbing XML

from a URL and parsing it.  Using the DOM in loops my code has always

been super verbose so I've started using XPath more, but it still

feels a bit crufty because there's a lot of casting going on and no

support for generics.  When you have have to parse some XML what API

do you use?  JDOM? Straight DOM or SAX? XPath?
</POST>
<POST>
<POSTER> marcuso &lt;marc...@web.de&gt; </POSTER>
<POSTDATE> 2007-10-31T17:16:00 </POSTDATE>
On Oct 31, 7:05 pm, &quot;Todd Costella&quot; &lt;Todd.Coste ... @Entero.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Here is a groovy implementation.
">

Bummer. You were faster and it's funny to see you came up with a
rather identical solution.
Here's mine:

class WikiWayPoint {
def lat
def lon
def title
String toString() {
&quot;($lat,$lon) $title&quot;
}

<QUOTE PREVIOUSPOST="
}
">

// this should be passed via the cli
def q = 'Hamburg'
def r = 10

def queryUrl = &quot; http://ws.geonames.org/wikipediaSearch?q=$q&amp;maxRows;=
$r&quot;

def wikiWayPoints = []
def geonames = new groovy.util.XmlParser().parseText(new
URL(queryUrl).getText())
geonames.each { entry -&gt;
wikiWayPoints &lt;&lt; new WikiWayPoint(lat:entry.lat.value[0],
lon:entry.lng.value[0], title:entry.title.value[0])

<QUOTE PREVIOUSPOST="
}
">

wikiWayPoints.each { println it }

Any groovier solution anybody?

Marcus
</POST>
<POST>
<POSTER> &quot;Todd Costella&quot; &lt;Todd.Coste...@Entero.com&gt; </POSTER>
<POSTDATE> 2007-10-31T18:10:00 </POSTDATE>
Great minds and all that ;)

<QUOTE PREVIOUSPOST="
-----Original Message-----
From: javaposse@googlegroups.com [mailto:javaposse@googlegroups.com] On

Behalf Of marcuso
Sent: Wednesday, October 31, 2007 3:16 PM
To: The Java Posse
Subject: [The Java Posse] Re: XML apis

On Oct 31, 7:05 pm, &quot;Todd Costella&quot; &lt;Todd.Coste ... @Entero.com&gt; wrote:
&gt; Here is a groovy implementation.

Bummer. You were faster and it's funny to see you came up with a
rather identical solution.
Here's mine:

class WikiWayPoint {
def lat
def lon
def title
String toString() {
&quot;($lat,$lon) $title&quot;
}
}

// this should be passed via the cli
def q = 'Hamburg'
def r = 10

def queryUrl = &quot; http://ws.geonames.org/wikipediaSearch?q=$q&amp;maxRows;=
$r&quot;

def wikiWayPoints = []
def geonames = new groovy.util.XmlParser().parseText(new
URL(queryUrl).getText())
geonames.each { entry -&gt;
wikiWayPoints &lt;&lt; new WikiWayPoint(lat:entry.lat.value[0],
lon:entry.lng.value[0], title:entry.title.value[0])
}

wikiWayPoints.each { println it }

Any groovier solution anybody?

Marcus
">
</POST>
<POST>
<POSTER> &quot;Mark Derricutt&quot; &lt;m...@talios.com&gt; </POSTER>
<POSTDATE> 2007-10-31T19:07:00 </POSTDATE>
What does &quot;code&quot; point to in this instance?  As opposed to geonames.each in
Marcus' example?

On 11/1/07, Todd Costella &lt;Todd.Coste ... @entero.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; def waypoints = []

&gt; geonames.code.each{

&gt;    def ww = new WikiWaypoint(name:it.name,lat:it.lat,lng:it.lng)

&gt;    waypoints &lt;&lt; ww
">
</POST>
<POST>
<POSTER> &quot;Todd Costella&quot; &lt;Todd.Coste...@Entero.com&gt; </POSTER>
<POSTDATE> 2007-11-01T10:14:00 </POSTDATE>
code is actually one of the tags in the resultant xml document. The
response that comes out that webservice is:

&lt;geonames&gt;

&lt;totalResultsCount&gt;5&lt;/totalResultsCount&gt;

&lt;code&gt;

&lt;postalcode&gt;9011&lt;/postalcode&gt;

&lt;name&gt;St. Gallen&lt;/name&gt;

&lt;countryCode&gt;CH&lt;/countryCode&gt;

&lt;lat&gt;47.4666667&lt;/lat&gt;

&lt;lng&gt;9.4&lt;/lng&gt;

&lt;adminCode1&gt;SG&lt;/adminCode1&gt;

&lt;adminName1&gt;St. Gallen&lt;/adminName1&gt;

&lt;adminCode2&gt;1701&lt;/adminCode2&gt;

&lt;adminName2&gt;Bezirk St. Gallen&lt;/adminName2&gt;

&lt;adminCode3&gt;3203&lt;/adminCode3&gt;

&lt;adminName3&gt;St. Gallen&lt;/adminName3&gt;

&lt;/code&gt;

&lt;code&gt;

&lt;/code&gt;

&lt;geonames&gt;

The nice things about using a dynamic language like groovy is that we
can refer to the document via its tags explicitly.

e.g.

In the example this line:

geonames.code.each{...}

is really where the magic is (from my perspective). We refer to the
document structure explicitly geonames.code and the each is an iterator
that takes a closure as a parameter. The closure has an implicit
parameter called it (short for item).

In Marcus' case he explicitly declared the variable entry, as he was
iterating up one level in the document (the unfortunately named &quot;code&quot;
tag), was passed as a parameter to the each closure. As the code node
was passed in to the closure via the named parameter entry, he can now
reference entry.postalcode, entry.name etc.

The short answer is code isn't a magic keyword or anything; it just
turns out to be an element in the response from the web service.

If you haven't seen groovy or ruby before it can look a bit odd, but
hopefully from this small example folks can see the power. There are a
few other features of groovy that both Marcus and I used, I would be
happy to attempt an explination.

Todd

________________________________

From: javaposse@googlegroups.com [mailto:javaposse@googlegroups.com] On
Behalf Of Mark Derricutt
Sent: Wednesday, October 31, 2007 5:08 PM
To: javaposse@googlegroups.com
Subject: [The Java Posse] Re: XML apis

What does &quot;code&quot; point to in this instance?  As opposed to geonames.each
in Marcus' example?

On 11/1/07, Todd Costella &lt; Todd.Coste ... @entero.com

<QUOTE PREVIOUSPOST="
&lt;mailto:Todd.Coste ... @entero.com&gt; &gt; wrote:
">

def waypoints = []

geonames.code.each{

def ww = new WikiWaypoint(name:it.name,lat:it.lat,lng:it.lng)

waypoints &lt;&lt; ww
</POST>
<POST>
<POSTER> Kevin Wong &lt;kevin.peter.w...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-11-01T11:35:00 </POSTDATE>
JOX is another POJO to XML library.  There's a tutorial here:
http://www.wutka.com/joxdoc.html

On Oct 31, 11:47 am, Joshua Marinacci &lt;jos ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Just to take the topic away from desktop java dying on the mac, for a
&gt; second. :)

&gt; What XML reading APIs do you use?  I'm dealing with simple
&gt; webservices more and more, and my basic task is usually grabbing XML
&gt; from a URL and parsing it.  Using the DOM in loops my code has always
&gt; been super verbose so I've started using XPath more, but it still
&gt; feels a bit crufty because there's a lot of casting going on and no
&gt; support for generics.  When you have have to parse some XML what API
&gt; do you use?  JDOM? Straight DOM or SAX? XPath?

&gt; thanks,
&gt;         Josh
">
</POST>
<POST>
<POSTER> Brice &lt;bdr...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-11-06T00:28:00 </POSTDATE>
Josh -

One of the things I've found is to use XSL if I'm dealing with a
fairly complicated XML doc. Especially if I only really want a couple
parts of the doc, I'll use XSL to transform the input into a super
simple XML result and then use an XML-&gt;POJO mapper on that and just
using the resultant POJO. I've used XMLBeans, JAXB2, and Castor (for
XML-&gt;POJO &amp; vv) ... each have their strengths and nits, I 'spose. The
key seems to be using a super simple schema ... once the schema gets
crazy, the POJOs get crazy. I don't like crazy.

This strategy works well both for consuming &amp; producing XML. When
producing, often you just need to fill in a couple values in a fairly
complex template (based on some hairbrained schema designed by
committee, I'm sure). I'll create a POJO of my values, then use the
POJO-&gt;XML to create a simple XML doc. Then its a simple matter to use
XSL to transform that source into the complex doc. The XSL basically
becomes a template with a couple &lt;xsl:value-of&gt; statements.

All in all, I like to use XSL to do heavy XML lifting (its best at it,
IMO), and then map to POJOs when I can, 'cause most of the other XML
APIs (JDOM, DOM, etc.) still don't feel &quot;right&quot;. Doing the transforms
in Java is all of about 3-5 lines of code, then you get POJOs to work
with.

Cheers,
Brice

On Oct 31, 9:47 am, Joshua Marinacci &lt;jos ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Just to take the topic away from desktop java dying on the mac, for a
&gt; second. :)

&gt; What XML reading APIs do you use?  I'm dealing with simple
&gt; webservices more and more, and my basic task is usually grabbing XML
&gt; from a URL and parsing it.  Using the DOM in loops my code has always
&gt; been super verbose so I've started using XPath more, but it still
&gt; feels a bit crufty because there's a lot of casting going on and no
&gt; support for generics.  When you have have to parse some XML what API
&gt; do you use?  JDOM? Straight DOM or SAX? XPath?

&gt; thanks,
&gt;         Josh
">
</POST>
<POST>
<POSTER> Christian Catchpole &lt;ato...@catchpole.net&gt; </POSTER>
<POSTDATE> 2007-11-06T01:15:00 </POSTDATE>
I rolled my own Bean to DOM mapper (actually a DOM implemenation) for
a few distict reasons:  All the others (I could find) would reflect
the entire bean tree and then they would also create XML which I would
have to parse back to a DOM.  XSL can be selective, so it only
reflects the beans as needed.  The tree can be huge (mapped to a ORM
for example) but the DOM only creates nodes as they are selected.  I
have been using it for XSLT HTML rendering and it works quite well.
Now it doesnt work in the other direction (XML to beans) - but I have
added a feature where is sets call back values into HTML forms so the
values can be set back on the beans, when a form is submitted.

Page page = new Page(&quot;the title&quot;);
page.add(new Image(&quot; http://image/ &quot;));
page.add(new Link(&quot;link text&quot;, &quot; http://link/ &quot;));

DominionBuilder dominionBuilder = new DominionBuilder();
DominionDocument dominionDocument =
dominionBuilder.newDocument(page);

System.out.println(Xml.getXML(dominionDocument));

..produces..

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;page&gt;
&lt;image&gt;
&lt;width&gt;0&lt;/width&gt;
&lt;height&gt;0&lt;/height&gt;
&lt;hspace&gt;0&lt;/hspace&gt;
&lt;vspace&gt;0&lt;/vspace&gt;
&lt;url&gt; http://image/ &lt;/url&gt;
&lt;/image&gt;
&lt;link&gt;
&lt;text&gt;link text&lt;/text&gt;
&lt;href&gt; http://link/ &lt;/href&gt;
&lt;/link&gt;
&lt;title&gt;the title&lt;/title&gt;
&lt;/page&gt;

And....

Map map = new HashMap();
map.put(&quot;Thing1&quot;, &quot;Value1&quot;);
map.put(&quot;Thing2&quot;, &quot;Value2&quot;);
map.put(&quot;List&quot;, Arrays.asList(&quot;item1&quot;, &quot;item2&quot;, &quot;item3&quot;));

..produces..

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;hashMap&gt;
&lt;thing2&gt;Value2&lt;/thing2&gt;
&lt;list&gt;
&lt;string&gt;item1&lt;/string&gt;
&lt;string&gt;item2&lt;/string&gt;
&lt;string&gt;item3&lt;/string&gt;
&lt;empty&gt;false&lt;/empty&gt;
&lt;/list&gt;
&lt;thing1&gt;Value1&lt;/thing1&gt;
&lt;/hashMap&gt;

On Nov 6, 3:28 pm, Brice &lt;bdr ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Josh -

&gt; One of the things I've found is to use XSL if I'm dealing with a
&gt; fairly complicated XML doc. Especially if I only really want a couple
&gt; parts of the doc, I'll use XSL to transform the input into a super
&gt; simple XML result and then use an XML-&gt;POJO mapper on that and just
&gt; using the resultant POJO. I've used XMLBeans, JAXB2, and Castor (for
&gt; XML-&gt;POJO &amp; vv) ... each have their strengths and nits, I 'spose. The
&gt; key seems to be using a super simple schema ... once the schema gets
&gt; crazy, the POJOs get crazy. I don't like crazy.

&gt; This strategy works well both for consuming &amp; producing XML. When
&gt; producing, often you just need to fill in a couple values in a fairly
&gt; complex template (based on some hairbrained schema designed by
&gt; committee, I'm sure). I'll create a POJO of my values, then use the
&gt; POJO-&gt;XML to create a simple XML doc. Then its a simple matter to use
&gt; XSL to transform that source into the complex doc. The XSL basically
&gt; becomes a template with a couple &lt;xsl:value-of&gt; statements.

&gt; All in all, I like to use XSL to do heavy XML lifting (its best at it,
&gt; IMO), and then map to POJOs when I can, 'cause most of the other XML
&gt; APIs (JDOM, DOM, etc.) still don't feel &quot;right&quot;. Doing the transforms
&gt; in Java is all of about 3-5 lines of code, then you get POJOs to work
&gt; with.

&gt; Cheers,
&gt; Brice

&gt; On Oct 31, 9:47 am, Joshua Marinacci &lt;jos ... @gmail.com&gt; wrote:

&gt; &gt; Just to take the topic away from desktop java dying on the mac, for a
&gt; &gt; second. :)

&gt; &gt; What XML reading APIs do you use?  I'm dealing with simple
&gt; &gt; webservices more and more, and my basic task is usually grabbing XML
&gt; &gt; from a URL and parsing it.  Using the DOM in loops my code has always
&gt; &gt; been super verbose so I've started using XPath more, but it still
&gt; &gt; feels a bit crufty because there's a lot of casting going on and no
&gt; &gt; support for generics.  When you have have to parse some XML what API
&gt; &gt; do you use?  JDOM? Straight DOM or SAX? XPath?

&gt; &gt; thanks,
&gt; &gt;         Josh
">
</POST>
<POST>
<POSTER> Peter Becker &lt;pe...@peterbecker.de&gt; </POSTER>
<POSTDATE> 2007-11-06T20:32:00 </POSTDATE>
Brice,

I'd love to hear some of your experiences with the three XML Binding
tools you mentioned. I experimented with all three when working with
Microsofts DatadiagramML format (the XML for Visio), but that is a
rather unusual scenario (we are talking about a pretty stupid XSD
format that generates aorund 1000 classes since every bloody color has
its own type ;-) ). I'll summarize my experiences below, but what I'd
like to hear is how these three tools perform on the more common small
examples.

The rest of this post is about that experience, no need to read if not
interested...

Recalling from my memory (which is dangerous): what we experienced
with the Visio XML was in the first round about 2 years ago that JAXB
worked like a charm, but the resulting XML of the basic &quot;save Visio
file-&gt;load file into Java-&gt;save again-&gt;open in Visio&quot; test caused
Visio to crash when opening it (we actually solved that later, see
below).

Castor plainly failed -- it lacked support for many XSD datatypes that
were used in the schema and it couldn't handle having different types
of the same name (which is valid if they are in different contexts).
We suspected that the latter could have been fixed by manual mappings,
but since the former seemed too big an issue we never tried.

XMLBeans was the only one that worked out of the box, so we just took
it. It seemed allright for a long time, then bugs started appearing.
Weird ones. Really, really weird ones. For example sometimes the
base64 encoded block of the VB code would be abridged. Not the file as
a whole, but just the content of that block and that only if certain
values where set up above, up to the point that an attribute value in
a completely unrelated element could make or break it. Happened only
in rare situations, but then reproducably. We also found that we had
100% leakage of the XMLBeans classes, so I went into the source to
figure out what is going on and quickly afterwards decided to look
into different solutions.

We went back to JAXB after that (think ~1year in), debugging the
original crash problem. It turned out Visio just doesn't like the
&quot;standalone&quot; attribute on the XML declaration. If that thing is there
Visio will crash, independent on the value. So you just remove it from
the output stream and life is good :-) (it is actually only in one
spot in the JAXB code, so we could have easily hacked it, but we
preferred the non-intrusive solution.

In the end we actually went DOM, but that was only since the stupid
XSD format with repetition and weird patterns all over the place
forced us to go code generation anyway -- so we figured we might as
well generate DOM access code, thus avoiding one extra bit of
technology in our tooling (BTW: annotation processing can be fun, at
least if you are allowed to use Java 6 on the source side).

That's my (not so) little anecdote about those three tools. But as I
said: I don't think that is a typical use case, so I'd like to hear
some experiences about the more normal ones.

Cheers,
Peter

On Nov 6, 3:28 pm, Brice &lt;bdr ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Josh -

&gt; One of the things I've found is to use XSL if I'm dealing with a
&gt; fairly complicated XML doc. Especially if I only really want a couple
&gt; parts of the doc, I'll use XSL to transform the input into a super
&gt; simple XML result and then use an XML-&gt;POJO mapper on that and just
&gt; using the resultant POJO. I've used XMLBeans, JAXB2, and Castor (for
&gt; XML-&gt;POJO &amp; vv) ... each have their strengths and nits, I 'spose. The
&gt; key seems to be using a super simple schema ... once the schema gets
&gt; crazy, the POJOs get crazy. I don't like crazy.
">

[...]
</POST>
<POST>
<POSTER> Brice &lt;bdr...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-11-06T22:27:00 </POSTDATE>
In normal scenarios, I'd say XMLBeans and JAXB2 (not much exp. w/
original JAXB) are pretty evenly matched. They're both fast, they both
have a fair number of configurabilities, and they're both evenly
matched. Don't know much about the internals of XMLBeans, but if I
were forced at gun point, I'd probably pick JAXB2 (though I've had my
share of issues here, too, mostly related to web services). Castor
just has issues in a number of areas and my experience with that was
fairly short-lived. I expect technology to mostly &quot;just work&quot;, at
least for the advertised intent - and Castor didn't quite measure up
in my experience.

Whenever I work with any of the POJO&lt;=&gt;XML tools nowadays, I try as
hard as I can to simplify the schema, because I'm just done with the
hairbrained POJOs complex schemas create.
foo.getFoo().get(0).getBar().get(0).... shoot me now. Kudos to all
those using Groovy's simple dot notation, but still ... give me a
simple POJO any day.

Cheers,
Brice

On Nov 6, 7:32 pm, Peter Becker &lt;pe ... @peterbecker.de&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Brice,

&gt; I'd love to hear some of your experiences with the three XML Binding
&gt; tools you mentioned. I experimented with all three when working with
&gt; Microsofts DatadiagramML format (the XML for Visio), but that is a
&gt; rather unusual scenario (we are talking about a pretty stupid XSD
&gt; format that generates aorund 1000 classes since every bloody color has
&gt; its own type ;-) ). I'll summarize my experiences below, but what I'd
&gt; like to hear is how these three tools perform on the more common small
&gt; examples.

&gt; The rest of this post is about that experience, no need to read if not
&gt; interested...

&gt; Recalling from my memory (which is dangerous): what we experienced
&gt; with the Visio XML was in the first round about 2 years ago that JAXB
&gt; worked like a charm, but the resulting XML of the basic &quot;save Visio
&gt; file-&gt;load file into Java-&gt;save again-&gt;open in Visio&quot; test caused
&gt; Visio to crash when opening it (we actually solved that later, see
&gt; below).

&gt; Castor plainly failed -- it lacked support for many XSD datatypes that
&gt; were used in the schema and it couldn't handle having different types
&gt; of the same name (which is valid if they are in different contexts).
&gt; We suspected that the latter could have been fixed by manual mappings,
&gt; but since the former seemed too big an issue we never tried.

&gt; XMLBeans was the only one that worked out of the box, so we just took
&gt; it. It seemed allright for a long time, then bugs started appearing.
&gt; Weird ones. Really, really weird ones. For example sometimes the
&gt; base64 encoded block of the VB code would be abridged. Not the file as
&gt; a whole, but just the content of that block and that only if certain
&gt; values where set up above, up to the point that an attribute value in
&gt; a completely unrelated element could make or break it. Happened only
&gt; in rare situations, but then reproducably. We also found that we had
&gt; 100% leakage of the XMLBeans classes, so I went into the source to
&gt; figure out what is going on and quickly afterwards decided to look
&gt; into different solutions.

&gt; We went back to JAXB after that (think ~1year in), debugging the
&gt; original crash problem. It turned out Visio just doesn't like the
&gt; &quot;standalone&quot; attribute on the XML declaration. If that thing is there
&gt; Visio will crash, independent on the value. So you just remove it from
&gt; the output stream and life is good :-) (it is actually only in one
&gt; spot in the JAXB code, so we could have easily hacked it, but we
&gt; preferred the non-intrusive solution.

&gt; In the end we actually went DOM, but that was only since the stupid
&gt; XSD format with repetition and weird patterns all over the place
&gt; forced us to go code generation anyway -- so we figured we might as
&gt; well generate DOM access code, thus avoiding one extra bit of
&gt; technology in our tooling (BTW: annotation processing can be fun, at
&gt; least if you are allowed to use Java 6 on the source side).

&gt; That's my (not so) little anecdote about those three tools. But as I
&gt; said: I don't think that is a typical use case, so I'd like to hear
&gt; some experiences about the more normal ones.

&gt; Cheers,
&gt;     Peter

&gt; On Nov 6, 3:28 pm, Brice &lt;bdr ... @gmail.com&gt; wrote:

&gt; &gt; Josh -

&gt; &gt; One of the things I've found is to use XSL if I'm dealing with a
&gt; &gt; fairly complicated XML doc. Especially if I only really want a couple
&gt; &gt; parts of the doc, I'll use XSL to transform the input into a super
&gt; &gt; simple XML result and then use an XML-&gt;POJO mapper on that and just
&gt; &gt; using the resultant POJO. I've used XMLBeans, JAXB2, and Castor (for
&gt; &gt; XML-&gt;POJO &amp; vv) ... each have their strengths and nits, I 'spose. The
&gt; &gt; key seems to be using a super simple schema ... once the schema gets
&gt; &gt; crazy, the POJOs get crazy. I don't like crazy.

&gt; [...]
">
</POST>
<POST>
<POSTER> Jack &lt;jackg...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-11-07T00:24:00 </POSTDATE>
If you decide to go the POJO route, I'd highly recommend using Spring
Web Services ( http://static.springframework.org/spring-ws/site/ ) in
conjunction with whatever XML-POJO mapping tool.

I use Castor at work, but through Spring Web Service's OXM, and
appreciate that I can easily switch to a different OXM package if I
need to.

On Oct 31, 11:58 am, Casper Bang &lt;c ... @brunata.dk&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; Hi Josh,

&gt; The power of Castor is that it maps via reflection using a simple
&gt; default mapping sceme/convension. You just define your POJO's and then
&gt; do something like:

&gt; Response response = (Response)new Unmarshaller().unmarshal( new
&gt; InputSource( weatherFeedInputStream ) );

&gt; I've actually changed to using XStream from Thoughtworks due to
&gt; certain bennefits (hmm pretty print, don't remember exactly), but it
&gt; works much the same way: http://xstream.codehaus.org/tutorial.html

&gt; /Casper

&gt; On Oct 31, 5:46 pm, Joshua Marinacci &lt;jos ... @gmail.com&gt; wrote:

&gt; &gt; Could you provide an example of how you use it?
&gt; &gt; ex: I'm getting back data that looks like this:

&gt; &gt; &lt;response&gt;
&gt; &gt;    &lt;weather&gt;
&gt; &gt;     &lt;station&gt;
&gt; &gt;      &lt;id&gt;foo&lt;/id&gt;
&gt; &gt;      &lt;temp&gt;43&lt;/temp&gt;
&gt; &gt;     &lt;/station&gt;
&gt; &gt;     &lt;station&gt; next station.....

&gt; &gt; &lt;/weather&gt;
&gt; &gt; &lt;/response&gt;

&gt; &gt; How would you map that to a POJO?

&gt; &gt; - josh
&gt; &gt; On Oct 31, 2007, at 9:37 AM, Casper Bang wrote:

&gt; &gt; &gt; Not a big fan of XML API verbosity and parser choices, so Castor
&gt; &gt; &gt; transparent XML-&gt;POJO mapping when I can get away with it and it makes
&gt; &gt; &gt; sence.

&gt; &gt; &gt; /Casper

&gt; &gt; &gt; On Oct 31, 4:47 pm, Joshua Marinacci &lt;jos ... @gmail.com&gt; wrote:
&gt; &gt; &gt;&gt; Just to take the topic away from desktop java dying on the mac, for a
&gt; &gt; &gt;&gt; second. :)

&gt; &gt; &gt;&gt; What XML reading APIs do you use?  I'm dealing with simple
&gt; &gt; &gt;&gt; webservices more and more, and my basic task is usually grabbing XML
&gt; &gt; &gt;&gt; from a URL and parsing it.  Using the DOM in loops my code has always
&gt; &gt; &gt;&gt; been super verbose so I've started using XPath more, but it still
&gt; &gt; &gt;&gt; feels a bit crufty because there's a lot of casting going on and no
&gt; &gt; &gt;&gt; support for generics.  When you have have to parse some XML what API
&gt; &gt; &gt;&gt; do you use?  JDOM? Straight DOM or SAX? XPath?

&gt; &gt; &gt;&gt; thanks,
&gt; &gt; &gt;&gt;         Josh- Hide quoted text -

&gt; - Show quoted text -
">
</POST>
<POST>
<POSTER> &quot;Peter Becker&quot; &lt;peter.becker...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-11-07T00:27:00 </POSTDATE>
On Nov 7, 2007 1:27 PM, Brice &lt;bdr ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; In normal scenarios, I'd say XMLBeans and JAXB2 (not much exp. w/
&gt; original JAXB) are pretty evenly matched. They're both fast, they both
&gt; have a fair number of configurabilities, and they're both evenly
&gt; matched. Don't know much about the internals of XMLBeans, but if I
&gt; were forced at gun point, I'd probably pick JAXB2 (though I've had my
&gt; share of issues here, too, mostly related to web services). Castor
&gt; just has issues in a number of areas and my experience with that was
&gt; fairly short-lived. I expect technology to mostly &quot;just work&quot;, at
&gt; least for the advertised intent - and Castor didn't quite measure up
&gt; in my experience.
">

Have you ever checked for memory leaks with XMLBeans? Since we never
really debugged that one I don't know if that was just some weird
constellation or a general XMLBeans problem. With all the classloader
stunts in the XMLBeans code I didn't really want to go too far.

<QUOTE PREVIOUSPOST="
&gt; Whenever I work with any of the POJO&lt;=&gt;XML tools nowadays, I try as
&gt; hard as I can to simplify the schema, because I'm just done with the
&gt; hairbrained POJOs complex schemas create.
&gt; foo.getFoo().get(0).getBar().get(0).... shoot me now. Kudos to all
&gt; those using Groovy's simple dot notation, but still ... give me a
&gt; simple POJO any day.
">

That's exactly the type of code where we decided to generate code --
it's even worse when writing where you have to check if the collection
element is there, and if not create it on the fly :-( We ended up
mapping some annotations similar to a basic XPath expression onto the
accessor code, but once we had done that we could as well generate the
DOM code. After all we had no choice to fix the XSD (and that was only
one issue with it).

Thanks,
Peter

<QUOTE PREVIOUSPOST="
&gt; On Nov 6, 7:32 pm, Peter Becker &lt;pe ... @peterbecker.de&gt; wrote:
&gt; &gt; Brice,

&gt; &gt; I'd love to hear some of your experiences with the three XML Binding
&gt; &gt; tools you mentioned. I experimented with all three when working with
&gt; &gt; Microsofts DatadiagramML format (the XML for Visio), but that is a
&gt; &gt; rather unusual scenario (we are talking about a pretty stupid XSD
&gt; &gt; format that generates aorund 1000 classes since every bloody color has
&gt; &gt; its own type ;-) ). I'll summarize my experiences below, but what I'd
&gt; &gt; like to hear is how these three tools perform on the more common small
&gt; &gt; examples.

&gt; &gt; The rest of this post is about that experience, no need to read if not
&gt; &gt; interested...

&gt; &gt; Recalling from my memory (which is dangerous): what we experienced
&gt; &gt; with the Visio XML was in the first round about 2 years ago that JAXB
&gt; &gt; worked like a charm, but the resulting XML of the basic &quot;save Visio
&gt; &gt; file-&gt;load file into Java-&gt;save again-&gt;open in Visio&quot; test caused
&gt; &gt; Visio to crash when opening it (we actually solved that later, see
&gt; &gt; below).

&gt; &gt; Castor plainly failed -- it lacked support for many XSD datatypes that
&gt; &gt; were used in the schema and it couldn't handle having different types
&gt; &gt; of the same name (which is valid if they are in different contexts).
&gt; &gt; We suspected that the latter could have been fixed by manual mappings,
&gt; &gt; but since the former seemed too big an issue we never tried.

&gt; &gt; XMLBeans was the only one that worked out of the box, so we just took
&gt; &gt; it. It seemed allright for a long time, then bugs started appearing.
&gt; &gt; Weird ones. Really, really weird ones. For example sometimes the
&gt; &gt; base64 encoded block of the VB code would be abridged. Not the file as
&gt; &gt; a whole, but just the content of that block and that only if certain
&gt; &gt; values where set up above, up to the point that an attribute value in
&gt; &gt; a completely unrelated element could make or break it. Happened only
&gt; &gt; in rare situations, but then reproducably. We also found that we had
&gt; &gt; 100% leakage of the XMLBeans classes, so I went into the source to
&gt; &gt; figure out what is going on and quickly afterwards decided to look
&gt; &gt; into different solutions.

&gt; &gt; We went back to JAXB after that (think ~1year in), debugging the
&gt; &gt; original crash problem. It turned out Visio just doesn't like the
&gt; &gt; &quot;standalone&quot; attribute on the XML declaration. If that thing is there
&gt; &gt; Visio will crash, independent on the value. So you just remove it from
&gt; &gt; the output stream and life is good :-) (it is actually only in one
&gt; &gt; spot in the JAXB code, so we could have easily hacked it, but we
&gt; &gt; preferred the non-intrusive solution.

&gt; &gt; In the end we actually went DOM, but that was only since the stupid
&gt; &gt; XSD format with repetition and weird patterns all over the place
&gt; &gt; forced us to go code generation anyway -- so we figured we might as
&gt; &gt; well generate DOM access code, thus avoiding one extra bit of
&gt; &gt; technology in our tooling (BTW: annotation processing can be fun, at
&gt; &gt; least if you are allowed to use Java 6 on the source side).

&gt; &gt; That's my (not so) little anecdote about those three tools. But as I
&gt; &gt; said: I don't think that is a typical use case, so I'd like to hear
&gt; &gt; some experiences about the more normal ones.

&gt; &gt; Cheers,
&gt; &gt;     Peter

&gt; &gt; On Nov 6, 3:28 pm, Brice &lt;bdr ... @gmail.com&gt; wrote:

&gt; &gt; &gt; Josh -

&gt; &gt; &gt; One of the things I've found is to use XSL if I'm dealing with a
&gt; &gt; &gt; fairly complicated XML doc. Especially if I only really want a couple
&gt; &gt; &gt; parts of the doc, I'll use XSL to transform the input into a super
&gt; &gt; &gt; simple XML result and then use an XML-&gt;POJO mapper on that and just
&gt; &gt; &gt; using the resultant POJO. I've used XMLBeans, JAXB2, and Castor (for
&gt; &gt; &gt; XML-&gt;POJO &amp; vv) ... each have their strengths and nits, I 'spose. The
&gt; &gt; &gt; key seems to be using a super simple schema ... once the schema gets
&gt; &gt; &gt; crazy, the POJOs get crazy. I don't like crazy.

&gt; &gt; [...]
">
</POST>
<POST>
<POSTER> Jack &lt;jackg...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-11-07T00:32:00 </POSTDATE>
Another thing, if mapping performance is important, I remember someone
on this forum recommending JiBX.

On Nov 6, 11:24 pm, Jack &lt;jackg ... @gmail.com&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; If you decide to go the POJO route, I'd highly recommend using Spring
&gt; Web Services ( http://static.springframework.org/spring-ws/site/ ) in
&gt; conjunction with whatever XML-POJO mapping tool.

&gt; I use Castor at work, but through Spring Web Service's OXM, and
&gt; appreciate that I can easily switch to a different OXM package if I
&gt; need to.

&gt; On Oct 31, 11:58 am, Casper Bang &lt;c ... @brunata.dk&gt; wrote:

&gt; &gt; Hi Josh,

&gt; &gt; The power of Castor is that it maps via reflection using a simple
&gt; &gt; default mapping sceme/convension. You just define your POJO's and then
&gt; &gt; do something like:

&gt; &gt; Response response = (Response)new Unmarshaller().unmarshal( new
&gt; &gt; InputSource( weatherFeedInputStream ) );

&gt; &gt; I've actually changed to using XStream from Thoughtworks due to
&gt; &gt; certain bennefits (hmm pretty print, don't remember exactly), but it
&gt; &gt; works much the same way: http://xstream.codehaus.org/tutorial.html

&gt; &gt; /Casper

&gt; &gt; On Oct 31, 5:46 pm, Joshua Marinacci &lt;jos ... @gmail.com&gt; wrote:

&gt; &gt; &gt; Could you provide an example of how you use it?
&gt; &gt; &gt; ex: I'm getting back data that looks like this:

&gt; &gt; &gt; &lt;response&gt;
&gt; &gt; &gt;    &lt;weather&gt;
&gt; &gt; &gt;     &lt;station&gt;
&gt; &gt; &gt;      &lt;id&gt;foo&lt;/id&gt;
&gt; &gt; &gt;      &lt;temp&gt;43&lt;/temp&gt;
&gt; &gt; &gt;     &lt;/station&gt;
&gt; &gt; &gt;     &lt;station&gt; next station.....

&gt; &gt; &gt; &lt;/weather&gt;
&gt; &gt; &gt; &lt;/response&gt;

&gt; &gt; &gt; How would you map that to a POJO?

&gt; &gt; &gt; - josh
&gt; &gt; &gt; On Oct 31, 2007, at 9:37 AM, Casper Bang wrote:

&gt; &gt; &gt; &gt; Not a big fan of XML API verbosity and parser choices, so Castor
&gt; &gt; &gt; &gt; transparent XML-&gt;POJO mapping when I can get away with it and it makes
&gt; &gt; &gt; &gt; sence.

&gt; &gt; &gt; &gt; /Casper

&gt; &gt; &gt; &gt; On Oct 31, 4:47 pm, Joshua Marinacci &lt;jos ... @gmail.com&gt; wrote:
&gt; &gt; &gt; &gt;&gt; Just to take the topic away from desktop java dying on the mac, for a
&gt; &gt; &gt; &gt;&gt; second. :)

&gt; &gt; &gt; &gt;&gt; What XML reading APIs do you use?  I'm dealing with simple
&gt; &gt; &gt; &gt;&gt; webservices more and more, and my basic task is usually grabbing XML
&gt; &gt; &gt; &gt;&gt; from a URL and parsing it.  Using the DOM in loops my code has always
&gt; &gt; &gt; &gt;&gt; been super verbose so I've started using XPath more, but it still
&gt; &gt; &gt; &gt;&gt; feels a bit crufty because there's a lot of casting going on and no
&gt; &gt; &gt; &gt;&gt; support for generics.  When you have have to parse some XML what API
&gt; &gt; &gt; &gt;&gt; do you use?  JDOM? Straight DOM or SAX? XPath?

&gt; &gt; &gt; &gt;&gt; thanks,
&gt; &gt; &gt; &gt;&gt;         Josh- Hide quoted text -

&gt; &gt; - Show quoted text -- Hide quoted text -

&gt; - Show quoted text -
">
</POST>
</TEXT>
</BODY>
</DOC>
