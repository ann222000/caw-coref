<DOC>
<DOCID> eng-NG-31-135601-9761879 </DOCID>
<DOCTYPE SOURCE="usenet"> USENET TEXT </DOCTYPE>
<DATETIME> 2008-01-22T21:55:00 </DATETIME>
<BODY>
<HEADLINE>
Mapping (CoBOL) Methodologies to Problem Domains
</HEADLINE>
<TEXT>
<POST>
<POSTER> &quot;klsha...@att.net&quot; &lt;klsha...@att.net&gt; </POSTER>
<POSTDATE> 2008-01-22T21:55:00 </POSTDATE>
All -

Haven't been here for a while due to personal demands, but now that
I'm back, I wanted to put out an informal Call for Participation along
the following lines. In another forum I participate in we discuss
methodological approaches more than languages (eg. CMM vs. Agile).
Here is the essence of a post I put out there, and I'm putting it in
CLC to solicit the CoBOL angle, to wit, what methodologies are you
using in your CoBOL efforts: structured analysis / structured design,
object-oriented, custom, code-and-fix :-), whatever. CoBOL to
&quot;language-du-jour&quot; converts' opinions also welcome (that's at least
*you*, Mr. Pete Dashwood :-) ).

I guess it's OK to do some follow up here within this thread in CLC,
but seeing as how this is just a little bit off the usual beaten track
of CLC, I don't want it to get &quot;out of hand&quot; (as if anything here ever
does!)

Anyway, here is a &quot;copy and past&quot; of what I posted elsewhere!

All -

Anonymous's last post got me thinking, and I reviewed my c:\ drive for
some articles I had culled regarding this problem, which is namely,

&quot;What methodologies/methods should we apply to what domains of
problems?&quot;

I have three seminal works by Robert Glass that are directly relevant
here (you will need ACM and/or IEEE membership to get these, but I can
help you):

&quot;Contemporary Application Domain Taxonomies&quot;
http://portal.acm.org/citation.cfm?id=625489

&quot;Some Heresy Regarding Software Engineering&quot;
http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?tp=&amp;arnumber;=1309657&amp;i...;

&quot;Matching Methodology to Problem Domain&quot;
http://portal.acm.org/citation.cfm?id=986228

In these works Glass makes it abundantly clear how **little** work has
been done in this area, by either industry or academia, and so this
might be an opportunity for some (relatively) groundbreaking work.

Those interested in exploring this aspect independently of &lt;CLC and
other Forums&gt;, please post here in this thread, or contact me offline
at my e-mail address. The goal for this exploration should be
initially modest (I have a fair amount of personal business to attend
to in the short term, which limits my time), but could be on the order
of accumulating enough &quot;stuff&quot; (viewpoints, rough &quot;artifacts&quot;) to
present a &quot;Roundtable&quot;, &quot;Birds of a Feather&quot;, &quot;Panel&quot;, or simply
&quot;Gathering&quot; at something like GLSEC (Great Lakes Software Excellence
Conference), but certainly not so much as to qualify as a &quot;seminar&quot; or
&quot;workshop&quot;, let alone a &quot;conference&quot; :-).

I think for the time being this effort would be organized as a simple
cc: list for some occasional group e-mailings, and not yet anything
more structured.

But I'd like to get started on it by accumlating a list of interested
parties?

Any takers?

Ken
</POST>
<POST>
<POSTER> &quot;Pete Dashwood&quot; &lt;dashw...@removethis.enternet.co.nz&gt; </POSTER>
<POSTDATE> 2008-01-22T22:57:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&lt;klsha ... @att.net&gt; wrote in message
">

news:519b9104-a107-4f9d-b341-781c2185da40@d4g2000prg.googlegroups.com ...

<QUOTE PREVIOUSPOST="
&gt; All -

&gt; Haven't been here for a while due to personal demands, but now that
&gt; I'm back, I wanted to put out an informal Call for Participation along
&gt; the following lines. In another forum I participate in we discuss
&gt; methodological approaches more than languages (eg. CMM vs. Agile).
&gt; Here is the essence of a post I put out there, and I'm putting it in
&gt; CLC to solicit the CoBOL angle, to wit, what methodologies are you
&gt; using in your CoBOL efforts: structured analysis / structured design,
&gt; object-oriented, custom, code-and-fix :-), whatever. CoBOL to
&gt; &quot;language-du-jour&quot; converts' opinions also welcome (that's at least
&gt; *you*, Mr. Pete Dashwood :-) ).
">

I believe that any attempt at problem solution that is driven from a
Language perspective will not be optimum, so looking for approaches taken
with COBOL (as opposed to anything else) for me, is a non-starter.

I apply the same problem solution approaches no matter WHAT language is in
use.

<QUOTE PREVIOUSPOST="
&gt; I guess it's OK to do some follow up here within this thread in CLC,
&gt; but seeing as how this is just a little bit off the usual beaten track
&gt; of CLC, I don't want it to get &quot;out of hand&quot; (as if anything here ever
&gt; does!)

&gt; Anyway, here is a &quot;copy and past&quot; of what I posted elsewhere!

&gt; All -

&gt; Anonymous's last post got me thinking, and I reviewed my c:\ drive for
&gt; some articles I had culled regarding this problem, which is namely,

&gt; &quot;What methodologies/methods should we apply to what domains of
&gt; problems?&quot;
">

Pre-supposes that there ARE different domains of problem; in commercial
computer programming this is arguable: &quot;Get a solution implemented that
costs as little as possible, takes as little time as possible, meets the
Business requirements, and is comfortable for users to use.&quot; If you can
manage to also minimise future maintenance and make the new system integrate
nicely with current and foreseeable technical environments, that's a
bonus...:-)

<QUOTE PREVIOUSPOST="
&gt; I have three seminal works by Robert Glass that are directly relevant
&gt; here (you will need ACM and/or IEEE membership to get these, but I can
&gt; help you):

&gt; &quot;Contemporary Application Domain Taxonomies&quot;
&gt; http://portal.acm.org/citation.cfm?id=625489

&gt; &quot;Some Heresy Regarding Software Engineering&quot;
&gt; http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?tp=&amp;arnumber;=1309657&amp;i...;

&gt; &quot;Matching Methodology to Problem Domain&quot;
&gt; http://portal.acm.org/citation.cfm?id=986228

&gt; In these works Glass makes it abundantly clear how **little** work has
&gt; been done in this area, by either industry or academia, and so this
&gt; might be an opportunity for some (relatively) groundbreaking work.
">

Glass should speak for himself.

Personally, I've been researching, analysing, postulating, experimenting,
and considering this for the last 43 years. I have arrived at some
interesting conclusions which will be published in a forthcoming book that
will be completed later this year.

I can tell you this for nothing:

1. No single one of the current methodologies works to complete satisfaction
(with the POSSIBLE exception of DSDM...) when applied by itself, alone.
2. There is a marked lack of imagination on the part of both Business
Management and Technical Management when addressing this problem.
3. The main reason for software engineering failures is very bright
technical people being poorly led by managers who secretly despise them, and
have little or no understanding of what they do/need. (Point being: It isn't
necessarily about Methodology...)
4. It IS possible to formulate a General Solution to commercial software
engineering, that will solve more than 80% of the problems projects
encounter. (However, doing so requires vision, imagination, and acceptance
of change which most organisations are not capable of, or simply don't
have.) This &quot;general solution&quot; is possible because, at least in the domain
of commercial software solution engineering, there are the same (or very
similar) &quot;general problems&quot; that manifest thermselves on every project,
despite the fact that EVERY Management team believes THEY are unique and
THEIR business is completely different from everyone else's. I think this
myopia occurs because they are not capable of the pattern recognition that
their tech staff do instinctively.

I am postulating a completely different approach, but I don't want to spoil
it by pre-announcing it here. I WILL say that it includes the best points of
several currently successful methodologies, along with some quite innovative
ideas, based on my own experience and what I've found to work. I can also
say that it is as far divorced from Waterfall as it is possible to get :-)

Amazingly, I have a track record of 20 years in PM without a failure (1
project was not completed due to international corporate politics, over
which I had no control), yet I have NEVER implemented (completely) the
standard approach required on any particular site. Had I done so, the
project would have failed.:-)

I believe the factors required for successful implementation are not easily
identifiable or quantifiable and I address this in the book. Certainly some
of them cannot be taught, but must be learned by observation and experience.
It IS possible to raise awareness of them and suggest some approaches...

<QUOTE PREVIOUSPOST="
- Hide quoted text - - Show quoted text -
">

<QUOTE PREVIOUSPOST="
&gt; Those interested in exploring this aspect independently of &lt;CLC and
&gt; other Forums&gt;, please post here in this thread, or contact me offline
&gt; at my e-mail address. The goal for this exploration should be
&gt; initially modest (I have a fair amount of personal business to attend
&gt; to in the short term, which limits my time), but could be on the order
&gt; of accumulating enough &quot;stuff&quot; (viewpoints, rough &quot;artifacts&quot;) to
&gt; present a &quot;Roundtable&quot;, &quot;Birds of a Feather&quot;, &quot;Panel&quot;, or simply
&gt; &quot;Gathering&quot; at something like GLSEC (Great Lakes Software Excellence
&gt; Conference), but certainly not so much as to qualify as a &quot;seminar&quot; or
&gt; &quot;workshop&quot;, let alone a &quot;conference&quot; :-).

&gt; I think for the time being this effort would be organized as a simple
&gt; cc: list for some occasional group e-mailings, and not yet anything
&gt; more structured.

&gt; But I'd like to get started on it by accumlating a list of interested
&gt; parties?

&gt; Any takers?
">

Not at this stage, Ken. I believe it will be too dry and Academic to
interest me, and I can't/won't contribute to a pissing contest about
methodologies, none of which I believe to be perfect... :-)

Nevertheless, I wish you luck with it :-)

Pete.
--
&quot;I used to write COBOL...now I can do anything.&quot;
</POST>
<POST>
<POSTER> docdw...@panix.com () </POSTER>
<POSTDATE> 2008-01-23T05:36:00 </POSTDATE>
In article &lt;519b9104-a107-4f9d-b341-781c2185d ... @d4g2000prg.googlegroups.com&gt;,

<QUOTE PREVIOUSPOST="
klsha ... @att.net &lt;klsha ... @att.net&gt; wrote:
&gt;All -

&gt;Haven't been here for a while due to personal demands, but now that
&gt;I'm back, I wanted to put out an informal Call for Participation along
&gt;the following lines. In another forum I participate in we discuss
&gt;methodological approaches more than languages (eg. CMM vs. Agile).
&gt;Here is the essence of a post I put out there, and I'm putting it in
&gt;CLC to solicit the CoBOL angle, to wit, what methodologies are you
&gt;using in your CoBOL efforts: structured analysis / structured design,
&gt;object-oriented, custom, code-and-fix :-), whatever.
">

I use, of course, whatever style fits into the code that already exists at
the client's site... if a programmer expects something to occur in a
certain place or way then I want to make sure I do my best not to add
confusion.  For example, if a program usually starts with something like:

Procedure Division using LinkParms.

Evaluate PassThrough
When 1
Perform First-Calls
Perform Edit-Data
When 2
Perform Edit-data
When Other
Perform LinkParms-Corrupt
End-Evaluate

Perform Cleanup

Goback.

... then it is rather unlikely for me to write

PROCEDURE DIVISION USING LINKPARMS.

PERFORM 0000-HOUSEKEEPING  THRU  0000-EX.

PERFORM 5000-MAINLINE      THRU  5000-EX.

PERFORM 9000-EOJ           THRU  9000-EX.

GOBACK.

0000-HOUSEKEEPING.

MOVE LS-PASS-FLD  TO  WK-PASS-FLD.
IF NOT FIRST-TIME-IN
GO TO 0000-EX.

... et and cetera.  If something just Isn't Working (certain things keep
going wrong in certain ways) then I'll make my suggestions as to how I
believe difficulties might be alleviated... but as long as what I do
doesn't violate my own standards of Professional Ethics then, ultimately,
I'll do what the person who signs my timesheets tells me to do; something
about paying pipers and calling tunes.

DD
</POST>
<POST>
<POSTER> docdw...@panix.com () </POSTER>
<POSTDATE> 2008-01-23T08:35:00 </POSTDATE>
In article &lt;5vns9hF1ns38 ... @mid.individual.net&gt;,

<QUOTE PREVIOUSPOST="
Pete Dashwood &lt;dashw ... @removethis.enternet.co.nz&gt; wrote:
">

[snip]

<QUOTE PREVIOUSPOST="
&gt;This &quot;general solution&quot; is possible because, at least in the domain
&gt;of commercial software solution engineering, there are the same (or very
&gt;similar) &quot;general problems&quot; that manifest thermselves on every project,
&gt;despite the fact that EVERY Management team believes THEY are unique and
&gt;THEIR business is completely different from everyone else's. I think this
&gt;myopia occurs because they are not capable of the pattern recognition that
&gt;their tech staff do instinctively.
">

Mr Dashwood, I'm not sure about pattern recognition and such... but I've
read in a few texts that it is a very ancient and human phenomenom to
consider one's Place and one's People to be special and superior to
everything else; the (that-which-caused-creation) made the Human Beings
and their Land of which We are part, etc.

Given that as an almost species-level behavior the diffident sniff and
'NIH' (Not Invented Here) dismissal aimed at a new idea or process
seems... downright Human, it does.

DD
</POST>
<POST>
<POSTER> &quot;klsha...@att.net&quot; &lt;klsha...@att.net&gt; </POSTER>
<POSTDATE> 2008-01-23T12:18:00 </POSTDATE>
On Jan 22, 10:57 pm, &quot;Pete Dashwood&quot;

<QUOTE PREVIOUSPOST="
&lt;dashw ... @removethis.enternet.co.nz&gt; wrote:

&gt; Not at this stage, Ken. I believe it will be too dry and Academic to
&gt; interest me, and I can't/won't contribute to a pissing contest about
&gt; methodologies, none of which I believe to be perfect... :-)

&gt; Nevertheless, I wish you luck with it :-)

&gt; Pete.
">

Uhh, can you get me a pre-publication copy of your book? :-)

Ken
</POST>
<POST>
<POSTER> &quot;klsha...@att.net&quot; &lt;klsha...@att.net&gt; </POSTER>
<POSTDATE> 2008-01-23T12:48:00 </POSTDATE>
On Jan 23, 5:36 am, docdw ... @panix.com () wrote:

<QUOTE PREVIOUSPOST="
&gt; In article &lt;519b9104-a107-4f9d-b341-781c2185d ... @d4g2000prg.googlegroups.com&gt;,

&gt; I use, of course, whatever style fits into the code that already exists at
&gt; the client's site... if a programmer expects something to occur in a
&gt; certain place or way then I want to make sure I do my best not to add
&gt; confusion.  For example, if a program usually starts with something like:

&gt; Procedure Division using LinkParms.

&gt;     Evaluate PassThrough
&gt;     When 1
&gt;         Perform First-Calls
&gt;         Perform Edit-Data
&gt;     When 2
&gt;         Perform Edit-data
&gt;     When Other
&gt;         Perform LinkParms-Corrupt
&gt;     End-Evaluate

&gt;     Perform Cleanup

&gt;     Goback.

&gt; ... then it is rather unlikely for me to write

&gt; PROCEDURE DIVISION USING LINKPARMS.

&gt;     PERFORM 0000-HOUSEKEEPING  THRU  0000-EX.

&gt;     PERFORM 5000-MAINLINE      THRU  5000-EX.

&gt;     PERFORM 9000-EOJ           THRU  9000-EX.

&gt;     GOBACK.

&gt; 0000-HOUSEKEEPING.

&gt;     MOVE LS-PASS-FLD  TO  WK-PASS-FLD.
&gt;     IF NOT FIRST-TIME-IN
&gt;         GO TO 0000-EX.
">

Hmmm... Doc, this actually is *very helpful*. I just need a moniker to
'tach to it. How about, &quot;minimal impact&quot; approach as the
&quot;methodology&quot;, with the &quot;problem domain&quot; being &quot;maintenance&quot;. Maybe
this is really a &quot;meta-methodology&quot;, since it might subsume &quot;if system
flowcharts exist, update the system flowcharts as needed, in the same
format as before.&quot; Given all the hub-bub of &quot;transformational&quot;
approaches and the like, &quot;minimal impact&quot; might actually be a valid
way of thinking about it.

Can you think of a better, ah, more *marketable* tagline than &quot;minimal
impact&quot; though? Something with a homonym of a Hollywood celebrity's
name, or the like?

<QUOTE PREVIOUSPOST="
&gt; ... et and cetera.  If something just Isn't Working (certain things keep
&gt; going wrong in certain ways) then I'll make my suggestions as to how I
&gt; believe difficulties might be alleviated... but as long as what I do
&gt; doesn't violate my own standards of Professional Ethics then, ultimately,
&gt; I'll do what the person who signs my timesheets tells me to do; something
&gt; about paying pipers and calling tunes.
">

I seem to recall that when the ol' body wears out a little too much,
and there is little that the old' Doc can do, we usually shift away
from health Remediation to Pain Management. So what do we call these
for Software systems?

Ken
</POST>
<POST>
<POSTER> docdw...@panix.com () </POSTER>
<POSTDATE> 2008-01-23T13:26:00 </POSTDATE>
In article &lt;a875426b-021a-440c-adf1-a1df30729 ... @e23g2000prf.googlegroups.com&gt;,

<QUOTE PREVIOUSPOST="
klsha ... @att.net &lt;klsha ... @att.net&gt; wrote:
&gt;On Jan 23, 5:36 am, docdw ... @panix.com () wrote:
&gt;&gt; In article &lt;519b9104-a107-4f9d-b341-781c2185d ... @d4g2000prg.googlegroups.com&gt;,

&gt;&gt; I use, of course, whatever style fits into the code that already exists at
&gt;&gt; the client's site... if a programmer expects something to occur in a
&gt;&gt; certain place or way then I want to make sure I do my best not to add
&gt;&gt; confusion.
">

[snip]

<QUOTE PREVIOUSPOST="
&gt;Hmmm... Doc, this actually is *very helpful*.
">

From *me*?  That's utterly impossible, just ask around the newsgroup.

<QUOTE PREVIOUSPOST="
&gt;I just need a moniker to
&gt;'tach to it. How about, &quot;minimal impact&quot; approach as the
&gt;&quot;methodology&quot;, with the &quot;problem domain&quot; being &quot;maintenance&quot;. Maybe
&gt;this is really a &quot;meta-methodology&quot;, since it might subsume &quot;if system
&gt;flowcharts exist, update the system flowcharts as needed, in the same
&gt;format as before.&quot; Given all the hub-bub of &quot;transformational&quot;
&gt;approaches and the like, &quot;minimal impact&quot; might actually be a valid
&gt;way of thinking about it.
">

That is one of the difficulties, Mr Shafer... the reconciling of 'we want
something new' with 'we're comfortable with what we do'.  If 'what we do'
actually *works* then I've found the primary cause of 'we want something
new' is a new Corner-Office Idiot who wants folks to say 'Jones is really
shaking things up there.'

(never mind the fact that more work is getting done, or less, or the
employees are more satisfied, or less... it's just 'Jones is really
shaking things up there')

<QUOTE PREVIOUSPOST="
&gt;Can you think of a better, ah, more *marketable* tagline than &quot;minimal
&gt;impact&quot; though? Something with a homonym of a Hollywood celebrity's
&gt;name, or the like?
">

If I could do that I'd be writing advertising-copy... 'It's this, it's
that, it's the other thing!  It's all three, in one... yes, it's new
Three-in-One!'

And so... I stick to COBOL.

<QUOTE PREVIOUSPOST="
&gt;&gt; ... et and cetera.  If something just Isn't Working (certain things keep
&gt;&gt; going wrong in certain ways) then I'll make my suggestions as to how I
&gt;&gt; believe difficulties might be alleviated... but as long as what I do
&gt;&gt; doesn't violate my own standards of Professional Ethics then, ultimately,
&gt;&gt; I'll do what the person who signs my timesheets tells me to do; something
&gt;&gt; about paying pipers and calling tunes.

&gt;I seem to recall that when the ol' body wears out a little too much,
&gt;and there is little that the old' Doc can do, we usually shift away
&gt;from health Remediation to Pain Management. So what do we call these
&gt;for Software systems?
">

It could be the shift from 'curative coding to, perhaps, 'palliative
programming'.

DD
</POST>
<POST>
<POSTER> Howard Brazee &lt;how...@brazee.net&gt; </POSTER>
<POSTDATE> 2008-01-23T13:46:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
On Wed, 23 Jan 2008 18:26:51 +0000 (UTC), docdw ... @panix.com () wrote:
&gt;It could be the shift from 'curative coding to, perhaps, 'palliative
&gt;programming'.
">

Sometimes that's sufficient.
</POST>
<POST>
<POSTER> SkippyPB &lt;swieg...@nospam.neo.rr.com&gt; </POSTER>
<POSTDATE> 2008-01-23T14:26:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
On Wed, 23 Jan 2008 10:36:29 +0000 (UTC), docdw ... @panix.com () wrote:
&gt;In article &lt;519b9104-a107-4f9d-b341-781c2185d ... @d4g2000prg.googlegroups.com&gt;,
&gt;klsha ... @att.net &lt;klsha ... @att.net&gt; wrote:
&gt;&gt;All -

&gt;&gt;Haven't been here for a while due to personal demands, but now that
&gt;&gt;I'm back, I wanted to put out an informal Call for Participation along
&gt;&gt;the following lines. In another forum I participate in we discuss
&gt;&gt;methodological approaches more than languages (eg. CMM vs. Agile).
&gt;&gt;Here is the essence of a post I put out there, and I'm putting it in
&gt;&gt;CLC to solicit the CoBOL angle, to wit, what methodologies are you
&gt;&gt;using in your CoBOL efforts: structured analysis / structured design,
&gt;&gt;object-oriented, custom, code-and-fix :-), whatever.

&gt;I use, of course, whatever style fits into the code that already exists at
&gt;the client's site... if a programmer expects something to occur in a
&gt;certain place or way then I want to make sure I do my best not to add
&gt;confusion.  For example, if a program usually starts with something like:

&gt;Procedure Division using LinkParms.

&gt;    Evaluate PassThrough
&gt;    When 1
&gt;        Perform First-Calls
&gt;        Perform Edit-Data
&gt;    When 2
&gt;        Perform Edit-data
&gt;    When Other
&gt;        Perform LinkParms-Corrupt
&gt;    End-Evaluate

&gt;    Perform Cleanup

&gt;    Goback.

&gt;... then it is rather unlikely for me to write

&gt;PROCEDURE DIVISION USING LINKPARMS.

&gt;    PERFORM 0000-HOUSEKEEPING  THRU  0000-EX.

&gt;    PERFORM 5000-MAINLINE      THRU  5000-EX.

&gt;    PERFORM 9000-EOJ           THRU  9000-EX.

&gt;    GOBACK.

&gt;0000-HOUSEKEEPING.

&gt;    MOVE LS-PASS-FLD  TO  WK-PASS-FLD.
&gt;    IF NOT FIRST-TIME-IN
&gt;        GO TO 0000-EX.

&gt;... et and cetera.  If something just Isn't Working (certain things keep
&gt;going wrong in certain ways) then I'll make my suggestions as to how I
&gt;believe difficulties might be alleviated... but as long as what I do
&gt;doesn't violate my own standards of Professional Ethics then, ultimately,
&gt;I'll do what the person who signs my timesheets tells me to do; something
&gt;about paying pipers and calling tunes.

&gt;DD
">

In terms of methodologies to solve a problem, I'm so old school I
still flow chart at times when the logic path isn't clear or the
problem too complex.  Then, depending on what language is available to
me at the client site, I write the code to fit the flow.  Structured
analysis / structured design, object-oriented, custom, code-and-fix
are useless unless you know the path you need to take to solve the
problem.  They, in and of themselves, will solve nothing and therefore
I don't feel are worth much discussion.

Regards,

////
(o o)
-oOO--(_)--OOo-

&quot;Well, that kind of puts a damper on another Yankees win.&quot;
--Announcer Phil Rizzuto, after a news bulletin reporting
the death of Pope Paul VI, 1978
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Remove nospam to email me.

Steve
</POST>
<POST>
<POSTER> &quot;tlmfru&quot; &lt;la...@mts.net&gt; </POSTER>
<POSTDATE> 2008-01-23T18:39:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Pete Dashwood &lt;dashw ... @removethis.enternet.co.nz&gt; wrote in message
">

news:5vns9hF1ns38fU1@mid.individual.net ...

<QUOTE PREVIOUSPOST="
&gt; I believe that any attempt at problem solution that is driven from a
&gt; Language perspective will not be optimum, so looking for approaches taken
&gt; with COBOL (as opposed to anything else) for me, is a non-starter.

&gt; I apply the same problem solution approaches no matter WHAT language is in
&gt; use.
">

If by this you mean that selecting the language first is a non-starter -
then you're absolutely right.  But if you mean that the language to be used
is of no consequence, then I venture to disagree.  Obvious examples: report
writers (including the much maligned RPG); FORTRAN in its place; or
assemblers for interacting directly with the hardware - shouldn't be a
priori ruled out.

It'll be interesting to see your book.  Something written by an experienced
practitioner as opposed to a theorist (who quite often has an axe to grind)
should be a treat.

PL
</POST>
<POST>
<POSTER> &quot;Charles Hottel&quot; &lt;chot...@earthlink.net&gt; </POSTER>
<POSTDATE> 2008-01-23T19:32:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&lt;klsha ... @att.net&gt; wrote in message
">

news:519b9104-a107-4f9d-b341-781c2185da40@d4g2000prg.googlegroups.com ...

<QUOTE PREVIOUSPOST="
&gt; All -

&gt; Haven't been here for a while due to personal demands, but now that
&gt; I'm back, I wanted to put out an informal Call for Participation along
&gt; the following lines. In another forum I participate in we discuss
&gt; methodological approaches more than languages (eg. CMM vs. Agile).
&gt; Here is the essence of a post I put out there, and I'm putting it in
&gt; CLC to solicit the CoBOL angle, to wit, what methodologies are you
&gt; using in your CoBOL efforts: structured analysis / structured design,
&gt; object-oriented, custom, code-and-fix :-), whatever. CoBOL to
&gt; &quot;language-du-jour&quot; converts' opinions also welcome (that's at least
&gt; *you*, Mr. Pete Dashwood :-) ).

&gt; I guess it's OK to do some follow up here within this thread in CLC,
&gt; but seeing as how this is just a little bit off the usual beaten track
&gt; of CLC, I don't want it to get &quot;out of hand&quot; (as if anything here ever
&gt; does!)

&gt; Anyway, here is a &quot;copy and past&quot; of what I posted elsewhere!

&gt; All -

&gt; Anonymous's last post got me thinking, and I reviewed my c:\ drive for
&gt; some articles I had culled regarding this problem, which is namely,

&gt; &quot;What methodologies/methods should we apply to what domains of
&gt; problems?&quot;

&gt; I have three seminal works by Robert Glass that are directly relevant
&gt; here (you will need ACM and/or IEEE membership to get these, but I can
&gt; help you):

&gt; &quot;Contemporary Application Domain Taxonomies&quot;
&gt; http://portal.acm.org/citation.cfm?id=625489

&gt; &quot;Some Heresy Regarding Software Engineering&quot;
&gt; http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?tp=&amp;arnumber;=1309657&amp;i...;

&gt; &quot;Matching Methodology to Problem Domain&quot;
&gt; http://portal.acm.org/citation.cfm?id=986228

&gt; In these works Glass makes it abundantly clear how **little** work has
&gt; been done in this area, by either industry or academia, and so this
&gt; might be an opportunity for some (relatively) groundbreaking work.

&gt; Those interested in exploring this aspect independently of &lt;CLC and
&gt; other Forums&gt;, please post here in this thread, or contact me offline
&gt; at my e-mail address. The goal for this exploration should be
&gt; initially modest (I have a fair amount of personal business to attend
&gt; to in the short term, which limits my time), but could be on the order
&gt; of accumulating enough &quot;stuff&quot; (viewpoints, rough &quot;artifacts&quot;) to
&gt; present a &quot;Roundtable&quot;, &quot;Birds of a Feather&quot;, &quot;Panel&quot;, or simply
&gt; &quot;Gathering&quot; at something like GLSEC (Great Lakes Software Excellence
&gt; Conference), but certainly not so much as to qualify as a &quot;seminar&quot; or
&gt; &quot;workshop&quot;, let alone a &quot;conference&quot; :-).

&gt; I think for the time being this effort would be organized as a simple
&gt; cc: list for some occasional group e-mailings, and not yet anything
&gt; more structured.

&gt; But I'd like to get started on it by accumlating a list of interested
&gt; parties?

&gt; Any takers?

&gt; Ken
">

This response may be more low level than you are looking for. I am not
heavily into project management although I have been exposed to CMM.  I was
not impressed with how it was implemented where I work.  People often
generated a lot of the required documentaion after the fact so it was not
true CMM.

For business application I have found data flow diagrams, process mini specs
and data dictionaries helpful.  See &quot;How to Design and Develop Business
systems&quot; by Steve Eckols.  This book is dated by now. I have used
data-structured design. See &quot;Programming on Purpose&quot; seriesby P.J. Plager.

For CICS I have found screen flow diagrams helpful. See &quot;CICS for the COBOL
Programmer&quot; by Doug Lowe.

For manitenance I have used structure charts to show what
CALLs/PERFORMs/XCTLs/LINKs  what.  For some twisted logic flowcharts can
help, and where they don't help a debugger that allows breakpoints and
tracing usually works.

For OO design patterns are great. See &quot;head First Design Patterns&quot;.
</POST>
<POST>
<POSTER> &quot;Charles Hottel&quot; &lt;chot...@earthlink.net&gt; </POSTER>
<POSTDATE> 2008-01-23T19:37:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&lt;klsha ... @att.net&gt; wrote in message
">

news:5fc209c8-8bc2-483f-9e81-d8818fe51ab1@c23g2000hsa.googlegroups.com ...
On Jan 22, 10:57 pm, &quot;Pete Dashwood&quot;

<QUOTE PREVIOUSPOST="
&lt;dashw ... @removethis.enternet.co.nz&gt; wrote:

&gt; Not at this stage, Ken. I believe it will be too dry and Academic to
&gt; interest me, and I can't/won't contribute to a pissing contest about
&gt; methodologies, none of which I believe to be perfect... :-)

&gt; Nevertheless, I wish you luck with it :-)

&gt; Pete.
">

Uhh, can you get me a pre-publication copy of your book? :-)

Ken

See: www.amazon.com/HowToBedWomenAll OverTheWorld
</POST>
<POST>
<POSTER> Robert &lt;n...@e.mail&gt; </POSTER>
<POSTDATE> 2008-01-23T20:20:00 </POSTDATE>
On Wed, 23 Jan 2008 16:57:36 +1300, &quot;Pete Dashwood&quot; &lt;dashw ... @removethis.enternet.co.nz&gt;
wrote:

<QUOTE PREVIOUSPOST="
&gt;&lt;klsha ... @att.net&gt; wrote in message
&gt; news:519b9104-a107-4f9d-b341-781c2185da40@d4g2000prg.googlegroups.com ...
&gt;&gt; All -

&gt;&gt; Haven't been here for a while due to personal demands, but now that
&gt;&gt; I'm back, I wanted to put out an informal Call for Participation along
&gt;&gt; the following lines. In another forum I participate in we discuss
&gt;&gt; methodological approaches more than languages (eg. CMM vs. Agile).
&gt;&gt; Here is the essence of a post I put out there, and I'm putting it in
&gt;&gt; CLC to solicit the CoBOL angle, to wit, what methodologies are you
&gt;&gt; using in your CoBOL efforts: structured analysis / structured design,
&gt;&gt; object-oriented, custom, code-and-fix :-), whatever. CoBOL to
&gt;&gt; &quot;language-du-jour&quot; converts' opinions also welcome (that's at least
&gt;&gt; *you*, Mr. Pete Dashwood :-) ).

&gt;I believe that any attempt at problem solution that is driven from a
&gt;Language perspective will not be optimum, so looking for approaches taken
&gt;with COBOL (as opposed to anything else) for me, is a non-starter.

&gt;I apply the same problem solution approaches no matter WHAT language is in
&gt;use.
">

The dozen methodologies I've used were agnostic to language. It didn't matter whether they
were heavyweight, such as CMM, or lightweight, such as Agile and XP. They treat the
programming act as a black box. They control the inputs -- requirements, planning and
design -- and the outputs -- testing, implementation, training. The black box they do not
care about, called 'build',  includes detailed design, coding, peer review, programming
standards, change control and unit testing. One gets the impression methodology designers
regard developers (geeks) as inherently uncontrollable. I knew one who said &quot;it's like
trying to herd cats.&quot;

At one big company there was a checklist of the steps to get a change made, start to
finish. There were 150 steps on the liist, of which ONE was the programming act. It said
simply &quot;Make the program change.&quot; There was SECOND checklist breaking that step out into
25 activities. That second list was maintained by technical management; it was not part of
the corporate methodology. It is what passes for methodology in shops that don't really
have a formal methodology, shops run by programmer types.

Both lists aimed to avoid mistakes, increase productivity and make users happy. The
difference was the methodology developed by programmers (second list) revolved around
source code, whereas the first list regarded source code as almost irrelevant. The formal
methodology (first list) was used on projects that involved no software at all.

<QUOTE PREVIOUSPOST="
&gt;1. No single one of the current methodologies works to complete satisfaction
&gt;(with the POSSIBLE exception of DSDM...) when applied by itself, alone.
&gt;2. There is a marked lack of imagination on the part of both Business
&gt;Management and Technical Management when addressing this problem.
&gt;3. The main reason for software engineering failures is very bright
&gt;technical people being poorly led by managers who secretly despise them, and
&gt;have little or no understanding of what they do/need. (Point being: It isn't
&gt;necessarily about Methodology...)
">

&quot;You must know there are two ways of contesting, the one by the law, the other by force;
the first method is proper to men, the second to beasts; but because the first is
frequently not sufficient, it is necessary to have recourse to the second. Therefore it is
necessary for a prince to understand how to avail himself of the beast and the man - just
one is not enough.&quot;

<QUOTE PREVIOUSPOST="
&gt;4. It IS possible to formulate a General Solution to commercial software
&gt;engineering, that will solve more than 80% of the problems projects
&gt;encounter. (However, doing so requires vision, imagination, and acceptance
&gt;of change which most organisations are not capable of, or simply don't
&gt;have.) This &quot;general solution&quot; is possible because, at least in the domain
&gt;of commercial software solution engineering, there are the same (or very
&gt;similar) &quot;general problems&quot; that manifest thermselves on every project,
&gt;despite the fact that EVERY Management team believes THEY are unique and
&gt;THEIR business is completely different from everyone else's.
">

This made me smile. A running joke between computer company technical consultants is the
introductory statement from Mr. Big,  &quot;This company is unique.&quot; We knew it wasn't;  it was
like all the others. It was difficult to suppress laughter until we were out of his
office.

<QUOTE PREVIOUSPOST="
&gt; I think this
&gt;myopia occurs because they are not capable of the pattern recognition that
&gt;their tech staff do instinctively.
">

I think it's ego. 'Only a genius like me can understand the complex problems we face.'

<QUOTE PREVIOUSPOST="
&gt;I am postulating a completely different approach, but I don't want to spoil
&gt;it by pre-announcing it here. I WILL say that it includes the best points of
&gt;several currently successful methodologies, along with some quite innovative
&gt;ideas, based on my own experience and what I've found to work. I can also
&gt;say that it is as far divorced from Waterfall as it is possible to get :-)
">

So are ALL Agile methods .. they say. Close inspection reveals the only difference is
shorter iterations. They seduce programmers into thinking they can be cowboys again, while
management thinks it's getting more output for less money.

Machiavelli wrote the seminal work on software management. He said a prince who does not
raise the contempt of the nobles and keeps the people satisfied should have no fear of
conspirators.

&quot;If a prince seizes a state, all the required injuries should be inflicted at one stroke.
This way it is not necessary to every day be a little evil. Injuries should be inflicted
once, swiftly - so that it may be forgotten. A prince should however deliver frequent,
small benefits to his people so that its positive effects last longer.&quot;

<QUOTE PREVIOUSPOST="
&gt;Amazingly, I have a track record of 20 years in PM without a failure (1
&gt;project was not completed due to international corporate politics, over
&gt;which I had no control), yet I have NEVER implemented (completely) the
&gt;standard approach required on any particular site. Had I done so, the
&gt;project would have failed.:-)
">

I don't understand this talk about cost overruns and missed deadlines. I've never worked
on a project that wasn't delivered on time .. using existing methodologies.

<QUOTE PREVIOUSPOST="
&gt;I believe the factors required for successful implementation are not easily
&gt;identifiable or quantifiable and I address this in the book. Certainly some
&gt;of them cannot be taught, but must be learned by observation and experience.
&gt;It IS possible to raise awareness of them and suggest some approaches...
">

&quot;In order to imitate war victories of other illustrious men and avoid defeats, a prince
should study war histories to learn the causes of war victories and defeats.&quot;
</POST>
<POST>
<POSTER> &quot;Charles Hottel&quot; &lt;chot...@earthlink.net&gt; </POSTER>
<POSTDATE> 2008-01-23T20:28:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Robert&quot; &lt;n ... @e.mail&gt; wrote in message
">

news:3khfp39ibgkkhus4ut98c2q6a20he77idq@4ax.com ...

<QUOTE PREVIOUSPOST="
&gt; On Wed, 23 Jan 2008 16:57:36 +1300, &quot;Pete Dashwood&quot;
&gt; &lt;dashw ... @removethis.enternet.co.nz&gt;
&gt; wrote:

&gt;&gt;&lt;klsha ... @att.net&gt; wrote in message
&gt;&gt; news:519b9104-a107-4f9d-b341-781c2185da40@d4g2000prg.googlegroups.com ...
&gt;&gt;&gt; All -

&gt;&gt;&gt; Haven't been here for a while due to personal demands, but now that
&gt;&gt;&gt; I'm back, I wanted to put out an informal Call for Participation along
&gt;&gt;&gt; the following lines. In another forum I participate in we discuss
&gt;&gt;&gt; methodological approaches more than languages (eg. CMM vs. Agile).
&gt;&gt;&gt; Here is the essence of a post I put out there, and I'm putting it in
&gt;&gt;&gt; CLC to solicit the CoBOL angle, to wit, what methodologies are you
&gt;&gt;&gt; using in your CoBOL efforts: structured analysis / structured design,
&gt;&gt;&gt; object-oriented, custom, code-and-fix :-), whatever. CoBOL to
&gt;&gt;&gt; &quot;language-du-jour&quot; converts' opinions also welcome (that's at least
&gt;&gt;&gt; *you*, Mr. Pete Dashwood :-) ).

&gt;&gt;I believe that any attempt at problem solution that is driven from a
&gt;&gt;Language perspective will not be optimum, so looking for approaches taken
&gt;&gt;with COBOL (as opposed to anything else) for me, is a non-starter.

&gt;&gt;I apply the same problem solution approaches no matter WHAT language is in
&gt;&gt;use.

&gt; The dozen methodologies I've used were agnostic to language. It didn't
&gt; matter whether they
&gt; were heavyweight, such as CMM, or lightweight, such as Agile and XP. They
&gt; treat the
&gt; programming act as a black box. They control the inputs -- requirements,
&gt; planning and
&gt; design -- and the outputs -- testing, implementation, training. The black
&gt; box they do not
&gt; care about, called 'build',  includes detailed design, coding, peer
&gt; review, programming
&gt; standards, change control and unit testing. One gets the impression
&gt; methodology designers
&gt; regard developers (geeks) as inherently uncontrollable. I knew one who
&gt; said &quot;it's like
&gt; trying to herd cats.&quot;

&gt; At one big company there was a checklist of the steps to get a change
&gt; made, start to
&gt; finish. There were 150 steps on the liist, of which ONE was the
&gt; programming act. It said
&gt; simply &quot;Make the program change.&quot; There was SECOND checklist breaking that
&gt; step out into
&gt; 25 activities. That second list was maintained by technical management; it
&gt; was not part of
&gt; the corporate methodology. It is what passes for methodology in shops that
&gt; don't really
&gt; have a formal methodology, shops run by programmer types.

&gt; Both lists aimed to avoid mistakes, increase productivity and make users
&gt; happy. The
&gt; difference was the methodology developed by programmers (second list)
&gt; revolved around
&gt; source code, whereas the first list regarded source code as almost
&gt; irrelevant. The formal
&gt; methodology (first list) was used on projects that involved no software at
&gt; all.

&gt;&gt;1. No single one of the current methodologies works to complete
&gt;&gt;satisfaction
&gt;&gt;(with the POSSIBLE exception of DSDM...) when applied by itself, alone.
&gt;&gt;2. There is a marked lack of imagination on the part of both Business
&gt;&gt;Management and Technical Management when addressing this problem.
&gt;&gt;3. The main reason for software engineering failures is very bright
&gt;&gt;technical people being poorly led by managers who secretly despise them,
&gt;&gt;and
&gt;&gt;have little or no understanding of what they do/need. (Point being: It
&gt;&gt;isn't
&gt;&gt;necessarily about Methodology...)

&gt; &quot;You must know there are two ways of contesting, the one by the law, the
&gt; other by force;
&gt; the first method is proper to men, the second to beasts; but because the
&gt; first is
&gt; frequently not sufficient, it is necessary to have recourse to the second.
&gt; Therefore it is
&gt; necessary for a prince to understand how to avail himself of the beast and
&gt; the man - just
&gt; one is not enough.&quot;

&gt;&gt;4. It IS possible to formulate a General Solution to commercial software
&gt;&gt;engineering, that will solve more than 80% of the problems projects
&gt;&gt;encounter. (However, doing so requires vision, imagination, and acceptance
&gt;&gt;of change which most organisations are not capable of, or simply don't
&gt;&gt;have.) This &quot;general solution&quot; is possible because, at least in the domain
&gt;&gt;of commercial software solution engineering, there are the same (or very
&gt;&gt;similar) &quot;general problems&quot; that manifest thermselves on every project,
&gt;&gt;despite the fact that EVERY Management team believes THEY are unique and
&gt;&gt;THEIR business is completely different from everyone else's.

&gt; This made me smile. A running joke between computer company technical
&gt; consultants is the
&gt; introductory statement from Mr. Big,  &quot;This company is unique.&quot; We knew it
&gt; wasn't;  it was
&gt; like all the others. It was difficult to suppress laughter until we were
&gt; out of his
&gt; office.

&gt;&gt; I think this
&gt;&gt;myopia occurs because they are not capable of the pattern recognition that
&gt;&gt;their tech staff do instinctively.

&gt; I think it's ego. 'Only a genius like me can understand the complex
&gt; problems we face.'

&gt;&gt;I am postulating a completely different approach, but I don't want to
&gt;&gt;spoil
&gt;&gt;it by pre-announcing it here. I WILL say that it includes the best points
&gt;&gt;of
&gt;&gt;several currently successful methodologies, along with some quite
&gt;&gt;innovative
&gt;&gt;ideas, based on my own experience and what I've found to work. I can also
&gt;&gt;say that it is as far divorced from Waterfall as it is possible to get :-)

&gt; So are ALL Agile methods .. they say. Close inspection reveals the only
&gt; difference is
&gt; shorter iterations. They seduce programmers into thinking they can be
&gt; cowboys again, while
&gt; management thinks it's getting more output for less money.

&gt; Machiavelli wrote the seminal work on software management. He said a
&gt; prince who does not
&gt; raise the contempt of the nobles and keeps the people satisfied should
&gt; have no fear of
&gt; conspirators.

&gt; &quot;If a prince seizes a state, all the required injuries should be inflicted
&gt; at one stroke.
&gt; This way it is not necessary to every day be a little evil. Injuries
&gt; should be inflicted
&gt; once, swiftly - so that it may be forgotten. A prince should however
&gt; deliver frequent,
&gt; small benefits to his people so that its positive effects last longer.&quot;

&gt;&gt;Amazingly, I have a track record of 20 years in PM without a failure (1
&gt;&gt;project was not completed due to international corporate politics, over
&gt;&gt;which I had no control), yet I have NEVER implemented (completely) the
&gt;&gt;standard approach required on any particular site. Had I done so, the
&gt;&gt;project would have failed.:-)

&gt; I don't understand this talk about cost overruns and missed deadlines.
&gt; I've never worked
&gt; on a project that wasn't delivered on time .. using existing
&gt; methodologies.

&gt;&gt;I believe the factors required for successful implementation are not
&gt;&gt;easily
&gt;&gt;identifiable or quantifiable and I address this in the book. Certainly
&gt;&gt;some
&gt;&gt;of them cannot be taught, but must be learned by observation and
&gt;&gt;experience.
&gt;&gt;It IS possible to raise awareness of them and suggest some approaches...

&gt; &quot;In order to imitate war victories of other illustrious men and avoid
&gt; defeats, a prince
&gt; should study war histories to learn the causes of war victories and
&gt; defeats.&quot;
">

In my early days as a progrmmer a frequent project was: make a listing of
this tray of cards for the user

The first step was to prepare a pert chart.  I usually listed the cards
first, gave them to the user and drew the chart later.
</POST>
<POST>
<POSTER> Robert &lt;n...@e.mail&gt; </POSTER>
<POSTDATE> 2008-01-23T21:26:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
On Wed, 23 Jan 2008 17:39:23 -0600, &quot;tlmfru&quot; &lt;la ... @mts.net&gt; wrote:

&gt;Pete Dashwood &lt;dashw ... @removethis.enternet.co.nz&gt; wrote in message
&gt; news:5vns9hF1ns38fU1@mid.individual.net ...
&gt;&gt; I believe that any attempt at problem solution that is driven from a
&gt;&gt; Language perspective will not be optimum, so looking for approaches taken
&gt;&gt; with COBOL (as opposed to anything else) for me, is a non-starter.

&gt;&gt; I apply the same problem solution approaches no matter WHAT language is in
&gt;&gt; use.

&gt;If by this you mean that selecting the language first is a non-starter -
&gt;then you're absolutely right.  But if you mean that the language to be used
&gt;is of no consequence, then I venture to disagree.  Obvious examples: report
&gt;writers (including the much maligned RPG); FORTRAN in its place; or
&gt;assemblers for interacting directly with the hardware - shouldn't be a
&gt;priori ruled out.
">

Hey, crank up the Wayback Machine. How about IBM 650 SOAP (not to be confused with Simple
Object Access Protocol, this SOAP is about optimized drum storage)?
</POST>
<POST>
<POSTER> &quot;klsha...@att.net&quot; &lt;klsha...@att.net&gt; </POSTER>
<POSTDATE> 2008-01-23T21:34:00 </POSTDATE>
On Jan 23, 8:20 pm, Robert &lt;n ... @e.mail&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Wed, 23 Jan 2008 16:57:36 +1300, &quot;Pete Dashwood&quot; &lt;dashw ... @removethis.enternet.co.nz&gt;
&gt; wrote:

&gt; I don't understand this talk about cost overruns and missed deadlines. I've never worked
&gt; on a project that wasn't delivered on time .. using existing methodologies.
">

I am not being deliberately *cheeky* here, but could you cite me some
of those &quot;existing&quot; methodologies and the general application domain
(insurance, process control, government, etc.) that the project was
on? This is the real *empirical* heart-of-the-matter I am trying to
touch. And to point out the-not-obvious-to-others-lie-of &quot;the
traditional methods never work.&quot; Or maybe the existing ones you are
referring to are Agile-OO?

<QUOTE PREVIOUSPOST="
&gt;&quot;If a prince seizes a state, all the required injuries should be inflicted at one stroke.
&gt;This way it is not necessary to every day be a little evil. Injuries should be inflicted
&gt;once, swiftly - so that it may be forgotten. A prince should however deliver frequent,
&gt;small benefits to his people so that its positive effects last longer.&quot;
">

I have quietly fed up the rumor-chain, more than once to a management
clique, that it is far, far better to &quot;cut once, cut deep, cut to the
bone&quot;, and then *immediately* reassure everyone left that they are
*safe* (well, as safe as any one can be nowadays.) There is nothing
more destructive of morale and deleterious to a project than the drip,
drip, drip of attrition and going to work every day wondering, &quot;Am I
next?&quot; That this is so self-evident and yet so often ignored always
amazes me.

Ken
</POST>
<POST>
<POSTER> &quot;klsha...@att.net&quot; &lt;klsha...@att.net&gt; </POSTER>
<POSTDATE> 2008-01-23T21:36:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&gt; It could be the shift from 'curative coding to, perhaps, 'palliative
&gt; programming'.

&gt; DD
">

Palliative programming? That actually is very, VERY good! So apt! So
descriptive! I'm so glad I prompted you! I will have to tell the
*World* that it was a Doc who coined the term!

Ken
</POST>
<POST>
<POSTER> Robert &lt;n...@e.mail&gt; </POSTER>
<POSTDATE> 2008-01-23T21:41:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
On Wed, 23 Jan 2008 19:32:33 -0500, &quot;Charles Hottel&quot; &lt;chot ... @earthlink.net&gt; wrote:
&gt;This response may be more low level than you are looking for. I am not
&gt;heavily into project management although I have been exposed to CMM.  I was
&gt;not impressed with how it was implemented where I work.  People often
&gt;generated a lot of the required documentaion after the fact so it was not
&gt;true CMM.
">

That's the RIGHT way. First write the program, then the detailed design. They always
agree! There's no rework and you can use interns or offshore contractors rather than
wasting programmer time. I'm not joking, that's how it's done in F-100 companies.

<QUOTE PREVIOUSPOST="
&gt;For manitenance I have used structure charts to show what
&gt;CALLs/PERFORMs/XCTLs/LINKs  what.  For some twisted logic flowcharts can
&gt;help
">

What's a flowchart? I think I saw one in the '70s.
</POST>
<POST>
<POSTER> Robert &lt;n...@e.mail&gt; </POSTER>
<POSTDATE> 2008-01-23T22:41:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
On Wed, 23 Jan 2008 18:34:15 -0800 (PST), &quot;klsha ... @att.net&quot; &lt;klsha ... @att.net&gt; wrote:
&gt;On Jan 23, 8:20 pm, Robert &lt;n ... @e.mail&gt; wrote:
&gt;&gt; On Wed, 23 Jan 2008 16:57:36 +1300, &quot;Pete Dashwood&quot; &lt;dashw ... @removethis.enternet.co.nz&gt;
&gt;&gt; wrote:

&gt;&gt; I don't understand this talk about cost overruns and missed deadlines. I've never worked
&gt;&gt; on a project that wasn't delivered on time .. using existing methodologies.

&gt;I am not being deliberately *cheeky* here, but could you cite me some
&gt;of those &quot;existing&quot; methodologies and the general application domain
&gt;(insurance, process control, government, etc.) that the project was
&gt;on? This is the real *empirical* heart-of-the-matter I am trying to
&gt;touch. And to point out the-not-obvious-to-others-lie-of &quot;the
&gt;traditional methods never work.&quot; Or maybe the existing ones you are
&gt;referring to are Agile-OO?
">

All were CMM-3 or similar, none OO. The one I'm on now is CMM trying to be lightweight
with two month iterations; most were six month.  All were very large companies or
government agencies.

Retail, Y2K fix on 100 very large assembly language programs, used interns to document per
Keane methodology

Insurance, enhancements, first project on CMM-3

Government Student Loan, enhancements, EDS

Government Child Welfare, enhancements, Accenture

Pharmaceutical discounts and rebates, rehost from AS/400 to Unix, CMM-3

Pharmaceutical charge clearinghouse, enhacements,  CMM - one month iterations

Distribution, convert screens from text to GUI, CMM

Retail, add make for new platforms and test 500 programs, home-grown Wal-Mart

Soft drink, convert billing system to SAP, CMM (IBM)

Telephone, enhance billing for major acquisition, CMM - two month iterations
</POST>
<POST>
<POSTER> &quot;tlmfru&quot; &lt;la...@mts.net&gt; </POSTER>
<POSTDATE> 2008-01-24T00:17:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Robert &lt;n ... @e.mail&gt; wrote in message
">

news:lktfp31najs2v8eghvupu102v9j3b447n4@4ax.com ...

<QUOTE PREVIOUSPOST="
&gt; Hey, crank up the Wayback Machine. How about IBM 650 SOAP (not to be
">

confused with Simple

<QUOTE PREVIOUSPOST="
&gt; Object Access Protocol, this SOAP is about optimized drum storage)?
">

What new-fangled nonsense is this?  Don't you know that mercury delay lines
haven't reached their full potential yet???
</POST>
<POST>
<POSTER> &quot;Pete Dashwood&quot; &lt;dashw...@removethis.enternet.co.nz&gt; </POSTER>
<POSTDATE> 2008-01-24T03:06:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&lt;klsha ... @att.net&gt; wrote in message
">

news:5fc209c8-8bc2-483f-9e81-d8818fe51ab1@c23g2000hsa.googlegroups.com ...
On Jan 22, 10:57 pm, &quot;Pete Dashwood&quot;

<QUOTE PREVIOUSPOST="
&lt;dashw ... @removethis.enternet.co.nz&gt; wrote:

&gt; Not at this stage, Ken. I believe it will be too dry and Academic to
&gt; interest me, and I can't/won't contribute to a pissing contest about
&gt; methodologies, none of which I believe to be perfect... :-)

&gt; Nevertheless, I wish you luck with it :-)

&gt; Pete.
&gt;Uhh, can you get me a pre-publication copy of your book? :-)
">

Sure. Can you get me the cover price :-)?

Pete.
--
&quot;I used to write COBOL...now I can do anything.&quot;
</POST>
<POST>
<POSTER> &quot;Pete Dashwood&quot; &lt;dashw...@removethis.enternet.co.nz&gt; </POSTER>
<POSTDATE> 2008-01-24T03:24:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;tlmfru&quot; &lt;la ... @mts.net&gt; wrote in message
">

news:hfQlj.10319$M24.5411@newsfe17.lga ...

<QUOTE PREVIOUSPOST="
&gt; Pete Dashwood &lt;dashw ... @removethis.enternet.co.nz&gt; wrote in message
&gt; news:5vns9hF1ns38fU1@mid.individual.net ...
&gt;&gt; I believe that any attempt at problem solution that is driven from a
&gt;&gt; Language perspective will not be optimum, so looking for approaches taken
&gt;&gt; with COBOL (as opposed to anything else) for me, is a non-starter.

&gt;&gt; I apply the same problem solution approaches no matter WHAT language is
&gt;&gt; in
&gt;&gt; use.

&gt; If by this you mean that selecting the language first is a non-starter -
&gt; then you're absolutely right.  But if you mean that the language to be
&gt; used
&gt; is of no consequence, then I venture to disagree.
">

I have consistently maintained the position, (both here in CLC, and in
&quot;real&quot; life :-)), that the best tools for the job should be used. I
suggested this position here more than 12 years ago when the generally
accepted response was &quot;Everything I want to do, I can do in COBOL&quot;. I
suggested people might do well to expand their skill sets, learn Java for
example, and get a few more tools in the box alongside COBOL. I took my own
advice and learned Java (it helped my understanding of OO COBOL apart from
anything else...), and later (just over a year ago) moved to C#. During my
career I have programmed with Fortran, PL/I, Delphi (Pascal), Basic, VB and
half a dozen Assembler Languages.

I would NEVER advocate tying development to a single language. Neither would
I advocate just using ANY language for any particular development (...the
Language IS of consequence...).

We got away with it for COBOL because it was a centralized platform, the
procedural paradigm was adequate for most of what we wanted to do, and it
was financially and technically intimidating to maintain costly skill bases
for more than one language, where code was maintained line by line.
Furthermore, COBOL is/was ideally suited to commercial batch processing,
anyway.

Today the environment is richer, the Network is King and we NEED a richer
toolset.

<QUOTE PREVIOUSPOST="
&gt;Obvious examples: report
&gt; writers (including the much maligned RPG); FORTRAN in its place; or
&gt; assemblers for interacting directly with the hardware - shouldn't be a
&gt; priori ruled out.
">

NOTHING should be a priori ruled out...:-)

<QUOTE PREVIOUSPOST="
&gt; It'll be interesting to see your book.  Something written by an
&gt; experienced
&gt; practitioner as opposed to a theorist (who quite often has an axe to
&gt; grind)
&gt; should be a treat.
">

Thank you for the encouragement. I'll try not to disappoint... :-)

Pete.
--
&quot;I used to write COBOL...now I can do anything.&quot;
</POST>
<POST>
<POSTER> &quot;Pete Dashwood&quot; &lt;dashw...@removethis.enternet.co.nz&gt; </POSTER>
<POSTDATE> 2008-01-24T03:38:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Robert&quot; &lt;n ... @e.mail&gt; wrote in message
">

news:3khfp39ibgkkhus4ut98c2q6a20he77idq@4ax.com ...

<QUOTE PREVIOUSPOST="
&gt; On Wed, 23 Jan 2008 16:57:36 +1300, &quot;Pete Dashwood&quot;
&gt; &lt;dashw ... @removethis.enternet.co.nz&gt;
&gt; wrote:

&gt;&gt;&lt;klsha ... @att.net&gt; wrote in message
&gt;&gt; news:519b9104-a107-4f9d-b341-781c2185da40@d4g2000prg.googlegroups.com ...
&gt;&gt;&gt; All -

&gt;&gt;&gt; Haven't been here for a while due to personal demands, but now that
&gt;&gt;&gt; I'm back, I wanted to put out an informal Call for Participation along
&gt;&gt;&gt; the following lines. In another forum I participate in we discuss
&gt;&gt;&gt; methodological approaches more than languages (eg. CMM vs. Agile).
&gt;&gt;&gt; Here is the essence of a post I put out there, and I'm putting it in
&gt;&gt;&gt; CLC to solicit the CoBOL angle, to wit, what methodologies are you
&gt;&gt;&gt; using in your CoBOL efforts: structured analysis / structured design,
&gt;&gt;&gt; object-oriented, custom, code-and-fix :-), whatever. CoBOL to
&gt;&gt;&gt; &quot;language-du-jour&quot; converts' opinions also welcome (that's at least
&gt;&gt;&gt; *you*, Mr. Pete Dashwood :-) ).

&gt;&gt;I believe that any attempt at problem solution that is driven from a
&gt;&gt;Language perspective will not be optimum, so looking for approaches taken
&gt;&gt;with COBOL (as opposed to anything else) for me, is a non-starter.

&gt;&gt;I apply the same problem solution approaches no matter WHAT language is in
&gt;&gt;use.

&gt; The dozen methodologies I've used were agnostic to language. It didn't
&gt; matter whether they
&gt; were heavyweight, such as CMM, or lightweight, such as Agile and XP. They
&gt; treat the
&gt; programming act as a black box. They control the inputs -- requirements,
&gt; planning and
&gt; design -- and the outputs -- testing, implementation, training. The black
&gt; box they do not
&gt; care about, called 'build',  includes detailed design, coding, peer
&gt; review, programming
&gt; standards, change control and unit testing. One gets the impression
&gt; methodology designers
&gt; regard developers (geeks) as inherently uncontrollable. I knew one who
&gt; said &quot;it's like
&gt; trying to herd cats.&quot;

&gt; At one big company there was a checklist of the steps to get a change
&gt; made, start to
&gt; finish. There were 150 steps on the liist, of which ONE was the
&gt; programming act. It said
&gt; simply &quot;Make the program change.&quot; There was SECOND checklist breaking that
&gt; step out into
&gt; 25 activities. That second list was maintained by technical management; it
&gt; was not part of
&gt; the corporate methodology. It is what passes for methodology in shops that
&gt; don't really
&gt; have a formal methodology, shops run by programmer types.

&gt; Both lists aimed to avoid mistakes, increase productivity and make users
&gt; happy. The
&gt; difference was the methodology developed by programmers (second list)
&gt; revolved around
&gt; source code, whereas the first list regarded source code as almost
&gt; irrelevant. The formal
&gt; methodology (first list) was used on projects that involved no software at
&gt; all.
">

I can relate to this and have been in companies where it was certainly the
case. Your analysis of it is perceptive.

<QUOTE PREVIOUSPOST="
- Hide quoted text - - Show quoted text -
">

<QUOTE PREVIOUSPOST="
&gt;&gt;1. No single one of the current methodologies works to complete
&gt;&gt;satisfaction
&gt;&gt;(with the POSSIBLE exception of DSDM...) when applied by itself, alone.
&gt;&gt;2. There is a marked lack of imagination on the part of both Business
&gt;&gt;Management and Technical Management when addressing this problem.
&gt;&gt;3. The main reason for software engineering failures is very bright
&gt;&gt;technical people being poorly led by managers who secretly despise them,
&gt;&gt;and
&gt;&gt;have little or no understanding of what they do/need. (Point being: It
&gt;&gt;isn't
&gt;&gt;necessarily about Methodology...)

&gt; &quot;You must know there are two ways of contesting, the one by the law, the
&gt; other by force;
&gt; the first method is proper to men, the second to beasts; but because the
&gt; first is
&gt; frequently not sufficient, it is necessary to have recourse to the second.
&gt; Therefore it is
&gt; necessary for a prince to understand how to avail himself of the beast and
&gt; the man - just
&gt; one is not enough.&quot;
">

Law and force are not the ONLY two ways... there are others.

<QUOTE PREVIOUSPOST="
- Hide quoted text - - Show quoted text -
">

<QUOTE PREVIOUSPOST="
&gt;&gt;4. It IS possible to formulate a General Solution to commercial software
&gt;&gt;engineering, that will solve more than 80% of the problems projects
&gt;&gt;encounter. (However, doing so requires vision, imagination, and acceptance
&gt;&gt;of change which most organisations are not capable of, or simply don't
&gt;&gt;have.) This &quot;general solution&quot; is possible because, at least in the domain
&gt;&gt;of commercial software solution engineering, there are the same (or very
&gt;&gt;similar) &quot;general problems&quot; that manifest thermselves on every project,
&gt;&gt;despite the fact that EVERY Management team believes THEY are unique and
&gt;&gt;THEIR business is completely different from everyone else's.

&gt; This made me smile. A running joke between computer company technical
&gt; consultants is the
&gt; introductory statement from Mr. Big,  &quot;This company is unique.&quot; We knew it
&gt; wasn't;  it was
&gt; like all the others. It was difficult to suppress laughter until we were
&gt; out of his
&gt; office.

&gt;&gt; I think this
&gt;&gt;myopia occurs because they are not capable of the pattern recognition that
&gt;&gt;their tech staff do instinctively.

&gt; I think it's ego. 'Only a genius like me can understand the complex
&gt; problems we face.'

&gt;&gt;I am postulating a completely different approach, but I don't want to
&gt;&gt;spoil
&gt;&gt;it by pre-announcing it here. I WILL say that it includes the best points
&gt;&gt;of
&gt;&gt;several currently successful methodologies, along with some quite
&gt;&gt;innovative
&gt;&gt;ideas, based on my own experience and what I've found to work. I can also
&gt;&gt;say that it is as far divorced from Waterfall as it is possible to get :-)

&gt; So are ALL Agile methods .. they say. Close inspection reveals the only
&gt; difference is
&gt; shorter iterations. They seduce programmers into thinking they can be
&gt; cowboys again, while
&gt; management thinks it's getting more output for less money.

&gt; Machiavelli wrote the seminal work on software management. He said a
&gt; prince who does not
&gt; raise the contempt of the nobles and keeps the people satisfied should
&gt; have no fear of
&gt; conspirators.

&gt; &quot;If a prince seizes a state, all the required injuries should be inflicted
&gt; at one stroke.
&gt; This way it is not necessary to every day be a little evil. Injuries
&gt; should be inflicted
&gt; once, swiftly - so that it may be forgotten. A prince should however
&gt; deliver frequent,
&gt; small benefits to his people so that its positive effects last longer.&quot;

&gt;&gt;Amazingly, I have a track record of 20 years in PM without a failure (1
&gt;&gt;project was not completed due to international corporate politics, over
&gt;&gt;which I had no control), yet I have NEVER implemented (completely) the
&gt;&gt;standard approach required on any particular site. Had I done so, the
&gt;&gt;project would have failed.:-)

&gt; I don't understand this talk about cost overruns and missed deadlines.
&gt; I've never worked
&gt; on a project that wasn't delivered on time .. using existing
&gt; methodologies.
">

Then you have done well, Robert. Most Project Managers cannot claim this. Of
course, it is easy to deliver projects on time if the deadlines are extended
:-) (I'm not suggesting you do that...:-))  Timeboxed projects CANNOT slip;
I like timeboxing.

<QUOTE PREVIOUSPOST="
&gt;&gt;I believe the factors required for successful implementation are not
&gt;&gt;easily
&gt;&gt;identifiable or quantifiable and I address this in the book. Certainly
&gt;&gt;some
&gt;&gt;of them cannot be taught, but must be learned by observation and
&gt;&gt;experience.
&gt;&gt;It IS possible to raise awareness of them and suggest some approaches...

&gt; &quot;In order to imitate war victories of other illustrious men and avoid
&gt; defeats, a prince
&gt; should study war histories to learn the causes of war victories and
&gt; defeats.&quot;
">

Given your partiality to Machiavelli, I'm sure you'll not be surprised that
Politics and Manipulation can both be added to Law and Force as useful
methods for contesting... :-)

Pete.
--
&quot;I used to write COBOL...now I can do anything.&quot;
</POST>
<POST>
<POSTER> &quot;Pete Dashwood&quot; &lt;dashw...@removethis.enternet.co.nz&gt; </POSTER>
<POSTDATE> 2008-01-24T03:51:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&lt;klsha ... @att.net&gt; wrote in message
">

news:5ecae817-8dd9-4a00-b792-f5ff511f002a@e6g2000prf.googlegroups.com ...
On Jan 23, 8:20 pm, Robert &lt;n ... @e.mail&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Wed, 23 Jan 2008 16:57:36 +1300, &quot;Pete Dashwood&quot;
&gt; &lt;dashw ... @removethis.enternet.co.nz&gt;
&gt; wrote:

&gt; I don't understand this talk about cost overruns and missed deadlines.
&gt; I've never worked
&gt; on a project that wasn't delivered on time .. using existing
&gt; methodologies.
">

I am not being deliberately *cheeky* here, but could you cite me some
of those &quot;existing&quot; methodologies and the general application domain
(insurance, process control, government, etc.) that the project was
on? This is the real *empirical* heart-of-the-matter I am trying to
touch. And to point out the-not-obvious-to-others-lie-of &quot;the
traditional methods never work.&quot; Or maybe the existing ones you are
referring to are Agile-OO?

<QUOTE PREVIOUSPOST="
&gt;&quot;If a prince seizes a state, all the required injuries should be inflicted
&gt;at one stroke.
&gt;This way it is not necessary to every day be a little evil. Injuries should
&gt;be inflicted
&gt;once, swiftly - so that it may be forgotten. A prince should however
&gt;deliver frequent,
&gt;small benefits to his people so that its positive effects last longer.&quot;
">

I have quietly fed up the rumor-chain, more than once to a management
clique, that it is far, far better to &quot;cut once, cut deep, cut to the
bone&quot;, and then *immediately* reassure everyone left that they are
*safe* (well, as safe as any one can be nowadays.) There is nothing
more destructive of morale and deleterious to a project than the drip,
drip, drip of attrition and going to work every day wondering, &quot;Am I
next?&quot; That this is so self-evident and yet so often ignored always
amazes me.

(Your post, like Alistair's, seems to be missing a chevron level when
replied to, so I'll prefix my comments with...[Pete:])

[Pete:]

Nobody should have to work bearing this particular fardel.

Contractors don't (and, if they do, they shouldn't be contracting...)

The only security anybody has is how useful they are to have around. Knowing
you can go down the road and get another job goes a long way to building
confidence and letting you focus on the job in hand without wondering or
fearing whether you are next for the chop.

How do you get to be &quot;useful to have around&quot;?  Expand your skill set,
educate yourself, and delight in what you do.

Pete.
--
&quot;I used to write COBOL...now I can do anything.&quot;
</POST>
<POST>
<POSTER> docdw...@panix.com () </POSTER>
<POSTDATE> 2008-01-24T06:05:00 </POSTDATE>
In article &lt;3khfp39ibgkkhus4ut98c2q6a20he77 ... @4ax.com&gt;,

<QUOTE PREVIOUSPOST="
Robert  &lt;n ... @e.mail&gt; wrote:
&gt;On Wed, 23 Jan 2008 16:57:36 +1300, &quot;Pete Dashwood&quot; &lt;dashw ... @removethis.enternet.co.nz&gt;
&gt;wrote:
">

[snip]

<QUOTE PREVIOUSPOST="
&gt;Both lists aimed to avoid mistakes, increase productivity and make users happy. The
&gt;difference was the methodology developed by programmers (second list) revolved around
&gt;source code, whereas the first list regarded source code as almost irrelevant. The formal
&gt;methodology (first list) was used on projects that involved no software at all.
">

It sounds like a good Corporate 'one size fits all' mentality, in that
software is considered to be just like any other tool or process.  The
folks in charge of software developed their own steps to deal with what
they find to be different about installing a chunk o' code to, say, move
money in a different direction... as opposed to the needs of buying a
truck to move money in a different direction.

[snip]

<QUOTE PREVIOUSPOST="
&gt;&gt;This &quot;general solution&quot; is possible because, at least in the domain
&gt;&gt;of commercial software solution engineering, there are the same (or very
&gt;&gt;similar) &quot;general problems&quot; that manifest thermselves on every project,
&gt;&gt;despite the fact that EVERY Management team believes THEY are unique and
&gt;&gt;THEIR business is completely different from everyone else's.

&gt;This made me smile. A running joke between computer company technical consultants is the
&gt;introductory statement from Mr. Big,  &quot;This company is unique.&quot; We knew it wasn't;  it was
&gt;like all the others.
">

Grabbing but one example of the several times I've expressed the
sentiment,
&lt; http://groups.google.com/group/comp.lang.cobol/msg/a720b9f80ca9e217?d... &gt;

--begin quoted text:

(Business Zen:  If, in all places, 'Things Are Different' then, in all
places, things are the same.)

--end quoted text

[snip]

<QUOTE PREVIOUSPOST="
&gt;&quot;In order to imitate war victories of other illustrious men and avoid defeats, a prince
&gt;should study war histories to learn the causes of war victories and defeats.&quot;
">

'The Great Prince issues commands, founds states, vests families with
fiefs.  Inferior people should not be employed' - I Ching

DD
</POST>
<POST>
<POSTER> docdw...@panix.com () </POSTER>
<POSTDATE> 2008-01-24T06:11:00 </POSTDATE>
In article &lt;5ecae817-8dd9-4a00-b792-f5ff511f0 ... @e6g2000prf.googlegroups.com&gt;,

<QUOTE PREVIOUSPOST="
klsha ... @att.net &lt;klsha ... @att.net&gt; wrote:
">

[snip]

<QUOTE PREVIOUSPOST="
&gt;There is nothing
&gt;more destructive of morale and deleterious to a project than the drip,
&gt;drip, drip of attrition and going to work every day wondering, &quot;Am I
&gt;next?&quot;
">

I recall seeing an advertising-poster in Grand Central Station shortly
after the Crash of 1987 - a time which caused, I believe, a fundamental
change in the American Business Model - which showed a picture of a Young
Business Type sitting in the back seat of a town-car/limousine staring
blankly out a rain-spattered window.  The copy read something like:

'Which is worse... being told Friday not to come back Monday or being told
Monday you have to take up the slack?'

DD
</POST>
<POST>
<POSTER> docdw...@panix.com () </POSTER>
<POSTDATE> 2008-01-24T06:15:00 </POSTDATE>
In article &lt;eb399072-2ca3-42b8-867f-35fd27546 ... @y5g2000hsf.googlegroups.com&gt;,

<QUOTE PREVIOUSPOST="
klsha ... @att.net &lt;klsha ... @att.net&gt; wrote:

&gt;&gt; It could be the shift from 'curative coding to, perhaps, 'palliative
&gt;&gt; programming'.

&gt;Palliative programming? That actually is very, VERY good! So apt! So
&gt;descriptive! I'm so glad I prompted you! I will have to tell the
&gt;*World* that it was a Doc who coined the term!
">

The best I can ask for is to be cited as a source by a good scholar... a
right close second, though, is to be the recipient of royalty-checks.

DD
</POST>
<POST>
<POSTER> &quot;klsha...@att.net&quot; &lt;klsha...@att.net&gt; </POSTER>
<POSTDATE> 2008-01-24T13:04:00 </POSTDATE>
On Jan 23, 8:20 pm, Robert &lt;n ... @e.mail&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Wed, 23 Jan 2008 16:57:36 +1300, &quot;Pete Dashwood&quot; &lt;dashw ... @removethis.enternet.co.nz&gt;
&gt; wrote:
">

Robert,

I found your list of methods/applications of interest and significant
value to me (empirically speaking, :-) ). I am gratified. Thank you.

<QUOTE PREVIOUSPOST="
&gt; So are ALL Agile methods .. they say. Close inspection reveals the only difference is
&gt; shorter iterations.
">

I suppose that *differences* make for interesting reading, and, as
they say, for generating much heat but little light, but for me, I
find &quot;what is common&quot; is more interesting. Maybe because I feel such a
need to just &quot;get along.&quot; :-)

To wit -

- Is not Agile Continuous Integration very similar to what we used to
do as Top-Down development, with stubs?
- Isn't TDD (Test Driven Development) very similar to Unit Testing
with Top-Down Development?,
- Isn't Agile &quot;customer on site&quot; very similar to the Analyst part of
the Analyst/Programmer (when there were such people, before they were
overcome with rote coders) walking down the Hall to see his User?
- Didn't the original Royce Waterfall article show feedback loops, not
only between adjoining steps in the SDLC, but jumping over steps, and
are not _these_ the Agile Iterations? (as in the Barry Boehm spiral
method.) (I somehow found the Royce Waterfall .pdf on the Web; if I
can find it again, and be convinced it is quasi-public-domain now, I
will post the link.)

I don't have the link, but I know I read it somewhere on the Web (so
it *must* be true :-) ), that much of Agile, and maybe the entirety of
the Agile Manifesto was in essence a _marketing move_. Let us not
begrudge them their success, to the extent that they are successful.
But neither let us lower our heads, brow beaten, through self-
submission to the thought that &quot;They have discovered something
Entirely New, which we Know Not.&quot;

Be not mistaken now, we, and by &quot;we&quot; I mean those such as *I*, neo-
Classicists, Traditionalists, Pragmatic Practitioners, in a Word, we
*Journeymen*, who do not deign to call ourselves Methodology Masters,
all owe the Agilists a great debt of gratitude.

It is they (the Agilists) who have brought &quot;refactoring&quot; into the
popular venacular, management-wise, so that &quot;rework&quot; is now not always
a &quot;dirty word&quot;. And it is they who have, more successfully than
others, driven the stake into the ground regarding what I call
Indivisibility (of effort), which contends that is very, very
difficult to completely separate analysis, design, coding, and testing
across a multitude of individuals, no matter _how_ good the
_documentation artifacts_ are.
Once upon a time, that was the rationale for &quot;Analyst/Programmer&quot;, was
it not?.

There once was a time, and maybe it was Our Time, and yes, maybe it is
*gone* now, that all of this was Common Knowledge.

But presently, what others might see as Nouveau Secrets are really
Ancient Wisdom, mostly forgotten.

As long as there are Journeymen and Apprentices, let it be passed
down.

How could we expect it to be otherwise?

Ken
</POST>
<POST>
<POSTER> &quot;klsha...@att.net&quot; &lt;klsha...@att.net&gt; </POSTER>
<POSTDATE> 2008-01-24T13:07:00 </POSTDATE>
On Jan 24, 3:06 am, &quot;Pete Dashwood&quot;

<QUOTE PREVIOUSPOST="
&lt;dashw ... @removethis.enternet.co.nz&gt; wrote:
&gt; &lt;klsha ... @att.net&gt; wrote in message

&gt; &gt;Uhh, can you get me a pre-publication copy of your book? :-)

&gt; Sure. Can you get me the cover price :-)?

&gt; Pete.
">

Does your bank accept cheques in $USD? Or is it better to send
International Money Order. Kindly solicit me at klshafer -at- att.net
and let us see what we can do.

Ken
</POST>
<POST>
<POSTER> Howard Brazee &lt;how...@brazee.net&gt; </POSTER>
<POSTDATE> 2008-01-24T13:22:00 </POSTDATE>
On Thu, 24 Jan 2008 10:04:37 -0800 (PST), &quot;klsha ... @att.net&quot;

<QUOTE PREVIOUSPOST="
&lt;klsha ... @att.net&gt; wrote:
&gt;*Journeymen*, who do not deign to call ourselves Methodology Masters,
&gt;all owe the Agilists a great debt of gratitude.
">

...

<QUOTE PREVIOUSPOST="
&gt;There once was a time, and maybe it was Our Time, and yes, maybe it is
&gt;*gone* now, that all of this was Common Knowledge.

&gt;But presently, what others might see as Nouveau Secrets are really
&gt;Ancient Wisdom, mostly forgotten.
">

Nice post.

I am reminded of a management seminar where the lecturer stated that
his teachings weren't the most important element of the seminar.   The
most important part was the reminder that it can be good to sit back
and think about your processes - and that management was willing to
spend time and money to remind us of that.    He hoped that his
insights would help people do their common sense - but the important
part wasn't learning arcane secrets - it was to be reminded to make
the analysis and work on improvement.
</POST>
<POST>
<POSTER> docdw...@panix.com () </POSTER>
<POSTDATE> 2008-01-24T14:07:00 </POSTDATE>
In article &lt;17da85f2-7c47-4ecd-b5cf-07f25f6cb ... @j78g2000hsd.googlegroups.com&gt;,

<QUOTE PREVIOUSPOST="
klsha ... @att.net &lt;klsha ... @att.net&gt; wrote:
&gt;On Jan 24, 3:06 am, &quot;Pete Dashwood&quot;
&gt;&lt;dashw ... @removethis.enternet.co.nz&gt; wrote:
&gt;&gt; &lt;klsha ... @att.net&gt; wrote in message

&gt;&gt; &gt;Uhh, can you get me a pre-publication copy of your book? :-)

&gt;&gt; Sure. Can you get me the cover price :-)?

&gt;&gt; Pete.

&gt;Does your bank accept cheques in $USD?
">

Perhaps not... but maybe his banque accepts checks.

DD
</POST>
<POST>
<POSTER> Alistair &lt;alist...@ld50macca.demon.co.uk&gt; </POSTER>
<POSTDATE> 2008-01-24T16:57:00 </POSTDATE>
On 23 Jan, 03:57, &quot;Pete Dashwood&quot; &lt;dashw ... @removethis.enternet.co.nz&gt;
wrote:

<QUOTE PREVIOUSPOST="
&gt; &lt;klsha ... @att.net&gt; wrote in message

&gt; news:519b9104-a107-4f9d-b341-781c2185da40@d4g2000prg.googlegroups.com ...

&gt; &gt; All -

&gt; &gt; Haven't been here for a while due to personal demands, but now that
&gt; &gt; I'm back, I wanted to put out an informal Call for Participation along
&gt; &gt; the following lines. In another forum I participate in we discuss
&gt; &gt; methodological approaches more than languages (eg. CMM vs. Agile).
&gt; &gt; Here is the essence of a post I put out there, and I'm putting it in
&gt; &gt; CLC to solicit the CoBOL angle, to wit, what methodologies are you
&gt; &gt; using in your CoBOL efforts: structured analysis / structured design,
&gt; &gt; object-oriented, custom, code-and-fix :-), whatever. CoBOL to
&gt; &gt; &quot;language-du-jour&quot; converts' opinions also welcome (that's at least
&gt; &gt; *you*, Mr. Pete Dashwood :-) ).

&gt; I believe that any attempt at problem solution that is driven from a
&gt; Language perspective will not be optimum, so looking for approaches taken
&gt; with COBOL (as opposed to anything else) for me, is a non-starter.

&gt; I apply the same problem solution approaches no matter WHAT language is in
&gt; use.

&gt; &gt; I guess it's OK to do some follow up here within this thread in CLC,
&gt; &gt; but seeing as how this is just a little bit off the usual beaten track
&gt; &gt; of CLC, I don't want it to get &quot;out of hand&quot; (as if anything here ever
&gt; &gt; does!)

&gt; &gt; Anyway, here is a &quot;copy and past&quot; of what I posted elsewhere!

&gt; &gt; All -

&gt; &gt; Anonymous's last post got me thinking, and I reviewed my c:\ drive for
&gt; &gt; some articles I had culled regarding this problem, which is namely,

&gt; &gt; &quot;What methodologies/methods should we apply to what domains of
&gt; &gt; problems?&quot;

&gt; Pre-supposes that there ARE different domains of problem; in commercial
&gt; computer programming this is arguable: &quot;Get a solution implemented that
&gt; costs as little as possible, takes as little time as possible, meets the
&gt; Business requirements, and is comfortable for users to use.&quot; If you can
&gt; manage to also minimise future maintenance and make the new system integrate
&gt; nicely with current and foreseeable technical environments, that's a
&gt; bonus...:-)

&gt; &gt; I have three seminal works by Robert Glass that are directly relevant
&gt; &gt; here (you will need ACM and/or IEEE membership to get these, but I can
&gt; &gt; help you):

&gt; &gt; &quot;Contemporary Application Domain Taxonomies&quot;
&gt; &gt; http://portal.acm.org/citation.cfm?id=625489

&gt; &gt; &quot;Some Heresy Regarding Software Engineering&quot;
&gt; &gt; http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?tp=&amp;arnumber;=1309657&amp;i; ...

&gt; &gt; &quot;Matching Methodology to Problem Domain&quot;
&gt; &gt; http://portal.acm.org/citation.cfm?id=986228

&gt; &gt; In these works Glass makes it abundantly clear how **little** work has
&gt; &gt; been done in this area, by either industry or academia, and so this
&gt; &gt; might be an opportunity for some (relatively) groundbreaking work.

&gt; Glass should speak for himself.

&gt; Personally, I've been researching, analysing, postulating, experimenting,
&gt; and considering this for the last 43 years. I have arrived at some
&gt; interesting conclusions which will be published in a forthcoming book that
&gt; will be completed later this year.

&gt; I can tell you this for nothing:

&gt; 1. No single one of the current methodologies works to complete satisfaction
&gt; (with the POSSIBLE exception of DSDM...) when applied by itself, alone.
&gt; 2. There is a marked lack of imagination on the part of both Business
&gt; Management and Technical Management when addressing this problem.
&gt; 3. The main reason for software engineering failures is very bright
&gt; technical people being poorly led by managers who secretly despise them, and
&gt; have little or no understanding of what they do/need. (Point being: It isn't
&gt; necessarily about Methodology...)
&gt; 4. It IS possible to formulate a General Solution to commercial software
&gt; engineering, that will solve more than 80% of the problems projects
&gt; encounter. (However, doing so requires vision, imagination, and acceptance
&gt; of change which most organisations are not capable of, or simply don't
&gt; have.) This &quot;general solution&quot; is possible because, at least in the domain
&gt; of commercial software solution engineering, there are the same (or very
&gt; similar) &quot;general problems&quot; that manifest thermselves on every project,
&gt; despite the fact that EVERY Management team believes THEY are unique and
&gt; THEIR business is completely different from everyone else's. I think this
&gt; myopia occurs because they are not capable of the pattern recognition that
&gt; their tech staff do instinctively.

&gt; I am postulating a completely different approach, but I don't want to spoil
&gt; it by pre-announcing it here. I WILL say that it includes the best points of
&gt; several currently successful methodologies, along with some quite innovative
&gt; ideas, based on my own experience and what I've found to work. I can also
&gt; say that it is as far divorced from Waterfall as it is possible to get :-)

&gt; Amazingly, I have a track record of 20 years in PM without a failure (1
&gt; project was not completed due to international corporate politics, over
&gt; which I had no control), yet I have NEVER implemented (completely) the
&gt; standard approach required on any particular site. Had I done so, the
&gt; project would have failed.:-)

&gt; I believe the factors required for successful implementation are not easily
&gt; identifiable or quantifiable and I address this in the book. Certainly some
&gt; of them cannot be taught, but must be learned by observation and experience.
&gt; It IS possible to raise awareness of them and suggest some approaches...

&gt; &gt; Those interested in exploring this aspect independently of &lt;CLC and
&gt; &gt; other Forums&gt;, please post here in this thread, or contact me offline
&gt; &gt; at my e-mail address. The goal for this exploration should be
&gt; &gt; initially modest (I have a fair amount of personal business to attend
&gt; &gt; to in the short term, which limits my time), but could be on the order
&gt; &gt; of accumulating enough &quot;stuff&quot; (viewpoints, rough &quot;artifacts&quot;) to
&gt; &gt; present a &quot;Roundtable&quot;, &quot;Birds of a Feather&quot;, &quot;Panel&quot;, or simply
&gt; &gt; &quot;Gathering&quot; at something like GLSEC (Great Lakes Software Excellence
&gt; &gt; Conference), but certainly not so much as to qualify as a &quot;seminar&quot; or
&gt; &gt; &quot;workshop&quot;, let alone a &quot;conference&quot; :-).

&gt; &gt; I think for the time being this effort would be organized as a simple
&gt; &gt; cc: list for some occasional group e-mailings, and not yet anything
&gt; &gt; more structured.

&gt; &gt; But I'd like to get started on it by accumlating a list of interested
&gt; &gt; parties?

&gt; &gt; Any takers?

&gt; Not at this stage, Ken. I believe it will be too dry and Academic to
&gt; interest me, and I can't/won't contribute to a pissing contest about
&gt; methodologies, none of which I believe to be perfect... :-)

&gt; Nevertheless, I wish you luck with it :-)

&gt; Pete.
&gt; --
&gt; &quot;I used to write COBOL...now I can do anything.&quot;- Hide quoted text -

&gt; - Show quoted text -- Hide quoted text -

&gt; - Show quoted text -
">

How is your management book coming along? My offer to proof read it is
still open.
</POST>
<POST>
<POSTER> Alistair &lt;alist...@ld50macca.demon.co.uk&gt; </POSTER>
<POSTDATE> 2008-01-24T17:00:00 </POSTDATE>
On 23 Jan, 18:26, docdw ... @panix.com () wrote:

<QUOTE PREVIOUSPOST="
&gt; In article &lt;a875426b-021a-440c-adf1-a1df30729 ... @e23g2000prf.googlegroups.com&gt;,

&gt; klsha ... @att.net &lt;klsha ... @att.net&gt; wrote:
&gt; &gt;On Jan 23, 5:36 am, docdw ... @panix.com () wrote:
&gt; &gt;&gt; In article &lt;519b9104-a107-4f9d-b341-781c2185d ... @d4g2000prg.googlegroups.com&gt;,

&gt; &gt;&gt; I use, of course, whatever style fits into the code that already exists at
&gt; &gt;&gt; the client's site... if a programmer expects something to occur in a
&gt; &gt;&gt; certain place or way then I want to make sure I do my best not to add
&gt; &gt;&gt; confusion.

&gt; [snip]

&gt; &gt;Hmmm... Doc, this actually is *very helpful*.

&gt; From *me*?  That's utterly impossible, just ask around the newsgroup.

&gt; &gt;I just need a moniker to
&gt; &gt;'tach to it. How about, &quot;minimal impact&quot; approach as the
&gt; &gt;&quot;methodology&quot;, with the &quot;problem domain&quot; being &quot;maintenance&quot;. Maybe
&gt; &gt;this is really a &quot;meta-methodology&quot;, since it might subsume &quot;if system
&gt; &gt;flowcharts exist, update the system flowcharts as needed, in the same
&gt; &gt;format as before.&quot; Given all the hub-bub of &quot;transformational&quot;
&gt; &gt;approaches and the like, &quot;minimal impact&quot; might actually be a valid
&gt; &gt;way of thinking about it.

&gt; That is one of the difficulties, Mr Shafer... the reconciling of 'we want
&gt; something new' with 'we're comfortable with what we do'.  If 'what we do'
&gt; actually *works* then I've found the primary cause of 'we want something
&gt; new' is a new Corner-Office Idiot who wants folks to say 'Jones is really
&gt; shaking things up there.'

&gt; (never mind the fact that more work is getting done, or less, or the
&gt; employees are more satisfied, or less... it's just 'Jones is really
&gt; shaking things up there')

&gt; &gt;Can you think of a better, ah, more *marketable* tagline than &quot;minimal
&gt; &gt;impact&quot; though? Something with a homonym of a Hollywood celebrity's
&gt; &gt;name, or the like?

&gt; If I could do that I'd be writing advertising-copy... 'It's this, it's
&gt; that, it's the other thing!  It's all three, in one... yes, it's new
&gt; Three-in-One!'

&gt; And so... I stick to COBOL.

&gt; &gt;&gt; ... et and cetera.  If something just Isn't Working (certain things keep
&gt; &gt;&gt; going wrong in certain ways) then I'll make my suggestions as to how I
&gt; &gt;&gt; believe difficulties might be alleviated... but as long as what I do
&gt; &gt;&gt; doesn't violate my own standards of Professional Ethics then, ultimately,
&gt; &gt;&gt; I'll do what the person who signs my timesheets tells me to do; something
&gt; &gt;&gt; about paying pipers and calling tunes.

&gt; &gt;I seem to recall that when the ol' body wears out a little too much,
&gt; &gt;and there is little that the old' Doc can do, we usually shift away
&gt; &gt;from health Remediation to Pain Management. So what do we call these
&gt; &gt;for Software systems?

&gt; It could be the shift from 'curative coding to, perhaps, 'palliative
&gt; programming'.

&gt; DD
">

Or perhaps: Phase Six of any project - find a new job.
</POST>
<POST>
<POSTER> Alistair &lt;alist...@ld50macca.demon.co.uk&gt; </POSTER>
<POSTDATE> 2008-01-24T17:08:00 </POSTDATE>
On 24 Jan, 01:20, Robert &lt;n ... @e.mail&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; &quot;You must know there are two ways of contesting, the one by the law, the other by force;
&gt; the first method is proper to men, the second to beasts; but because the first is
&gt; frequently not sufficient, it is necessary to have recourse to the second. Therefore it is
&gt; necessary for a prince to understand how to avail himself of the beast and the man - just
&gt; one is not enough.&quot;

&gt; Machiavelli wrote the seminal work on software management. He said a prince who does not
&gt; raise the contempt of the nobles and keeps the people satisfied should have no fear of
&gt; conspirators.

&gt; &quot;If a prince seizes a state, all the required injuries should be inflicted at one stroke.
&gt; This way it is not necessary to every day be a little evil. Injuries should be inflicted
&gt; once, swiftly - so that it may be forgotten. A prince should however deliver frequent,
&gt; small benefits to his people so that its positive effects last longer.&quot;

&gt; &quot;In order to imitate war victories of other illustrious men and avoid defeats, a prince
&gt; should study war histories to learn the causes of war victories and defeats.&quot;- Hide quoted text -
">

Successful Software Delivery By Machiavelli? Throw in Sun Tzu and
Miyamoto Musashi and you would have a winning methodology.

Keep quoting.
</POST>
<POST>
<POSTER> &quot;Pete Dashwood&quot; &lt;dashw...@removethis.enternet.co.nz&gt; </POSTER>
<POSTDATE> 2008-01-24T17:36:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&lt;docdw ... @panix.com&gt; wrote in message news:fn9s1a$eak$1@reader2.panix.com ...
&gt; In article
&gt; &lt;eb399072-2ca3-42b8-867f-35fd27546 ... @y5g2000hsf.googlegroups.com&gt;,
&gt; klsha ... @att.net &lt;klsha ... @att.net&gt; wrote:

&gt;&gt;&gt; It could be the shift from 'curative coding to, perhaps, 'palliative
&gt;&gt;&gt; programming'.

&gt;&gt;Palliative programming? That actually is very, VERY good! So apt! So
&gt;&gt;descriptive! I'm so glad I prompted you! I will have to tell the
&gt;&gt;*World* that it was a Doc who coined the term!

&gt; The best I can ask for is to be cited as a source by a good scholar... a
&gt; right close second, though, is to be the recipient of royalty-checks.

&gt; DD
">

You'd rather fame than money, Doc?

Not me.

I'm very happy to ensure that the &quot;success&quot; is passed to the permanent
employees (for whom I usually throw a party with a percentage of the
cash...)

While this may sound mercenary, I find that acquiring cash, rather than
being an end in itself, is a great enabler; it lets me do the things I
really want to do.

We are having a glorious summer here (yesterday was 28 and today looks like
being the same). I am able to relax and enjoy it with friends, go to the
beach, take a walk around the Mount, sit and read a book, play my guitar, or
acquire some more information on C# or whatever... I can only do this
because I maximised the money when I last worked... :-)

Work is great (and I certainly enjoy mine...) but life is greater. We need
time for life as well as work, and cash is the enabler... :-)

By April or so, I'll probably need to refill the coffers, but until then...
(raises Jack Daniels with sparkling coke and fresh lime aromas, large ice
cubes just visible through the condensation on the glass...)... very good
health to you all. :-)

Pete.
--
&quot;I used to write COBOL...now I can do anything.&quot;
</POST>
<POST>
<POSTER> &quot;Pete Dashwood&quot; &lt;dashw...@removethis.enternet.co.nz&gt; </POSTER>
<POSTDATE> 2008-01-24T18:17:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&lt;klsha ... @att.net&gt; wrote in message
">

news:8fc01a64-2f4a-4973-8b20-c1691e16661d@s8g2000prg.googlegroups.com ...
On Jan 23, 8:20 pm, Robert &lt;n ... @e.mail&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Wed, 23 Jan 2008 16:57:36 +1300, &quot;Pete Dashwood&quot;
&gt; &lt;dashw ... @removethis.enternet.co.nz&gt;
&gt; wrote:
">

Robert,

I found your list of methods/applications of interest and significant
value to me (empirically speaking, :-) ). I am gratified. Thank you.

<QUOTE PREVIOUSPOST="
&gt; So are ALL Agile methods .. they say. Close inspection reveals the only
&gt; difference is
&gt; shorter iterations.
">

I suppose that *differences* make for interesting reading, and, as
they say, for generating much heat but little light, but for me, I
find &quot;what is common&quot; is more interesting. Maybe because I feel such a
need to just &quot;get along.&quot; :-)

To wit -

- Is not Agile Continuous Integration very similar to what we used to
do as Top-Down development, with stubs?
- Isn't TDD (Test Driven Development) very similar to Unit Testing
with Top-Down Development?,
- Isn't Agile &quot;customer on site&quot; very similar to the Analyst part of
the Analyst/Programmer (when there were such people, before they were
overcome with rote coders) walking down the Hall to see his User?
- Didn't the original Royce Waterfall article show feedback loops, not
only between adjoining steps in the SDLC, but jumping over steps, and
are not _these_ the Agile Iterations? (as in the Barry Boehm spiral
method.) (I somehow found the Royce Waterfall .pdf on the Web; if I
can find it again, and be convinced it is quasi-public-domain now, I
will post the link.)

I don't have the link, but I know I read it somewhere on the Web (so
it *must* be true :-) ), that much of Agile, and maybe the entirety of
the Agile Manifesto was in essence a _marketing move_. Let us not
begrudge them their success, to the extent that they are successful.
But neither let us lower our heads, brow beaten, through self-
submission to the thought that &quot;They have discovered something
Entirely New, which we Know Not.&quot;

Be not mistaken now, we, and by &quot;we&quot; I mean those such as *I*, neo-
Classicists, Traditionalists, Pragmatic Practitioners, in a Word, we
*Journeymen*, who do not deign to call ourselves Methodology Masters,
all owe the Agilists a great debt of gratitude.

It is they (the Agilists) who have brought &quot;refactoring&quot; into the
popular venacular, management-wise, so that &quot;rework&quot; is now not always
a &quot;dirty word&quot;. And it is they who have, more successfully than
others, driven the stake into the ground regarding what I call
Indivisibility (of effort), which contends that is very, very
difficult to completely separate analysis, design, coding, and testing
across a multitude of individuals, no matter _how_ good the
_documentation artifacts_ are.
Once upon a time, that was the rationale for &quot;Analyst/Programmer&quot;, was
it not?.

There once was a time, and maybe it was Our Time, and yes, maybe it is
*gone* now, that all of this was Common Knowledge.

But presently, what others might see as Nouveau Secrets are really
Ancient Wisdom, mostly forgotten.

As long as there are Journeymen and Apprentices, let it be passed
down.

How could we expect it to be otherwise?

Ken

[Pete:]

An excellent post, Ken. There is much wisdom in what you say above.

Certainly, the Ancient Wisdom has been re-invented many times, and
re-marketed, and it is certainly true that unless Management are provided
with simple (usually one word) hooks like &quot;refactoring&quot;, then the REAL work
is made much more difficult for everybody.

They have neither time nor inclination to understand what is actually going
on in Development and this creates severe anxiety (especially when they see
the cost of it...) If they can be given something that they &quot;know&quot; is right
there and up with current &quot;Best Practices&quot; (don'tcha just LOVE &quot;Best
Practices&quot;?...especially when it is used to cover some of the most senseless
and stupid decisions imaginable :-)), then it is like a cuddle blanket and
has a calming effect.

I've had a lot of contact with Managers over the years, including Doc's
&quot;Corner Office Idiots&quot; (COI). In general, Senior management (say, Board
level) are pretty astute and recognise that they don't know about IT. Their
approach is to buy expertise and get the best they can. It is usally the
middle managers and COIs who have SOME knowledge, that lose sight of the
real agenda and instead, look for the line of least resistance and short
term solutions. These same guys are often much more concerned about
building/protecting their own little empires than they are about providing
service to the Business. That is why there are so many IT departments with
incoherent strategies, risky tactical solutions, and Business departments
(Clients of IT) that think IT stinks...

A fundamental for success is Management buy-in. That is NOT COI buy-in
(although that is very useful, too...) it is SENIOR management buy-in. Of
course, to get this you have to establish credibility, and I have gone to
extreme lengths (and taken risks that made me shudder in retrospect :-)) on
many occasions to get it.

IT, especially when change is being introduced, needs the support of Senior
management.

As a consultant being brought in to manage something, I know I will
encounter animosity from the middle management. I deal with it in the
following ways:

1. Sit down with the COIs and assure them I am not after their jobs or
trying to make them look bad. Any and all &quot;success&quot; will be attributed to
them (and their teams, of course). (See post in response to Doc,
elsewhere...)

2. Make sure I have direct access to Senior Management and have primed them
with what I intend to do and the likely problems that will be encountered.
When issues arise with COIs, we negotiate and look for compromise. If none
is forthcoming, then it gets escalated to Board level. (I have only had to
do this very rarely, and it is always with the COI who is a control freak.
The kind who uses standards to inhibit and stifle, rather than to support
and ensure consistency. Unimaginative, incapable of thinking outside the
box, or even considering any solution that might violate one line of
&quot;Standard Procedure&quot;. The kind who really should be a guard in a prison camp
(nobody leaves the site without his permission... and so on...) These guys
are walking examples of the Peter Principle...)

Once we have this nonsense sorted, I can sit down with the team and we can
get on with the REAL work.

Tech teams seem to enjoy working with me... :-) (I certainly enjoy working
with bright young people...)

Pete.
--
&quot;I used to write COBOL...now I can do anything.&quot;
</POST>
<POST>
<POSTER> &quot;Pete Dashwood&quot; &lt;dashw...@removethis.enternet.co.nz&gt; </POSTER>
<POSTDATE> 2008-01-24T18:28:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&lt;klsha ... @att.net&gt; wrote in message
">

news:17da85f2-7c47-4ecd-b5cf-07f25f6cbbd8@j78g2000hsd.googlegroups.com ...
On Jan 24, 3:06 am, &quot;Pete Dashwood&quot;

<QUOTE PREVIOUSPOST="
&lt;dashw ... @removethis.enternet.co.nz&gt; wrote:
&gt; &lt;klsha ... @att.net&gt; wrote in message

&gt; &gt;Uhh, can you get me a pre-publication copy of your book? :-)

&gt; Sure. Can you get me the cover price :-)?

&gt; Pete.
">

Does your bank accept cheques in $USD? Or is it better to send
International Money Order. Kindly solicit me at klshafer -at- att.net
and let us see what we can do.

[Pete:]

The book is currently 75% written and I intend to finish it before end of
April this year. It will be POD published, as I have a number of writers
here who also want to get their books on the Net, and I will set up a Web
site that they can use too. This means you will be able to order it and pay
for it on-line, and receive it to your postal address within 7 days.

I don't expect people to buy a pig-in-a-poke, and excerpts of it will be
made available when it is ready for publication.

Thanks for your support, Ken. (I'll organise a signed copy for you... :-))

Pete.
--
&quot;I used to write COBOL...now I can do anything.&quot;
</POST>
<POST>
<POSTER> &quot;Pete Dashwood&quot; &lt;dashw...@removethis.enternet.co.nz&gt; </POSTER>
<POSTDATE> 2008-01-24T18:33:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Alistair&quot; &lt;alist ... @ld50macca.demon.co.uk&gt; wrote in message
">

news:89cb04cd-7242-4a6c-839c-32914d1cded3@1g2000hsl.googlegroups.com ...

<QUOTE PREVIOUSPOST="
&gt; On 23 Jan, 03:57, &quot;Pete Dashwood&quot; &lt;dashw ... @removethis.enternet.co.nz&gt;
&gt; wrote:
&gt;&gt; &lt;klsha ... @att.net&gt; wrote in message

&gt;&gt; news:519b9104-a107-4f9d-b341-781c2185da40@d4g2000prg.googlegroups.com ...

&gt;&gt; &gt; All -

&gt;&gt; &gt; Haven't been here for a while due to personal demands, but now that
&gt;&gt; &gt; I'm back, I wanted to put out an informal Call for Participation along
&gt;&gt; &gt; the following lines. In another forum I participate in we discuss
&gt;&gt; &gt; methodological approaches more than languages (eg. CMM vs. Agile).
&gt;&gt; &gt; Here is the essence of a post I put out there, and I'm putting it in
&gt;&gt; &gt; CLC to solicit the CoBOL angle, to wit, what methodologies are you
&gt;&gt; &gt; using in your CoBOL efforts: structured analysis / structured design,
&gt;&gt; &gt; object-oriented, custom, code-and-fix :-), whatever. CoBOL to
&gt;&gt; &gt; &quot;language-du-jour&quot; converts' opinions also welcome (that's at least
&gt;&gt; &gt; *you*, Mr. Pete Dashwood :-) ).

&gt;&gt; I believe that any attempt at problem solution that is driven from a
&gt;&gt; Language perspective will not be optimum, so looking for approaches taken
&gt;&gt; with COBOL (as opposed to anything else) for me, is a non-starter.

&gt;&gt; I apply the same problem solution approaches no matter WHAT language is
&gt;&gt; in
&gt;&gt; use.

&gt;&gt; &gt; I guess it's OK to do some follow up here within this thread in CLC,
&gt;&gt; &gt; but seeing as how this is just a little bit off the usual beaten track
&gt;&gt; &gt; of CLC, I don't want it to get &quot;out of hand&quot; (as if anything here ever
&gt;&gt; &gt; does!)

&gt;&gt; &gt; Anyway, here is a &quot;copy and past&quot; of what I posted elsewhere!

&gt;&gt; &gt; All -

&gt;&gt; &gt; Anonymous's last post got me thinking, and I reviewed my c:\ drive for
&gt;&gt; &gt; some articles I had culled regarding this problem, which is namely,

&gt;&gt; &gt; &quot;What methodologies/methods should we apply to what domains of
&gt;&gt; &gt; problems?&quot;

&gt;&gt; Pre-supposes that there ARE different domains of problem; in commercial
&gt;&gt; computer programming this is arguable: &quot;Get a solution implemented that
&gt;&gt; costs as little as possible, takes as little time as possible, meets the
&gt;&gt; Business requirements, and is comfortable for users to use.&quot; If you can
&gt;&gt; manage to also minimise future maintenance and make the new system
&gt;&gt; integrate
&gt;&gt; nicely with current and foreseeable technical environments, that's a
&gt;&gt; bonus...:-)

&gt;&gt; &gt; I have three seminal works by Robert Glass that are directly relevant
&gt;&gt; &gt; here (you will need ACM and/or IEEE membership to get these, but I can
&gt;&gt; &gt; help you):

&gt;&gt; &gt; &quot;Contemporary Application Domain Taxonomies&quot;
&gt;&gt; &gt; http://portal.acm.org/citation.cfm?id=625489

&gt;&gt; &gt; &quot;Some Heresy Regarding Software Engineering&quot;
&gt;&gt; &gt; http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?tp=&amp;arnumber;=1309657&amp;i; ...

&gt;&gt; &gt; &quot;Matching Methodology to Problem Domain&quot;
&gt;&gt; &gt; http://portal.acm.org/citation.cfm?id=986228

&gt;&gt; &gt; In these works Glass makes it abundantly clear how **little** work has
&gt;&gt; &gt; been done in this area, by either industry or academia, and so this
&gt;&gt; &gt; might be an opportunity for some (relatively) groundbreaking work.

&gt;&gt; Glass should speak for himself.

&gt;&gt; Personally, I've been researching, analysing, postulating, experimenting,
&gt;&gt; and considering this for the last 43 years. I have arrived at some
&gt;&gt; interesting conclusions which will be published in a forthcoming book
&gt;&gt; that
&gt;&gt; will be completed later this year.

&gt;&gt; I can tell you this for nothing:

&gt;&gt; 1. No single one of the current methodologies works to complete
&gt;&gt; satisfaction
&gt;&gt; (with the POSSIBLE exception of DSDM...) when applied by itself, alone.
&gt;&gt; 2. There is a marked lack of imagination on the part of both Business
&gt;&gt; Management and Technical Management when addressing this problem.
&gt;&gt; 3. The main reason for software engineering failures is very bright
&gt;&gt; technical people being poorly led by managers who secretly despise them,
&gt;&gt; and
&gt;&gt; have little or no understanding of what they do/need. (Point being: It
&gt;&gt; isn't
&gt;&gt; necessarily about Methodology...)
&gt;&gt; 4. It IS possible to formulate a General Solution to commercial software
&gt;&gt; engineering, that will solve more than 80% of the problems projects
&gt;&gt; encounter. (However, doing so requires vision, imagination, and
&gt;&gt; acceptance
&gt;&gt; of change which most organisations are not capable of, or simply don't
&gt;&gt; have.) This &quot;general solution&quot; is possible because, at least in the
&gt;&gt; domain
&gt;&gt; of commercial software solution engineering, there are the same (or very
&gt;&gt; similar) &quot;general problems&quot; that manifest thermselves on every project,
&gt;&gt; despite the fact that EVERY Management team believes THEY are unique and
&gt;&gt; THEIR business is completely different from everyone else's. I think this
&gt;&gt; myopia occurs because they are not capable of the pattern recognition
&gt;&gt; that
&gt;&gt; their tech staff do instinctively.

&gt;&gt; I am postulating a completely different approach, but I don't want to
&gt;&gt; spoil
&gt;&gt; it by pre-announcing it here. I WILL say that it includes the best points
&gt;&gt; of
&gt;&gt; several currently successful methodologies, along with some quite
&gt;&gt; innovative
&gt;&gt; ideas, based on my own experience and what I've found to work. I can also
&gt;&gt; say that it is as far divorced from Waterfall as it is possible to get
&gt;&gt; :-)

&gt;&gt; Amazingly, I have a track record of 20 years in PM without a failure (1
&gt;&gt; project was not completed due to international corporate politics, over
&gt;&gt; which I had no control), yet I have NEVER implemented (completely) the
&gt;&gt; standard approach required on any particular site. Had I done so, the
&gt;&gt; project would have failed.:-)

&gt;&gt; I believe the factors required for successful implementation are not
&gt;&gt; easily
&gt;&gt; identifiable or quantifiable and I address this in the book. Certainly
&gt;&gt; some
&gt;&gt; of them cannot be taught, but must be learned by observation and
&gt;&gt; experience.
&gt;&gt; It IS possible to raise awareness of them and suggest some approaches...

&gt;&gt; &gt; Those interested in exploring this aspect independently of &lt;CLC and
&gt;&gt; &gt; other Forums&gt;, please post here in this thread, or contact me offline
&gt;&gt; &gt; at my e-mail address. The goal for this exploration should be
&gt;&gt; &gt; initially modest (I have a fair amount of personal business to attend
&gt;&gt; &gt; to in the short term, which limits my time), but could be on the order
&gt;&gt; &gt; of accumulating enough &quot;stuff&quot; (viewpoints, rough &quot;artifacts&quot;) to
&gt;&gt; &gt; present a &quot;Roundtable&quot;, &quot;Birds of a Feather&quot;, &quot;Panel&quot;, or simply
&gt;&gt; &gt; &quot;Gathering&quot; at something like GLSEC (Great Lakes Software Excellence
&gt;&gt; &gt; Conference), but certainly not so much as to qualify as a &quot;seminar&quot; or
&gt;&gt; &gt; &quot;workshop&quot;, let alone a &quot;conference&quot; :-).

&gt;&gt; &gt; I think for the time being this effort would be organized as a simple
&gt;&gt; &gt; cc: list for some occasional group e-mailings, and not yet anything
&gt;&gt; &gt; more structured.

&gt;&gt; &gt; But I'd like to get started on it by accumlating a list of interested
&gt;&gt; &gt; parties?

&gt;&gt; &gt; Any takers?

&gt;&gt; Not at this stage, Ken. I believe it will be too dry and Academic to
&gt;&gt; interest me, and I can't/won't contribute to a pissing contest about
&gt;&gt; methodologies, none of which I believe to be perfect... :-)

&gt;&gt; Nevertheless, I wish you luck with it :-)

&gt;&gt; Pete.
&gt;&gt; --
&gt;&gt; &quot;I used to write COBOL...now I can do anything.&quot;- Hide quoted text -

&gt;&gt; - Show quoted text -- Hide quoted text -

&gt;&gt; - Show quoted text -

&gt; How is your management book coming along? My offer to proof read it is
&gt; still open.
">

Thanks Alistair.

I am currently reviewing what I have (about 75% of the total). I'll send you
a proof copy for review when I have 100%.

Pete.
--
&quot;I used to write COBOL...now I can do anything.&quot;
</POST>
<POST>
<POSTER> docdw...@panix.com () </POSTER>
<POSTDATE> 2008-01-24T21:20:00 </POSTDATE>
In article &lt;5vsi8cF1nfla ... @mid.individual.net&gt;,

<QUOTE PREVIOUSPOST="
Pete Dashwood &lt;dashw ... @removethis.enternet.co.nz&gt; wrote:

&gt;&lt;docdw ... @panix.com&gt; wrote in message news:fn9s1a$eak$1@reader2.panix.com ...
&gt;&gt; In article
&gt;&gt; &lt;eb399072-2ca3-42b8-867f-35fd27546 ... @y5g2000hsf.googlegroups.com&gt;,
&gt;&gt; klsha ... @att.net &lt;klsha ... @att.net&gt; wrote:

&gt;&gt;&gt;&gt; It could be the shift from 'curative coding to, perhaps, 'palliative
&gt;&gt;&gt;&gt; programming'.

&gt;&gt;&gt;Palliative programming? That actually is very, VERY good! So apt! So
&gt;&gt;&gt;descriptive! I'm so glad I prompted you! I will have to tell the
&gt;&gt;&gt;*World* that it was a Doc who coined the term!

&gt;&gt; The best I can ask for is to be cited as a source by a good scholar... a
&gt;&gt; right close second, though, is to be the recipient of royalty-checks.

&gt;You'd rather fame than money, Doc?
">

One does not rule out the other, Mr Dashwood; one can ask for the best,
the second-best, the third-best... all the way down to a sub-zero sausage,
sometimes called the 'absolute wurst'.  As... someone pointed out in a
posting to This Very Newsgroup, nigh a decade back:
&lt; http://groups.google.com/group/comp.lang.cobol/msg/d1ab4181eb38f543?d... &gt;

--begin quoted text:

As I've said many times: 'Honor is a wonderful coin... but my landlord
doesn't accept it.'

--end quoted text

<QUOTE PREVIOUSPOST="
&gt;Not me.
">

Well, if all you can think of is to ask for one OR the other to the
exclusion of any else... have at it!

DD
</POST>
<POST>
<POSTER> Robert &lt;n...@e.mail&gt; </POSTER>
<POSTDATE> 2008-01-24T22:47:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
On Thu, 24 Jan 2008 10:04:37 -0800 (PST), &quot;klsha ... @att.net&quot; &lt;klsha ... @att.net&gt; wrote:
&gt;On Jan 23, 8:20 pm, Robert &lt;n ... @e.mail&gt; wrote:
&gt;&gt; On Wed, 23 Jan 2008 16:57:36 +1300, &quot;Pete Dashwood&quot; &lt;dashw ... @removethis.enternet.co.nz&gt;
&gt;&gt; wrote:

&gt;Robert,

&gt;I found your list of methods/applications of interest and significant
&gt;value to me (empirically speaking, :-) ). I am gratified. Thank you.

&gt;&gt; So are ALL Agile methods .. they say. Close inspection reveals the only difference is
&gt;&gt; shorter iterations.

&gt;I suppose that *differences* make for interesting reading, and, as
&gt;they say, for generating much heat but little light, but for me, I
&gt;find &quot;what is common&quot; is more interesting. Maybe because I feel such a
&gt;need to just &quot;get along.&quot; :-)
">

Sounds like you have management potential. :)

<QUOTE PREVIOUSPOST="
&gt;To wit -

&gt;- Is not Agile Continuous Integration very similar to what we used to
&gt;do as Top-Down development, with stubs?
&gt;- Isn't TDD (Test Driven Development) very similar to Unit Testing
&gt;with Top-Down Development?,
">

An 'old wine in new bottles' argument is unpersuasive because it makes the advocate sound
like a sore loser.

<QUOTE PREVIOUSPOST="
&gt;- Isn't Agile &quot;customer on site&quot; very similar to the Analyst part of
&gt;the Analyst/Programmer (when there were such people, before they were
&gt;overcome with rote coders) walking down the Hall to see his User?
">

Usually not. Rarely can a  programmer detach himself to truly think like a user.

I've learned from experience that knowing more then the user about his own technical
specialty, such as accounting, law and statistics, really pisses them off. :)

<QUOTE PREVIOUSPOST="
&gt;- Didn't the original Royce Waterfall article show feedback loops, not
&gt;only between adjoining steps in the SDLC, but jumping over steps, and
&gt;are not _these_ the Agile Iterations? (as in the Barry Boehm spiral
&gt;method.)
">

Yes, it does. Royce warns against a monotonic (&quot;waterfall&quot;) process here:

&quot;... the implementation described above is risky and invites failure. The testing phase
which occurs at the end of the development cycle is the first event for which timing,
storage, input/output transfers, etc., are experienced as distinguished from analyzed.
These phenomena are not precisely analyzable. ...  Yet if these phenomena fail to satisfy
the various external constraints, then invariably a major redesign is required. A simple
octal patch or redo of some isolated code will not fix these kinds of difficulties. The
required design changes are likely to be so disruptive that the software requirements upon
which the design is based and which provides the rationale for everything are violated.
Either the requirements must be modified, or a substantial change in the design is
required. In effect the development process has returned to the origin and one can expect
up to a lO0-percent overrun in schedule and/or costs.&quot;

His argument is based on inadequate hardware being the greatest danger. The system is too
slow. That was widely believed in 1970, and I believe prematue optimization was the
greatest CAUSE of bad system design. I see it every day, 38 years later, on hardware that
runs a thousand times faster than computers did in 1970. The genesis of this attidude is
in the techie psyche, not the real world where users live.

Thus, a development process that revolves around 'optimized code' is a non-starter. The
process SHOULD revolve around the user.

<QUOTE PREVIOUSPOST="
&gt;(I somehow found the Royce Waterfall .pdf on the Web; if I
&gt;can find it again, and be convinced it is quasi-public-domain now, I
&gt;will post the link.)
">

Here's the link:
http://www.cs.umd.edu/class/spring2003/cmsc838p/Process/waterfall.pdf

<QUOTE PREVIOUSPOST="
&gt;I don't have the link, but I know I read it somewhere on the Web (so
&gt;it *must* be true :-) ), that much of Agile, and maybe the entirety of
&gt;the Agile Manifesto was in essence a _marketing move_. Let us not
&gt;begrudge them their success, to the extent that they are successful.
&gt;But neither let us lower our heads, brow beaten, through self-
&gt;submission to the thought that &quot;They have discovered something
&gt;Entirely New, which we Know Not.&quot;

&gt;Be not mistaken now, we, and by &quot;we&quot; I mean those such as *I*, neo-
&gt;Classicists, Traditionalists, Pragmatic Practitioners, in a Word, we
&gt;*Journeymen*, who do not deign to call ourselves Methodology Masters,
&gt;all owe the Agilists a great debt of gratitude.
">

You are being sardonic.

<QUOTE PREVIOUSPOST="
&gt;It is they (the Agilists) who have brought &quot;refactoring&quot; into the
&gt;popular venacular, management-wise, so that &quot;rework&quot; is now not always
&gt;a &quot;dirty word&quot;. And it is they who have, more successfully than
&gt;others, driven the stake into the ground regarding what I call
&gt;Indivisibility (of effort), which contends that is very, very
&gt;difficult to completely separate analysis, design, coding, and testing
&gt;across a multitude of individuals, no matter _how_ good the
&gt;_documentation artifacts_ are.
">

Royce says divisibility is the acid test for adequate documentation.

&quot; Many parts of the test process are best handled by test specialists who did not
necessarily contribute to the original design. If it is argued that only the designer can
perform a thorough test because he understands the area he built, this is a sure sign of a
failure to document properly.&quot;

<QUOTE PREVIOUSPOST="
&gt;Once upon a time, that was the rationale for &quot;Analyst/Programmer&quot;, was
&gt;it not?.
">

It's just job title inflation. In some shops, everyone has been promoted to Senior
Technical Analyst or Lead Technical Engineer; there aren't any inadjectivated Developers.
In at least one state, Wisconsin, real engineers sued to stop debasement of their
occupational title.

<QUOTE PREVIOUSPOST="
&gt;There once was a time, and maybe it was Our Time, and yes, maybe it is
&gt;*gone* now, that all of this was Common Knowledge.

&gt;But presently, what others might see as Nouveau Secrets are really
&gt;Ancient Wisdom, mostly forgotten.
">

The evolution of methodologies is the confluence of two sets of cycles. The first is the
generational cycle brilliantly described by Strauss and Howe in their book Generations.
The second is the tug of war between users and management and techies. In both, attempts
to correct past deficiencies overshoot the mark and become candidates for correction
during the next iteration. The path is not as simple as a two-dimensional sine wave.
Because of multiple degrees of freedom (dimensions), there can be multiple stages before
the supercycle starts over. There are four stages in the Generations model: Hero,
Technocrat/Artist, Puritan/Yuppie and XGen/Punk (my terminology). A methodology that seems
right to one generational style will seem all wrong to its successor. For example, the
Artistic style that you seem to favor seems undisciplined to Yuppies, who don't trust
anyone to do things right, least of all themselves. That's how we got Waterfall, which
seems too rigidly structured to XGens, who just want to get the job done as quickly as
possible. That XGens also disdain beautiful code shows the cycles are not simple
oscillation.

http://en.wikipedia.org/wiki/Generations_%28book%29
</POST>
<POST>
<POSTER> docdw...@panix.com () </POSTER>
<POSTDATE> 2008-01-25T07:55:00 </POSTDATE>
In article &lt;dn9ip39ak344qlvd5clil31hvvi5gdc ... @4ax.com&gt;,

<QUOTE PREVIOUSPOST="
Robert  &lt;n ... @e.mail&gt; wrote:
">

[snip]

<QUOTE PREVIOUSPOST="
&gt;Here's the link:
&gt; http://www.cs.umd.edu/class/spring2003/cmsc838p/Process/waterfall.pdf
">

Waw haw haw haw... this guy's *serious*?  Give this a listen, from .pdf
page 5 (showing book page 332):

--begin quoted text

Step 2: DOCUMENT THE DESIGN

At this point it is appropriate to raise the issue of - 'how much
documentation?'  My own view is 'quite a lot'; certainly more than most
programmers, analysts or program designers are willing to do if left to
their own devices.  The first rule of managing software development is
ruthless enforcement of documentation requirements.

Occaisionally I am called upon to review the progress of other
software design efforts.  My first step is to investigate the state of
documentation.  If the documentation is in serious default my first
recommendation is simple.  Replace project management.  Stop all
activities not related to documentation.  Bring the documentation up to
acceptable standards.

--end quoted text

All righty, by a show of hands... has anyone ever seen anything like this
happen?

(My experience, of course, is with 'sick shops' so I haven't run across an
instance of a single manager - let along an entire project's management -
being replaced because documentation was not 'up to acceptable standards',
even where 'acceptable' was construed as 'scribble something in cuneiform
- Akkadian or Hittite, your choice - on a bit of bathroom-tissue'.)

DD
</POST>
<POST>
<POSTER> Alistair &lt;alist...@ld50macca.demon.co.uk&gt; </POSTER>
<POSTDATE> 2008-01-25T09:43:00 </POSTDATE>
On 24 Jan, 23:17, &quot;Pete Dashwood&quot;

<QUOTE PREVIOUSPOST="
&gt; Tech teams seem to enjoy working with me... :-) (I certainly enjoy working
&gt; with bright young people...)
">

Many years ago I said to a senior manager that the user was happy with
the system because he had never complained about it. I was wrong (I
was not aware of the complaints that he had made). Just because people
wear happy smiley faces does not necessarily mean that they enjoyed
working with you. It may just mean that they are stoned. And I have
been known to attend leaving dos just to ensure that we've finally got
rid of the individual concerned.
</POST>
<POST>
<POSTER> Alistair &lt;alist...@ld50macca.demon.co.uk&gt; </POSTER>
<POSTDATE> 2008-01-25T09:44:00 </POSTDATE>
On 24 Jan, 23:33, &quot;Pete Dashwood&quot; &lt;dashw ... @removethis.enternet.co.nz&gt;
wrote:

<QUOTE PREVIOUSPOST="
&gt; &quot;Alistair&quot; &lt;alist ... @ld50macca.demon.co.uk&gt; wrote in message

&gt; news:89cb04cd-7242-4a6c-839c-32914d1cded3@1g2000hsl.googlegroups.com ...

&gt; &gt; On 23 Jan, 03:57, &quot;Pete Dashwood&quot; &lt;dashw ... @removethis.enternet.co.nz&gt;
&gt; &gt; wrote:
&gt; &gt;&gt; &lt;klsha ... @att.net&gt; wrote in message

&gt; &gt;&gt; news:519b9104-a107-4f9d-b341-781c2185da40@d4g2000prg.googlegroups.com ...

&gt; &gt;&gt; &gt; All -

&gt; &gt;&gt; &gt; Haven't been here for a while due to personal demands, but now that
&gt; &gt;&gt; &gt; I'm back, I wanted to put out an informal Call for Participation along
&gt; &gt;&gt; &gt; the following lines. In another forum I participate in we discuss
&gt; &gt;&gt; &gt; methodological approaches more than languages (eg. CMM vs. Agile).
&gt; &gt;&gt; &gt; Here is the essence of a post I put out there, and I'm putting it in
&gt; &gt;&gt; &gt; CLC to solicit the CoBOL angle, to wit, what methodologies are you
&gt; &gt;&gt; &gt; using in your CoBOL efforts: structured analysis / structured design,
&gt; &gt;&gt; &gt; object-oriented, custom, code-and-fix :-), whatever. CoBOL to
&gt; &gt;&gt; &gt; &quot;language-du-jour&quot; converts' opinions also welcome (that's at least
&gt; &gt;&gt; &gt; *you*, Mr. Pete Dashwood :-) ).

&gt; &gt;&gt; I believe that any attempt at problem solution that is driven from a
&gt; &gt;&gt; Language perspective will not be optimum, so looking for approaches taken
&gt; &gt;&gt; with COBOL (as opposed to anything else) for me, is a non-starter.

&gt; &gt;&gt; I apply the same problem solution approaches no matter WHAT language is
&gt; &gt;&gt; in
&gt; &gt;&gt; use.

&gt; &gt;&gt; &gt; I guess it's OK to do some follow up here within this thread in CLC,
&gt; &gt;&gt; &gt; but seeing as how this is just a little bit off the usual beaten track
&gt; &gt;&gt; &gt; of CLC, I don't want it to get &quot;out of hand&quot; (as if anything here ever
&gt; &gt;&gt; &gt; does!)

&gt; &gt;&gt; &gt; Anyway, here is a &quot;copy and past&quot; of what I posted elsewhere!

&gt; &gt;&gt; &gt; All -

&gt; &gt;&gt; &gt; Anonymous's last post got me thinking, and I reviewed my c:\ drive for
&gt; &gt;&gt; &gt; some articles I had culled regarding this problem, which is namely,

&gt; &gt;&gt; &gt; &quot;What methodologies/methods should we apply to what domains of
&gt; &gt;&gt; &gt; problems?&quot;

&gt; &gt;&gt; Pre-supposes that there ARE different domains of problem; in commercial
&gt; &gt;&gt; computer programming this is arguable: &quot;Get a solution implemented that
&gt; &gt;&gt; costs as little as possible, takes as little time as possible, meets the
&gt; &gt;&gt; Business requirements, and is comfortable for users to use.&quot; If you can
&gt; &gt;&gt; manage to also minimise future maintenance and make the new system
&gt; &gt;&gt; integrate
&gt; &gt;&gt; nicely with current and foreseeable technical environments, that's a
&gt; &gt;&gt; bonus...:-)

&gt; &gt;&gt; &gt; I have three seminal works by Robert Glass that are directly relevant
&gt; &gt;&gt; &gt; here (you will need ACM and/or IEEE membership to get these, but I can
&gt; &gt;&gt; &gt; help you):

&gt; &gt;&gt; &gt; &quot;Contemporary Application Domain Taxonomies&quot;
&gt; &gt;&gt; &gt; http://portal.acm.org/citation.cfm?id=625489

&gt; &gt;&gt; &gt; &quot;Some Heresy Regarding Software Engineering&quot;
&gt; &gt;&gt; &gt; http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?tp=&amp;arnumber;=1309657&amp;i; ...

&gt; &gt;&gt; &gt; &quot;Matching Methodology to Problem Domain&quot;
&gt; &gt;&gt; &gt; http://portal.acm.org/citation.cfm?id=986228

&gt; &gt;&gt; &gt; In these works Glass makes it abundantly clear how **little** work has
&gt; &gt;&gt; &gt; been done in this area, by either industry or academia, and so this
&gt; &gt;&gt; &gt; might be an opportunity for some (relatively) groundbreaking work.

&gt; &gt;&gt; Glass should speak for himself.

&gt; &gt;&gt; Personally, I've been researching, analysing, postulating, experimenting,
&gt; &gt;&gt; and considering this for the last 43 years. I have arrived at some
&gt; &gt;&gt; interesting conclusions which will be published in a forthcoming book
&gt; &gt;&gt; that
&gt; &gt;&gt; will be completed later this year.

&gt; &gt;&gt; I can tell you this for nothing:

&gt; &gt;&gt; 1. No single one of the current methodologies works to complete
&gt; &gt;&gt; satisfaction
&gt; &gt;&gt; (with the POSSIBLE exception of DSDM...) when applied by itself, alone.
&gt; &gt;&gt; 2. There is a marked lack of imagination on the part of both Business
&gt; &gt;&gt; Management and Technical Management when addressing this problem.
&gt; &gt;&gt; 3. The main reason for software engineering failures is very bright
&gt; &gt;&gt; technical people being poorly led by managers who secretly despise them,
&gt; &gt;&gt; and
&gt; &gt;&gt; have little or no understanding of what they do/need. (Point being: It
&gt; &gt;&gt; isn't
&gt; &gt;&gt; necessarily about Methodology...)
&gt; &gt;&gt; 4. It IS possible to formulate a General Solution to commercial software
&gt; &gt;&gt; engineering, that will solve more than 80% of the problems projects
&gt; &gt;&gt; encounter. (However, doing so requires vision, imagination, and
&gt; &gt;&gt; acceptance
&gt; &gt;&gt; of change which most organisations are not capable of, or simply don't
&gt; &gt;&gt; have.) This &quot;general solution&quot; is possible because, at least in the
&gt; &gt;&gt; domain
&gt; &gt;&gt; of commercial software solution engineering, there are the same (or very
&gt; &gt;&gt; similar) &quot;general problems&quot; that manifest thermselves on every project,
&gt; &gt;&gt; despite the fact that EVERY Management team believes THEY are unique and
&gt; &gt;&gt; THEIR business is completely different from everyone else's. I think this
&gt; &gt;&gt; myopia occurs because they are not capable of the pattern recognition
&gt; &gt;&gt; that
&gt; &gt;&gt; their tech staff do instinctively.

&gt; &gt;&gt; I am postulating a completely different approach, but I don't want to
&gt; &gt;&gt; spoil
&gt; &gt;&gt; it by pre-announcing it here. I WILL say that it includes the best points
&gt; &gt;&gt; of
&gt; &gt;&gt; several currently successful methodologies, along with some quite
&gt; &gt;&gt; innovative
&gt; &gt;&gt; ideas, based on my own experience and what I've found to work. I can also
&gt; &gt;&gt; say that it is as far divorced from Waterfall as it is possible to get
&gt; &gt;&gt; :-)

&gt; &gt;&gt; Amazingly, I have a track record of 20 years in PM without a failure (1
&gt; &gt;&gt; project was not completed due to international corporate politics, over
&gt; &gt;&gt; which I had no control), yet I have NEVER implemented (completely) the
&gt; &gt;&gt; standard approach required on any particular site. Had I done so, the
&gt; &gt;&gt; project would have failed.:-)

&gt; &gt;&gt; I believe the factors required for successful implementation are not
&gt; &gt;&gt; easily
&gt; &gt;&gt; identifiable or quantifiable and I address this in the book. Certainly
&gt; &gt;&gt; some
&gt; &gt;&gt; of them cannot be taught, but must be learned by observation and
&gt; &gt;&gt; experience.
&gt; &gt;&gt; It IS possible to raise awareness of them and suggest some approaches...

&gt; &gt;&gt; &gt; Those interested in exploring this aspect independently of &lt;CLC and
&gt; &gt;&gt; &gt; other Forums&gt;, please post here in this thread, or contact me offline
&gt; &gt;&gt; &gt; at my e-mail address. The goal for this exploration should be
&gt; &gt;&gt; &gt; initially modest (I have a fair amount of personal business to attend
&gt; &gt;&gt; &gt; to in the short term, which limits my time), but could be on the order
&gt; &gt;&gt; &gt; of accumulating enough &quot;stuff&quot; (viewpoints, rough &quot;artifacts&quot;) to
&gt; &gt;&gt; &gt; present a &quot;Roundtable&quot;, &quot;Birds of a Feather&quot;, &quot;Panel&quot;, or simply
&gt; &gt;&gt; &gt; &quot;Gathering&quot; at something like GLSEC (Great Lakes Software Excellence
&gt; &gt;&gt; &gt; Conference), but certainly not so much as to qualify as a &quot;seminar&quot; or
&gt; &gt;&gt; &gt; &quot;workshop&quot;, let alone a &quot;conference&quot; :-).

&gt; &gt;&gt; &gt; I think for the time being this effort would be organized as a simple
&gt; &gt;&gt; &gt; cc: list for some occasional group e-mailings, and not yet anything
&gt; &gt;&gt; &gt; more structured.

&gt; &gt;&gt; &gt; But I'd like to get started on it by accumlating a list of interested
&gt; &gt;&gt; &gt; parties?

&gt; &gt;&gt; &gt; Any takers?

&gt; &gt;&gt; Not at this stage, Ken. I believe it will be too dry and Academic to
&gt; &gt;&gt; interest me, and I can't/won't contribute to a pissing contest about
&gt; &gt;&gt; methodologies, none of which I believe to be perfect... :-)

&gt; &gt;&gt; Nevertheless, I wish you luck with it :-)

&gt; &gt;&gt; Pete.
&gt; &gt;&gt; --
&gt; &gt;&gt; &quot;I used to write COBOL...now I can do anything.&quot;- Hide quoted text -

&gt; &gt;&gt; - Show quoted text -- Hide quoted text -

&gt; &gt;&gt; - Show quoted text -

&gt; &gt; How is your management book coming along? My offer to proof read it is
&gt; &gt; still open.

&gt; Thanks Alistair.

&gt; I am currently reviewing what I have (about 75% of the total). I'll send you
&gt; a proof copy for review when I have 100%.

&gt; Pete.
&gt; --
&gt; &quot;I used to write COBOL...now I can do anything.&quot;- Hide quoted text -

&gt; - Show quoted text -
">

Cheers, I can't wait   :-)
</POST>
<POST>
<POSTER> docdw...@panix.com () </POSTER>
<POSTDATE> 2008-01-25T11:03:00 </POSTDATE>
In article &lt;bde70ea5-7ba0-44f2-b903-0cc794a6a ... @q21g2000hsa.googlegroups.com&gt;,

<QUOTE PREVIOUSPOST="
Alistair  &lt;alist ... @ld50macca.demon.co.uk&gt; wrote:
&gt;On 24 Jan, 23:17, &quot;Pete Dashwood&quot;
&gt;&gt; Tech teams seem to enjoy working with me... :-) (I certainly enjoy working
&gt;&gt; with bright young people...)

&gt;Many years ago I said to a senior manager that the user was happy with
&gt;the system because he had never complained about it. I was wrong (I
&gt;was not aware of the complaints that he had made).
">

Well, now that you mention it... years on back I had a contract at a place
where the consultants were used as pawns in Corner-Office Wars.  Given a
simple rectangular arrangement it went something like this:

Corner-Office Idiot A comes out of the top-left office, looks around and
snarls 'Bah!  Not enough getting done here, bring in some consultants!'

They'd then bring in a raft of consultants/contractors/hired guns, between
twelve and twenty... and folks would get ID badges and logons, find out
where the source libraries were, start to get a handle on things and begin
to do some work...

... and then Corner-Office Idiot B would come out of the top-right office,
look around and snarl 'Bah!  Too many consultants here, costs too much
money... get rid of them!'

... and folks would pack up and go, and work would pile up and deadlines
start to slip... and then Corner-Office Idiot C would come out of the
bottom-right office and snarl 'Bah!  Not enough getting done here, bring
in some consultants!'...

... and another dozen or so folks would be brought in, get ID badges,
logons, etc.

Anyhow... I'd been there for a while, a Corner-Office Idiot came out and
said 'Too many consultants!' and a bunch of folks (I was not included)
were given two weeks' notice.

Being consultants/contractors/hired guns they began to behave as Dead Men
do; they hit the telephones and began calling up friends, agencies, pimps,
telephone-numbers they saw on restroom walls... and began looking for new
contracts.  Listening to folks the next desk/cubicle over trying to wangle
new work did not have a good effect on morale.

So... the Corner-Office Idiot has a brilliant ides: Consultants Don't Need
Telephones.  (this was in the Oldene Dayse, before cellular service)  We
all came in one day, those leaving and those staying, and saw our desks
telephonically denuded... and the problem was solved, right?

Well... maybe *that* problem was solved... but others generated.  Later
that day the Idiot went over to the Lead Consultant's desk - the Lead,
like me'n another fellow or two, were spared during the firing - and asked
'Well, what about those ABEND problems they've been having in the Prod
online system?'

The Lead looked over to the naked, dusty spot where the telephone had been
and said 'Oh, I haven't heard anything about those all morning'...

... and the Idiot brusquely said 'Very good, very good... no news is good
news' and strode off.

DD
</POST>
<POST>
<POSTER> &quot;Charles Hottel&quot; &lt;chot...@earthlink.net&gt; </POSTER>
<POSTDATE> 2008-01-25T12:04:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Alistair&quot; &lt;alist ... @ld50macca.demon.co.uk&gt; wrote in message
">

news:7046e06f-2944-4fd6-8e01-94c42d579b58@v67g2000hse.googlegroups.com ...

<QUOTE PREVIOUSPOST="
&gt; On 24 Jan, 23:33, &quot;Pete Dashwood&quot; &lt;dashw ... @removethis.enternet.co.nz&gt;
&gt; wrote:
&gt;&gt; &quot;Alistair&quot; &lt;alist ... @ld50macca.demon.co.uk&gt; wrote in message

&gt;&gt; news:89cb04cd-7242-4a6c-839c-32914d1cded3@1g2000hsl.googlegroups.com ...

&gt;&gt; &gt; On 23 Jan, 03:57, &quot;Pete Dashwood&quot; &lt;dashw ... @removethis.enternet.co.nz&gt;
&gt;&gt; &gt; wrote:
&gt;&gt; &gt;&gt; &lt;klsha ... @att.net&gt; wrote in message

&gt;&gt; &gt;&gt; news:519b9104-a107-4f9d-b341-781c2185da40@d4g2000prg.googlegroups.com ...

&gt;&gt; &gt;&gt; &gt; All -

&gt;&gt; &gt;&gt; &gt; Haven't been here for a while due to personal demands, but now that
&gt;&gt; &gt;&gt; &gt; I'm back, I wanted to put out an informal Call for Participation
&gt;&gt; &gt;&gt; &gt; along
&gt;&gt; &gt;&gt; &gt; the following lines. In another forum I participate in we discuss
&gt;&gt; &gt;&gt; &gt; methodological approaches more than languages (eg. CMM vs. Agile).
&gt;&gt; &gt;&gt; &gt; Here is the essence of a post I put out there, and I'm putting it in
&gt;&gt; &gt;&gt; &gt; CLC to solicit the CoBOL angle, to wit, what methodologies are you
&gt;&gt; &gt;&gt; &gt; using in your CoBOL efforts: structured analysis / structured
&gt;&gt; &gt;&gt; &gt; design,
&gt;&gt; &gt;&gt; &gt; object-oriented, custom, code-and-fix :-), whatever. CoBOL to
&gt;&gt; &gt;&gt; &gt; &quot;language-du-jour&quot; converts' opinions also welcome (that's at least
&gt;&gt; &gt;&gt; &gt; *you*, Mr. Pete Dashwood :-) ).

&gt;&gt; &gt;&gt; I believe that any attempt at problem solution that is driven from a
&gt;&gt; &gt;&gt; Language perspective will not be optimum, so looking for approaches
&gt;&gt; &gt;&gt; taken
&gt;&gt; &gt;&gt; with COBOL (as opposed to anything else) for me, is a non-starter.

&gt;&gt; &gt;&gt; I apply the same problem solution approaches no matter WHAT language
&gt;&gt; &gt;&gt; is
&gt;&gt; &gt;&gt; in
&gt;&gt; &gt;&gt; use.

&gt;&gt; &gt;&gt; &gt; I guess it's OK to do some follow up here within this thread in CLC,
&gt;&gt; &gt;&gt; &gt; but seeing as how this is just a little bit off the usual beaten
&gt;&gt; &gt;&gt; &gt; track
&gt;&gt; &gt;&gt; &gt; of CLC, I don't want it to get &quot;out of hand&quot; (as if anything here
&gt;&gt; &gt;&gt; &gt; ever
&gt;&gt; &gt;&gt; &gt; does!)

&gt;&gt; &gt;&gt; &gt; Anyway, here is a &quot;copy and past&quot; of what I posted elsewhere!

&gt;&gt; &gt;&gt; &gt; All -

&gt;&gt; &gt;&gt; &gt; Anonymous's last post got me thinking, and I reviewed my c:\ drive
&gt;&gt; &gt;&gt; &gt; for
&gt;&gt; &gt;&gt; &gt; some articles I had culled regarding this problem, which is namely,

&gt;&gt; &gt;&gt; &gt; &quot;What methodologies/methods should we apply to what domains of
&gt;&gt; &gt;&gt; &gt; problems?&quot;

&gt;&gt; &gt;&gt; Pre-supposes that there ARE different domains of problem; in
&gt;&gt; &gt;&gt; commercial
&gt;&gt; &gt;&gt; computer programming this is arguable: &quot;Get a solution implemented
&gt;&gt; &gt;&gt; that
&gt;&gt; &gt;&gt; costs as little as possible, takes as little time as possible, meets
&gt;&gt; &gt;&gt; the
&gt;&gt; &gt;&gt; Business requirements, and is comfortable for users to use.&quot; If you
&gt;&gt; &gt;&gt; can
&gt;&gt; &gt;&gt; manage to also minimise future maintenance and make the new system
&gt;&gt; &gt;&gt; integrate
&gt;&gt; &gt;&gt; nicely with current and foreseeable technical environments, that's a
&gt;&gt; &gt;&gt; bonus...:-)

&gt;&gt; &gt;&gt; &gt; I have three seminal works by Robert Glass that are directly
&gt;&gt; &gt;&gt; &gt; relevant
&gt;&gt; &gt;&gt; &gt; here (you will need ACM and/or IEEE membership to get these, but I
&gt;&gt; &gt;&gt; &gt; can
&gt;&gt; &gt;&gt; &gt; help you):

&gt;&gt; &gt;&gt; &gt; &quot;Contemporary Application Domain Taxonomies&quot;
&gt;&gt; &gt;&gt; &gt; http://portal.acm.org/citation.cfm?id=625489

&gt;&gt; &gt;&gt; &gt; &quot;Some Heresy Regarding Software Engineering&quot;
&gt;&gt; &gt;&gt; &gt; http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?tp=&amp;arnumber;=1309657&amp;i; ...

&gt;&gt; &gt;&gt; &gt; &quot;Matching Methodology to Problem Domain&quot;
&gt;&gt; &gt;&gt; &gt; http://portal.acm.org/citation.cfm?id=986228

&gt;&gt; &gt;&gt; &gt; In these works Glass makes it abundantly clear how **little** work
&gt;&gt; &gt;&gt; &gt; has
&gt;&gt; &gt;&gt; &gt; been done in this area, by either industry or academia, and so this
&gt;&gt; &gt;&gt; &gt; might be an opportunity for some (relatively) groundbreaking work.

&gt;&gt; &gt;&gt; Glass should speak for himself.

&gt;&gt; &gt;&gt; Personally, I've been researching, analysing, postulating,
&gt;&gt; &gt;&gt; experimenting,
&gt;&gt; &gt;&gt; and considering this for the last 43 years. I have arrived at some
&gt;&gt; &gt;&gt; interesting conclusions which will be published in a forthcoming book
&gt;&gt; &gt;&gt; that
&gt;&gt; &gt;&gt; will be completed later this year.

&gt;&gt; &gt;&gt; I can tell you this for nothing:

&gt;&gt; &gt;&gt; 1. No single one of the current methodologies works to complete
&gt;&gt; &gt;&gt; satisfaction
&gt;&gt; &gt;&gt; (with the POSSIBLE exception of DSDM...) when applied by itself,
&gt;&gt; &gt;&gt; alone.
&gt;&gt; &gt;&gt; 2. There is a marked lack of imagination on the part of both Business
&gt;&gt; &gt;&gt; Management and Technical Management when addressing this problem.
&gt;&gt; &gt;&gt; 3. The main reason for software engineering failures is very bright
&gt;&gt; &gt;&gt; technical people being poorly led by managers who secretly despise
&gt;&gt; &gt;&gt; them,
&gt;&gt; &gt;&gt; and
&gt;&gt; &gt;&gt; have little or no understanding of what they do/need. (Point being: It
&gt;&gt; &gt;&gt; isn't
&gt;&gt; &gt;&gt; necessarily about Methodology...)
&gt;&gt; &gt;&gt; 4. It IS possible to formulate a General Solution to commercial
&gt;&gt; &gt;&gt; software
&gt;&gt; &gt;&gt; engineering, that will solve more than 80% of the problems projects
&gt;&gt; &gt;&gt; encounter. (However, doing so requires vision, imagination, and
&gt;&gt; &gt;&gt; acceptance
&gt;&gt; &gt;&gt; of change which most organisations are not capable of, or simply don't
&gt;&gt; &gt;&gt; have.) This &quot;general solution&quot; is possible because, at least in the
&gt;&gt; &gt;&gt; domain
&gt;&gt; &gt;&gt; of commercial software solution engineering, there are the same (or
&gt;&gt; &gt;&gt; very
&gt;&gt; &gt;&gt; similar) &quot;general problems&quot; that manifest thermselves on every
&gt;&gt; &gt;&gt; project,
&gt;&gt; &gt;&gt; despite the fact that EVERY Management team believes THEY are unique
&gt;&gt; &gt;&gt; and
&gt;&gt; &gt;&gt; THEIR business is completely different from everyone else's. I think
&gt;&gt; &gt;&gt; this
&gt;&gt; &gt;&gt; myopia occurs because they are not capable of the pattern recognition
&gt;&gt; &gt;&gt; that
&gt;&gt; &gt;&gt; their tech staff do instinctively.

&gt;&gt; &gt;&gt; I am postulating a completely different approach, but I don't want to
&gt;&gt; &gt;&gt; spoil
&gt;&gt; &gt;&gt; it by pre-announcing it here. I WILL say that it includes the best
&gt;&gt; &gt;&gt; points
&gt;&gt; &gt;&gt; of
&gt;&gt; &gt;&gt; several currently successful methodologies, along with some quite
&gt;&gt; &gt;&gt; innovative
&gt;&gt; &gt;&gt; ideas, based on my own experience and what I've found to work. I can
&gt;&gt; &gt;&gt; also
&gt;&gt; &gt;&gt; say that it is as far divorced from Waterfall as it is possible to get
&gt;&gt; &gt;&gt; :-)

&gt;&gt; &gt;&gt; Amazingly, I have a track record of 20 years in PM without a failure
&gt;&gt; &gt;&gt; (1
&gt;&gt; &gt;&gt; project was not completed due to international corporate politics,
&gt;&gt; &gt;&gt; over
&gt;&gt; &gt;&gt; which I had no control), yet I have NEVER implemented (completely) the
&gt;&gt; &gt;&gt; standard approach required on any particular site. Had I done so, the
&gt;&gt; &gt;&gt; project would have failed.:-)

&gt;&gt; &gt;&gt; I believe the factors required for successful implementation are not
&gt;&gt; &gt;&gt; easily
&gt;&gt; &gt;&gt; identifiable or quantifiable and I address this in the book. Certainly
&gt;&gt; &gt;&gt; some
&gt;&gt; &gt;&gt; of them cannot be taught, but must be learned by observation and
&gt;&gt; &gt;&gt; experience.
&gt;&gt; &gt;&gt; It IS possible to raise awareness of them and suggest some
&gt;&gt; &gt;&gt; approaches...

&gt;&gt; &gt;&gt; &gt; Those interested in exploring this aspect independently of &lt;CLC and
&gt;&gt; &gt;&gt; &gt; other Forums&gt;, please post here in this thread, or contact me
&gt;&gt; &gt;&gt; &gt; offline
&gt;&gt; &gt;&gt; &gt; at my e-mail address. The goal for this exploration should be
&gt;&gt; &gt;&gt; &gt; initially modest (I have a fair amount of personal business to
&gt;&gt; &gt;&gt; &gt; attend
&gt;&gt; &gt;&gt; &gt; to in the short term, which limits my time), but could be on the
&gt;&gt; &gt;&gt; &gt; order
&gt;&gt; &gt;&gt; &gt; of accumulating enough &quot;stuff&quot; (viewpoints, rough &quot;artifacts&quot;) to
&gt;&gt; &gt;&gt; &gt; present a &quot;Roundtable&quot;, &quot;Birds of a Feather&quot;, &quot;Panel&quot;, or simply
&gt;&gt; &gt;&gt; &gt; &quot;Gathering&quot; at something like GLSEC (Great Lakes Software Excellence
&gt;&gt; &gt;&gt; &gt; Conference), but certainly not so much as to qualify as a &quot;seminar&quot;
&gt;&gt; &gt;&gt; &gt; or
&gt;&gt; &gt;&gt; &gt; &quot;workshop&quot;, let alone a &quot;conference&quot; :-).

&gt;&gt; &gt;&gt; &gt; I think for the time being this effort would be organized as a
&gt;&gt; &gt;&gt; &gt; simple
&gt;&gt; &gt;&gt; &gt; cc: list for some occasional group e-mailings, and not yet anything
&gt;&gt; &gt;&gt; &gt; more structured.

&gt;&gt; &gt;&gt; &gt; But I'd like to get started on it by accumlating a list of
&gt;&gt; &gt;&gt; &gt; interested
&gt;&gt; &gt;&gt; &gt; parties?

&gt;&gt; &gt;&gt; &gt; Any takers?

&gt;&gt; &gt;&gt; Not at this stage, Ken. I believe it will be too dry and Academic to
&gt;&gt; &gt;&gt; interest me, and I can't/won't contribute to a pissing contest about
&gt;&gt; &gt;&gt; methodologies, none of which I believe to be perfect... :-)

&gt;&gt; &gt;&gt; Nevertheless, I wish you luck with it :-)

&gt;&gt; &gt;&gt; Pete.
&gt;&gt; &gt;&gt; --
&gt;&gt; &gt;&gt; &quot;I used to write COBOL...now I can do anything.&quot;- Hide quoted text -

&gt;&gt; &gt;&gt; - Show quoted text -- Hide quoted text -

&gt;&gt; &gt;&gt; - Show quoted text -

&gt;&gt; &gt; How is your management book coming along? My offer to proof read it is
&gt;&gt; &gt; still open.

&gt;&gt; Thanks Alistair.

&gt;&gt; I am currently reviewing what I have (about 75% of the total). I'll send
&gt;&gt; you
&gt;&gt; a proof copy for review when I have 100%.

&gt;&gt; Pete.
&gt;&gt; --
&gt;&gt; &quot;I used to write COBOL...now I can do anything.&quot;- Hide quoted text -

&gt;&gt; - Show quoted text -

&gt; Cheers, I can't wait   :-)
">

Hey, I'd like a free, ah, oh, a err, ... I mean a proof copy too!
</POST>
<POST>
<POSTER> &quot;klsha...@att.net&quot; &lt;klsha...@att.net&gt; </POSTER>
<POSTDATE> 2008-01-25T12:17:00 </POSTDATE>
On Jan 24, 10:47 pm, Robert &lt;n ... @e.mail&gt; wrote:

<QUOTE PREVIOUSPOST="
&gt; On Thu, 24 Jan 2008 10:04:37 -0800 (PST), &quot;klsha ... @att.net&quot; &lt;klsha ... @att.net&gt; wrote:
&gt; An 'old wine in new bottles' argument is unpersuasive because it makes the advocate sound
&gt; like a sore loser.
">

If I take comfort in discovery of Eternal (or at least Persistent)
Threads, what care *I* about whether others are unpersuaded? For me, a
successful project is one where I leave things a bit better than when
I came, with integrity, that I be paid adequately for it, and that I
be Happy. Should that coincide, even approximately, with others' needs
such as 'Meets Requirements', 'Within Budget', and 'On Time' - then so
much the better.

<QUOTE PREVIOUSPOST="
&gt; Here's the link: http://www.cs.umd.edu/class/spring2003/cmsc838p/Process/waterfall.pdf
">

Thanks for the lookup - yes, that is the one! :-)

<QUOTE PREVIOUSPOST="
&gt; &gt;Be not mistaken now, we, and by &quot;we&quot; I mean those such as *I*, neo-
&gt; &gt;Classicists, Traditionalists, Pragmatic Practitioners, in a Word, we
&gt; &gt;*Journeymen*, who do not deign to call ourselves Methodology Masters,
&gt; &gt;all owe the Agilists a great debt of gratitude.

&gt; You are being sardonic.
">

Actually, no. Really. It *is* simply as stated something that I
believe.

<QUOTE PREVIOUSPOST="
&gt; Royce says divisibility is the acid test for adequate documentation.

&gt; &quot; Many parts of the test process are best handled by test specialists who did not
&gt; necessarily contribute to the original design. If it is argued that only the designer can
&gt; perform a thorough test because he understands the area he built, this is a sure sign of a
&gt; failure to document properly.&quot;
">

Robert Glass makes the case more succintly and more articulately than
I can. In his landmark (for me) _Facts and Fallacies of Software
Engineering_, he sets forth Fact #29:

'Programmers shift from design to coding when the problem is
decomposed to a level of primitives that the designer understands. If
the coder is not the same person as the designer, the designer's
primitives are unlikely to match the coder's primitives, and trouble
will result.'

Commentary by me on what I think is a brilliant insight by Glass: If
the designer and coder are different people, then three situations are
possible - (1) the designer primitives are at the same level of
abstraction as the coder wants; (2) the designer primitives are at a
level of abstraction more detailed than the coder wants; or (3) the
primitives are at a level of abstraction more *general* than the coder
can handle.

Scenario (1), in my opinion is the least likely to occur. And that is
why we have trouble.

When Scenario (2) occurs, we all know what the coder does - he simply
throws away the design spec! Haven't all of us done that? :-)

When Scenario (3) occurs, what we have is &quot;churn&quot;. As first-iterated
coded, just a little bit of testing reveals the program falls far
short of its &quot;intended purpose&quot;, and then we go into a loooonnng cycle
of code-and-fix.

This has profound implications for the phenomenon of &quot;outsourcing&quot;.

<QUOTE PREVIOUSPOST="
&gt; &gt;Once upon a time, that was the rationale for &quot;Analyst/Programmer&quot;, was
&gt; &gt;it not?.

&gt; It's just job title inflation.
">

Hmmmm.. I rather think Analyst/Programmer is an honest attempt to deal
with the Indivisibility issue described above.

But I do grant you, with much appreciation, that Analyst/Programmer
would fall into that Technocrat/Artist generational category that you
so clearly communicated to me.

<QUOTE PREVIOUSPOST="
&gt; &gt;There once was a time, and maybe it was Our Time, and yes, maybe it is
&gt; &gt;*gone* now, that all of this was Common Knowledge.

&gt; &gt;But presently, what others might see as Nouveau Secrets are really
&gt; &gt;Ancient Wisdom, mostly forgotten.

&gt; The evolution of methodologies is the confluence of two sets of cycles. The first is the
&gt; generational cycle brilliantly described by Strauss and Howe in their book Generations.
&gt; The second is the tug of war between users and management and techies. In both, attempts
&gt; to correct past deficiencies overshoot the mark and become candidates for correction
&gt; during the next iteration. The path is not as simple as a two-dimensional sine wave.
&gt; Because of multiple degrees of freedom (dimensions), there can be multiple stages before
&gt; the supercycle starts over. There are four stages in the Generations model: Hero,
&gt; Technocrat/Artist, Puritan/Yuppie and XGen/Punk (my terminology). A methodology that seems
&gt; right to one generational style will seem all wrong to its successor. For example, the
&gt; Artistic style that you seem to favor seems undisciplined to Yuppies, who don't trust
&gt; anyone to do things right, least of all themselves. That's how we got Waterfall, which
&gt; seems too rigidly structured to XGens, who just want to get the job done as quickly as
&gt; possible. That XGens also disdain beautiful code shows the cycles are not simple
&gt; oscillation.
">

Wow, this last section I find very, very helpful to my understanding -
with your permission, I would like to excerpt it, along with the link
below, to cross-post (without attribution), in that other forum.
Really... and I am not being sardonic :-).

<QUOTE PREVIOUSPOST="
&gt; http://en.wikipedia.org/wiki/Generations_%28book%29- Hide quoted text -

&gt; - Show quoted text -
">

Thanks for making this effort to help me.

Ken
</POST>
<POST>
<POSTER> &quot;tlmfru&quot; &lt;la...@mts.net&gt; </POSTER>
<POSTDATE> 2008-01-25T12:28:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&lt;docdw ... @panix.com&gt; wrote in message news:fncm8p$fsr$1@reader2.panix.com ...
&gt; &gt; Waw haw haw haw... this guy's *serious*?  Give this a listen, from .pdf
&gt; page 5 (showing book page 332):

&gt; --begin quoted text

&gt; Step 2: DOCUMENT THE DESIGN

&gt;      At this point it is appropriate to raise the issue of - 'how much
&gt; documentation?'  My own view is 'quite a lot'; certainly more than most
&gt; programmers, analysts or program designers are willing to do if left to
&gt; their own devices.  The first rule of managing software development is
&gt; ruthless enforcement of documentation requirements.
">

&lt;snip&gt;

<QUOTE PREVIOUSPOST="
&gt; --end quoted text

&gt; All righty, by a show of hands... has anyone ever seen anything like this
&gt; happen?

&gt; (My experience, of course, is with 'sick shops' so I haven't run across an
&gt; instance of a single manager - let along an entire project's management -
&gt; being replaced because documentation was not 'up to acceptable standards',
&gt; even where 'acceptable' was construed as 'scribble something in cuneiform
&gt; - Akkadian or Hittite, your choice - on a bit of bathroom-tissue'.)

&gt; DD
">

I often hear the argument - from programmers mostly - &quot;how can you write the
specs before you write the program?&quot;  To me, that's most peculiar.  I answer
&quot;how can you draw the blueprints before you build the house?&quot;.  Trouble is,
they don't get it.

Whether or not they commit anything to paper, every programmer - every good
one, anyway - has a pretty good idea of what the program has to do.  A great
number of the details will have to be filled in but the basic flow and the
functions that the program has to accomplish are clear or at least obvious.
(OO programmers take note: I'm not using &quot;function&quot; in the OO sense).  I
have found, and the people I've convinced have found, that if you take time
and scribble all these notions down, and go over them a few times with
different coloured pens (Yes!  You can't write or debug a program without a
red pen!) you will have resolved most of the issues and greatly eased the
actual coding.   Notes and corrections can be likewise scribbled in; once
the program is working the whole mass can be neatly reformatted into the
program specs.

(Please keep your scorn generators off.  I'm speaking about something that
works, can be proved to work, and is easy to do.  That I choose to do it
with pencil &amp; paper is irrelevant.)

(The process that PD uses is similar in essence but far more controlled and
precise in practice).

Apart from what I was calling task guides in 1980 but which are now known as
use cases, this is the only form of documentation which is controversial.  I
can truthfully state that it's saved my bacon on any number of occasions.

To answer DD's question: no, I haven't seen this done, but there have been
times when I wished it had!  And I'd agree that conformance with
documentation standards is essential to keep the shop out of trouble.

PL
</POST>
<POST>
<POSTER> Howard Brazee &lt;how...@brazee.net&gt; </POSTER>
<POSTDATE> 2008-01-25T12:41:00 </POSTDATE>
On Fri, 25 Jan 2008 09:17:36 -0800 (PST), &quot;klsha ... @att.net&quot;

<QUOTE PREVIOUSPOST="
&lt;klsha ... @att.net&gt; wrote:
&gt;Robert Glass makes the case more succintly and more articulately than
&gt;I can. In his landmark (for me) _Facts and Fallacies of Software
&gt;Engineering_, he sets forth Fact #29:

&gt;'Programmers shift from design to coding when the problem is
&gt;decomposed to a level of primitives that the designer understands. If
&gt;the coder is not the same person as the designer, the designer's
&gt;primitives are unlikely to match the coder's primitives, and trouble
&gt;will result.'
">

This is where modern design tries to keep up with modern needs.    We
don't want programmers writing code, we want designers designing
solutions.    The ideal is to have the &quot;code&quot; created by the tools.
That's why assemblers were created, then compilers, and other design
tools.

Of course we have a moving target here, as our components grow, so
does our environment.

...

<QUOTE PREVIOUSPOST="
&gt;&gt; &gt;Once upon a time, that was the rationale for &quot;Analyst/Programmer&quot;, was
&gt;&gt; &gt;it not?.

&gt;&gt; It's just job title inflation.

&gt;Hmmmm.. I rather think Analyst/Programmer is an honest attempt to deal
&gt;with the Indivisibility issue described above.
">

Each iteration have these titles bumped up.    Analysis now requires
more of the company's big picture, and programming now is closer to
the old analyst level.

I've seen programmers be the people who control the accountants (the
stereotype is the opposite).    But they need to know and follow the
accounting basics instead of finding what can be done.
</POST>
<POST>
<POSTER> Howard Brazee &lt;how...@brazee.net&gt; </POSTER>
<POSTDATE> 2008-01-25T13:41:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
On Fri, 25 Jan 2008 11:28:40 -0600, &quot;tlmfru&quot; &lt;la ... @mts.net&gt; wrote:
&gt;I often hear the argument - from programmers mostly - &quot;how can you write the
&gt;specs before you write the program?&quot;  To me, that's most peculiar.  I answer
&gt;&quot;how can you draw the blueprints before you build the house?&quot;.  Trouble is,
&gt;they don't get it.
">

I suspect they think your programming with specs is kind of like when
an American Football coach scripts out the first 15 plays.   &quot;How can
he know what the situation will be?&quot;.
</POST>
<POST>
<POSTER> &quot;klsha...@att.net&quot; &lt;klsha...@att.net&gt; </POSTER>
<POSTDATE> 2008-01-25T13:55:00 </POSTDATE>
On Jan 25, 7:55 am, docdw ... @panix.com () wrote:

<QUOTE PREVIOUSPOST="
&gt; In article &lt;dn9ip39ak344qlvd5clil31hvvi5gdc ... @4ax.com&gt;,

&gt; (My experience, of course, is with 'sick shops' so I haven't run across an
&gt; instance of a single manager - let along an entire project's management -
&gt; being replaced because documentation was not 'up to acceptable standards',
&gt; even where 'acceptable' was construed as 'scribble something in cuneiform
&gt; - Akkadian or Hittite, your choice - on a bit of bathroom-tissue'.)

&gt; DD
">

Methinks that Winston Royce was conducting something akin to an
Einsteinian &quot;thought experiment.&quot; It is only in those programming
environments &quot;approaching the speed of light&quot; or &quot;operating at the sub-
atomic level&quot; that 'not up to acceptable documentation standards'
results in wholesale management replacement. :-)

Still, it is entirely useful to perform those &quot;thought experiments&quot;,
for they help you get through a Friday afternoon, and after all, Hope
Springs Eternal, that Somewhere, Somehow, such things happen...

Ken
</POST>
</TEXT>
</BODY>
</DOC>
