<DOC>
<DOCID> eng-NG-31-126394-9137914 </DOCID>
<DOCTYPE SOURCE="usenet"> USENET TEXT </DOCTYPE>
<DATETIME> 2007-10-21T06:03:00 </DATETIME>
<BODY>
<HEADLINE>
Indentation style: public/private/protected/case
</HEADLINE>
<TEXT>
<POST>
<POSTER> Kenneth Porter &lt;shiva.blackl...@sewingwitch.com&gt; </POSTER>
<POSTDATE> 2007-10-21T06:03:00 </POSTDATE>
I'm un-indenting the constructs mentioned in the subject line to align
with the enclosing braces:

switch (expression)
{
case 1:
statement1;
case 2;
statement2;
default:
defaultstatement;
|

class Class
{
public:
declaration1;
private:
declaration2;

<QUOTE PREVIOUSPOST="
};
">

I'm finding myself in an edit war with a coworker. (A result of default
editor settings, not a philosophical conflict.) His style is set to
indent the colon-terminated keywords, and then indent the controlled
statements/declarations an additional level.

class Class
{
public:
declaration1;
private:
declaration2;

<QUOTE PREVIOUSPOST="
};
">

Is there value in the double-indenting style? I find it squeezes out yet
more precious horizontal space without making the code significantly more
readable. Do others find it more readable? What's common practice here?

I just want to establish consistency so that our change control system
doesn't show the whole file changed everytime one of us checks a file in
with different indenting.
</POST>
<POST>
<POSTER> Erik Wikström &lt;Erik-wikst...@telia.com&gt; </POSTER>
<POSTDATE> 2007-10-21T06:10:00 </POSTDATE>
On 2007-10-21 12:03, Kenneth Porter wrote:

<QUOTE PREVIOUSPOST="
&gt; I'm un-indenting the constructs mentioned in the subject line to align
&gt; with the enclosing braces:

&gt; switch (expression)
&gt; {
&gt; case 1:
&gt;    statement1;
&gt; case 2;
&gt;    statement2;
&gt; default:
&gt;    defaultstatement;
&gt; |

&gt; class Class
&gt; {
&gt; public:
&gt;    declaration1;
&gt; private:
&gt;    declaration2;
&gt; };

&gt; I'm finding myself in an edit war with a coworker. (A result of default
&gt; editor settings, not a philosophical conflict.) His style is set to
&gt; indent the colon-terminated keywords, and then indent the controlled
&gt; statements/declarations an additional level.

&gt; class Class
&gt; {
&gt;    public:
&gt;       declaration1;
&gt;    private:
&gt;       declaration2;
&gt; };

&gt; Is there value in the double-indenting style? I find it squeezes out yet
&gt; more precious horizontal space without making the code significantly more
&gt; readable. Do others find it more readable? What's common practice here?

&gt; I just want to establish consistency so that our change control system
&gt; doesn't show the whole file changed everytime one of us checks a file in
&gt; with different indenting.
">

Select an editor that can auto-indent the code and use the standard that
it uses. Indentation wars are stupid, there are a few styles that are
hard to read but most are just that, styles. For that reason you should
select a style that is supported by your editor, that way you do not
have to worry about it.

--
Erik Wikström
</POST>
<POST>
<POSTER> &quot;Jim Langston&quot; &lt;tazmas...@rocketmail.com&gt; </POSTER>
<POSTDATE> 2007-10-21T06:06:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
&quot;Kenneth Porter&quot; &lt;shiva.blackl ... @sewingwitch.com&gt; wrote in message
">

news:Xns99D01F163D284shivawellcom@216.196.97.136 ...

<QUOTE PREVIOUSPOST="
&gt; I'm un-indenting the constructs mentioned in the subject line to align
&gt; with the enclosing braces:

&gt; switch (expression)
&gt; {
&gt; case 1:
&gt;   statement1;
&gt; case 2;
&gt;   statement2;
&gt; default:
&gt;   defaultstatement;
&gt; |

&gt; class Class
&gt; {
&gt; public:
&gt;   declaration1;
&gt; private:
&gt;   declaration2;
&gt; };

&gt; I'm finding myself in an edit war with a coworker. (A result of default
&gt; editor settings, not a philosophical conflict.) His style is set to
&gt; indent the colon-terminated keywords, and then indent the controlled
&gt; statements/declarations an additional level.

&gt; class Class
&gt; {
&gt;   public:
&gt;      declaration1;
&gt;   private:
&gt;      declaration2;
&gt; };

&gt; Is there value in the double-indenting style? I find it squeezes out yet
&gt; more precious horizontal space without making the code significantly more
&gt; readable. Do others find it more readable? What's common practice here?

&gt; I just want to establish consistency so that our change control system
&gt; doesn't show the whole file changed everytime one of us checks a file in
&gt; with different indenting.
">

I was once in an editing war with a boss.  He would indent tabed (8 spaced
tabs) and I would put in 3 spaces.  I felt his was hard to read, he felt
mine.  Finally, he said, &quot;You leave my code alone, I'll leave your code
alone&quot; and we did.

If you can't agree to agree, at least agree to disagree.
</POST>
<POST>
<POSTER> &quot;Bo Persson&quot; &lt;b...@gmb.dk&gt; </POSTER>
<POSTDATE> 2007-10-21T07:53:00 </POSTDATE>
<QUOTE PREVIOUSPOST="
Kenneth Porter wrote:
">

:: I'm un-indenting the constructs mentioned in the subject line to
:: align with the enclosing braces:
::
:: switch (expression)
:: {
:: case 1:
::   statement1;
:: case 2;
::   statement2;
:: default:
::   defaultstatement;
:::
::
:: class Class
:: {
:: public:
::   declaration1;
:: private:
::   declaration2;
:: };
::
:: I'm finding myself in an edit war with a coworker. (A result of
:: default editor settings, not a philosophical conflict.) His style
:: is set to indent the colon-terminated keywords, and then indent
:: the controlled statements/declarations an additional level.
::
:: class Class
:: {
::   public:
::      declaration1;
::   private:
::      declaration2;
:: };

I find this particular code harder to read, because there is a two
level distance between declaration2 and the final brace of the class.

That is about the only reason why I personally like your indentation
better.  :-)

::
:: I just want to establish consistency so that our change control
:: system doesn't show the whole file changed everytime one of us
:: checks a file in with different indenting.

Can't you have your editors or you version control system save the
files in a common format?

Bo Persson
</POST>
<POST>
<POSTER> Kenneth Porter &lt;shiva.blackl...@sewingwitch.com&gt; </POSTER>
<POSTDATE> 2007-10-22T13:50:00 </POSTDATE>
&quot;Bo Persson&quot; &lt;b ... @gmb.dk&gt; wrote in news:5o0stnFkfqm3U1@mid.individual.net:

<QUOTE PREVIOUSPOST="
&gt; Can't you have your editors or you version control system save the
&gt; files in a common format?
">

We use the same editor. It's just that his apparently has the default
settings, while mine has been tweaked to remove the additional indent.
Neither of is wedded (yet) to a style, but I want to make sure my style
isn't deficient in some way before I go make him change his to match.

The version control system is Subversion. It doesn't care about the format
of files. It can be told that a file is text and will do line-ending
conversion but it won't re-indent files, because that's potentially a
higher-level semantic change. (For example, that would really screw up
Python source, where indentation is part of the syntax.)
</POST>
<POST>
<POSTER> James Kanze &lt;james.ka...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-10-23T05:06:00 </POSTDATE>
On Oct 22, 7:50 pm, Kenneth Porter &lt;shiva.blackl ... @sewingwitch.com&gt;
wrote:

<QUOTE PREVIOUSPOST="
&gt; &quot;Bo Persson&quot; &lt;b ... @gmb.dk&gt; wrote in news:5o0stnFkfqm3U1@mid.individual.net:
">

[...]

<QUOTE PREVIOUSPOST="
&gt; The version control system is Subversion. It doesn't care about the format
&gt; of files. It can be told that a file is text and will do line-ending
&gt; conversion but it won't re-indent files, because that's potentially a
&gt; higher-level semantic change. (For example, that would really screw up
&gt; Python source, where indentation is part of the syntax.)
">

If the version control system doesn't allow you to insert
scripts before insertion, it's time to replace it with something
else.  Immediately.  You definitly want to automatically run
your unit tests before check in, and reject the check in if they
fail.  If you're able to do this, it's trivial to insert an
additional tool to reformat.

--
James Kanze (GABI Software)             email:james.ka ... @gmail.com
Conseils en informatique orientée objet/
Beratung in objektorientierter Datenverarbeitung
9 place Sémard, 78210 St.-Cyr-l'École, France, +33 (0)1 30 23 00 34
</POST>
<POST>
<POSTER> Kenneth Porter &lt;shiva.blackl...@sewingwitch.com&gt; </POSTER>
<POSTDATE> 2007-10-23T07:21:00 </POSTDATE>
James Kanze &lt;james.ka ... @gmail.com&gt; wrote in news:1193130405.821858.318190
@q5g2000prf.googlegroups.com:

<QUOTE PREVIOUSPOST="
&gt; If the version control system doesn't allow you to insert
&gt; scripts before insertion, it's time to replace it with something
&gt; else.  Immediately.  You definitly want to automatically run
&gt; your unit tests before check in, and reject the check in if they
&gt; fail.  If you're able to do this, it's trivial to insert an
&gt; additional tool to reformat.
">

In fact Subversion has a pre-commit hook (on the server side), but the hook
won't modify the committed files. It can only reject them if they don't
meet your criteria.

Subversion does have eol conversion (if you tag the file with an eol
&quot;property&quot;) but I'm not sure if this is done on the client or server.
</POST>
<POST>
<POSTER> Kenneth Porter &lt;shiva.blackl...@sewingwitch.com&gt; </POSTER>
<POSTDATE> 2007-10-23T07:45:00 </POSTDATE>
From the Subversion mailing list:

http://subversion.tigris.org/servlets/ReadMsg?listName=users&amp;msgNo;=33887

<QUOTE PREVIOUSPOST="
&gt; Just for your info, there is no sane way to modify the data that was
&gt; committed. The reason is that if you modified the data that a use
&gt; committed, the user's local data would be out of sync with the data on
&gt; the server, leading to all kinds of trouble. Yes, there are possible
&gt; solutions, but these are rather complicated and not in Subversion.
&gt; That is the reason why you can only reject malformatted data, but not
&gt; format it yourself.
">

There are wrapper programs that might be able to do this, such as Tortoise
and Ankh.
</POST>
<POST>
<POSTER> James Kanze &lt;james.ka...@gmail.com&gt; </POSTER>
<POSTDATE> 2007-10-24T03:20:00 </POSTDATE>
On Oct 23, 1:21 pm, Kenneth Porter &lt;shiva.blackl ... @sewingwitch.com&gt;
wrote:

<QUOTE PREVIOUSPOST="
&gt; James Kanze &lt;james.ka ... @gmail.com&gt; wrote in news:1193130405.821858.318190
&gt; @q5g2000prf.googlegroups.com:
&gt; &gt; If the version control system doesn't allow you to insert
&gt; &gt; scripts before insertion, it's time to replace it with something
&gt; &gt; else.  Immediately.  You definitly want to automatically run
&gt; &gt; your unit tests before check in, and reject the check in if they
&gt; &gt; fail.  If you're able to do this, it's trivial to insert an
&gt; &gt; additional tool to reformat.
&gt; In fact Subversion has a pre-commit hook (on the server side),
&gt; but the hook won't modify the committed files. It can only
&gt; reject them if they don't meet your criteria.
">

That's interesting.

It did occur to me after posting that regardless of what the
version control offers, it's pretty straightforeward to wrap its
commands in a script---that can do whatever you want.  I've
worked in places which used very primitive version control
systems (CVS, SCCS, etc.), and in such cases, the basic commands
were always wrapped in some sort of script---it would be
accurate to say that we actually wrote our own version control
system, using SCCS or CVS as the underlying machine.

<QUOTE PREVIOUSPOST="
&gt; Subversion does have eol conversion (if you tag the file with
&gt; an eol &quot;property&quot;) but I'm not sure if this is done on the
&gt; client or server.
">

Eol represents another bag of worms:-).  Think of what happens
on shared file systems.  In practice, the simplest solution is
just to configure everything to use the Unix convention, since
this causes no problems with any of the Windows toolset as well.
(The editors I use on Windows have options to allow writing
files back using either convention.)  I've no experience with
Mac, but given that modern Mac has Unix under the hood, I would
presume that the Unix convention works there as well.  And of
course, for IBM mainframes and the like, you have to transcode
anyway, since they expect EBCDIC.

--
James Kanze (GABI Software)             email:james.ka ... @gmail.com
Conseils en informatique orientée objet/
Beratung in objektorientierter Datenverarbeitung
9 place Sémard, 78210 St.-Cyr-l'École, France, +33 (0)1 30 23 00 34
</POST>
<POST>
<POSTER> Kenneth Porter &lt;shiva.blackl...@sewingwitch.com&gt; </POSTER>
<POSTDATE> 2007-10-24T10:57:00 </POSTDATE>
James Kanze &lt;james.ka ... @gmail.com&gt; wrote in news:1193210405.198830.100840
@z24g2000prh.googlegroups.com:

<QUOTE PREVIOUSPOST="
&gt; I've worked in places which used very primitive version control
&gt; systems (CVS, SCCS, etc.), and in such cases, the basic commands were
&gt; always wrapped in some sort of script---it would be accurate to say
&gt; that we actually wrote our own version control system, using SCCS or
&gt; CVS as the underlying machine.
">

A good system should be modular with narrow coupling, just like a C++
program. ;)

Subversion, like CVS, is a module that provides client/server version
control, and little else. You can then integrate it into a higher-level
change management (CM) system that does more sophisticated things, like re-
indenting sources.

Tortoise is a Windows GUI that integrates the Subversion libraries into
Windows Explorer.

Ankh does the same for the Visual Studio IDE.
</POST>
</TEXT>
</BODY>
</DOC>
